<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>200dk人脸注册Python样例扩展</title>
    <url>/2021/12/20/200dk%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8CPython%E6%A0%B7%E4%BE%8B%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>大三上学期创新实践课程作业:</p>
<p>硬件: 华为200dk(机器学习的套件 类似于一个主机 专门用来处理一些机器学习的任务)</p>
<p>软件: 对已有的样例仓中Python样例仓的拓展一个人脸注册的功能(单人)</p>
<span id="more"></span>
<h2 id="硬件环境搭建">硬件环境搭建</h2>
<blockquote>
<p>推荐使用合设环境 方便简单还迅速 不需要在个人电脑或虚拟机上搭建复杂的环境 直接远程登录 在200dk上进行开发</p>
</blockquote>
<h3 id="下载合设环境镜像">1. 下载合设环境镜像</h3>
<p>在昇腾论坛下载合设环境镜像：<a href="https://gitee.com/ascend/samples/wikis/Atlas200dk合设环境搭建--用镜像恢复的方式?sort_id=3706490">Atlas200dk合设环境搭建--用镜像恢复的方式</a>。</p>
<p>下载链接：<a href="https://gitee.com/ascend/samples/wikis/Atlas200dk合设环境搭建--用镜像恢复的方式?sort_id=3706490">https://gitee.com/ascend/samples/wikis/Atlas200dk%E5%90%88%E8%AE%BE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA--%E7%94%A8%E9%95%9C%E5%83%8F%E6%81%A2%E5%A4%8D%E7%9A%84%E6%96%B9%E5%BC%8F?sort_id=3706490</a></p>
<p><font color=red>直接下最新的  样例跑起来更简单 功能更强大 bug更少</font></p>
<h3 id="合设环境搭建用镜像恢复的方式在windows系统内执行">2. 合设环境搭建–用镜像恢复的方式（在Windows系统内执行）</h3>
<p>合设环境搭建–用镜像恢复的方式可以在Windows/macOS/Linux系统内执行，下载相应版本的Etcher工具快速烧录镜像至您的SD卡，本实验以windows系统为例。</p>
<ul>
<li>步骤 1 下载Etcher工具</li>
</ul>
<p>Etcher工具下载地址：https://www.balena.io/etcher/</p>
<ul>
<li>步骤 2 解压镜像，得到img文件</li>
<li>步骤 3 准备64G的SD卡，以及读卡器</li>
</ul>
<p>将64G SD卡插入读卡器，接入Windows电脑。</p>
<ul>
<li>步骤 4 烧录SD卡</li>
</ul>
<p>打开Etcher工具，选择img文件和SD卡，点击Flash，注意：Flash期间会弹出是否格式化的窗口，点击取消关闭窗口，直到Flash完成。</p>
<p><font color=red>能不能烧录成功 看脸 有的电脑行 有的电脑不行 具体原因不太清楚</font></p>
<blockquote>
<p>官网的教程使用脚本烧录 但烧录的貌似是运行环境... 需要配置的环境比较多 不推荐新手使用</p>
</blockquote>
<h3 id="sd卡扩区">3. SD卡扩区</h3>
<blockquote>
<p>简单说一下</p>
</blockquote>
<p>将SD插入电脑 可以使用Ubuntu下的gparted对SD未分配的SD空间进行扩区。这就跟虚拟机磁盘满了 除了将在vmware下给它分配更多的空间以外 还需要以系统镜像为启动盘 登录系统 手动用gparted对扩展的内存进行分配扩展 关于扩展虚拟机的空间 详见google 关于对200dk的sd卡扩区 详见其提供的合设环境教程 这里草草说一下</p>
<h3 id="修改ubuntu服务器的usb虚拟网卡ip地址">4. 修改Ubuntu服务器的USB虚拟网卡IP地址</h3>
<p>Atlas 200 DK开发者板与Ubuntu服务器通过USB端口直连场景下，由于Atlas 200 DK的USB网卡的默认IP地址为192.168.1.2，所以需要修改Ubuntu服务器的USB虚拟网卡的IP地址为192.168.1.x（x取值范围为0<sub>1，3</sub>254），使Atlas 200 DK与Ubuntu服务器可以通信。</p>
<ul>
<li>切换为root</li>
<li>更改/创建: /etc/netplan/01-netcfg.yaml 如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">     <span class="attr">enp0s12u2:</span> <span class="comment">#配置的网卡名称,使用ifconfig -a查看得到</span></span><br><span class="line">       <span class="attr">dhcp4:</span> <span class="literal">no</span> <span class="comment">#dhcp4关闭</span></span><br><span class="line">       <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.1</span><span class="number">.223</span><span class="string">/8</span>] <span class="comment">#设置本机IP及掩码</span></span><br><span class="line">       <span class="attr">gateway4:</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="comment">#设置网关</span></span><br><span class="line">       <span class="attr">nameservers:</span></span><br><span class="line">         <span class="attr">addresses:</span> [<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>] </span><br></pre></td></tr></table></figure>
<ul>
<li>更新配置 -&gt;输入命令: netplan apply</li>
</ul>
<h3 id="访问开发板-启用dhcp接入路由器自动分配ip">5. 访问开发板 启用dhcp(接入路由器自动分配ip)</h3>
<ul>
<li>vi /etc/netplan/01-netcfg.yaml 允许eth0启用dhcp自动分配ip地址</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#  renderer: NetworkManager</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">usb0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在主机的vscode下载remote-ssh插件-配置200dk的ip和公私钥以免密登录">6. 在主机的vscode下载remote-SSH插件 配置200dk的ip和公私钥以免密登录</h3>
<ul>
<li>先启用密码的方式登录200dk(首选项-&gt;设置-&gt;插件设置)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201816825.png" /></p>
<ul>
<li>配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">Ascend</span></span><br><span class="line">    <span class="string">HostName</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">    <span class="string">User</span> <span class="string">HwHiAiUser</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将本机的id_rsa.pub里的内容放在200dk里 ~/.ssh/authorized_keys 文件下</li>
<li>重启200dk sshd服务 -&gt; systemctl restart sshd.service</li>
<li>更改主机vscode配置 通过公私钥免密登录</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">Ascend</span></span><br><span class="line">    <span class="string">HostName</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">    <span class="string">User</span> <span class="string">HwHiAiUser</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于生成windows下的公私钥以及一些细节 请自行google</p>
</blockquote>
<h2 id="人脸注册单人功能的实现">人脸注册(单人功能)的实现</h2>
<blockquote>
<p>本文忽略样例启动的流程环节 详见代码仓里的对应样例的readme</p>
</blockquote>
<h3 id="main.py">1. main.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;../../../../common&quot;</span>)</span><br><span class="line">sys.path.append(<span class="string">&quot;../&quot;</span>)</span><br><span class="line">project_path = sys.path[<span class="number">0</span>] + <span class="string">&quot;/../&quot;</span></span><br><span class="line">sys.path.append(project_path)</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> normalize</span><br><span class="line"><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.seterr(divide=<span class="string">&#x27;ignore&#x27;</span>,invalid=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> atlas_utils.camera <span class="keyword">import</span> Camera</span><br><span class="line"><span class="keyword">import</span> atlas_utils.presenteragent.presenter_channel <span class="keyword">as</span> presenter_channel</span><br><span class="line"><span class="keyword">from</span> atlas_utils.acl_model <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> atlas_utils.acl_resource <span class="keyword">import</span> AclResource</span><br><span class="line"><span class="keyword">from</span> vgg_ssd <span class="keyword">import</span> VggSsd</span><br><span class="line"></span><br><span class="line">MODEL_PATH = project_path + <span class="string">&quot;/model/face_detection.om&quot;</span></span><br><span class="line">MODEL_WIDTH = <span class="number">304</span></span><br><span class="line">MODEL_HEIGHT = <span class="number">300</span></span><br><span class="line">FACE_DETEC_CONF= project_path + <span class="string">&quot;/scripts/face_detection.conf&quot;</span></span><br><span class="line">CAMERA_FRAME_WIDTH = <span class="number">1280</span></span><br><span class="line">CAMERA_FRAME_HEIGHT = <span class="number">720</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;main&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#Initialize acl</span></span><br><span class="line">    acl_resource = AclResource()</span><br><span class="line">    acl_resource.init()</span><br><span class="line">    <span class="comment">#Create a detection network instance, currently using the vgg_ssd network. </span></span><br><span class="line">    <span class="comment"># When the detection network is replaced, instantiate a new network here</span></span><br><span class="line">    detect = VggSsd(acl_resource, MODEL_WIDTH, MODEL_HEIGHT)</span><br><span class="line">    <span class="comment">#Load offline model</span></span><br><span class="line">    model = Model(MODEL_PATH)</span><br><span class="line">    <span class="comment">#Connect to the presenter server according to the configuration, </span></span><br><span class="line">    <span class="comment"># and end the execution of the application if the connection fails</span></span><br><span class="line">    chan = presenter_channel.open_channel(FACE_DETEC_CONF)</span><br><span class="line">    <span class="keyword">if</span> chan <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Open presenter channel failed&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#Open the CARAMER0 camera on the development board</span></span><br><span class="line">    cap = Camera(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#人脸注册</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#从摄像头依次读取一张读取一张人脸进行注册</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请无关人员撤离 准备进行人脸注册&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请将摄像头对准自己 听到哔声后查看注册结果&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n5s 后开始注册\n&quot;</span>) </span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;======================================&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="comment">#Read a picture from the camera</span></span><br><span class="line">        image_register = cap.read()</span><br><span class="line">        <span class="keyword">if</span> image_register <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Get memory from camera failed&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#The detection network processes images into model input data</span></span><br><span class="line">        model_input_register = detect.pre_process(image_register)</span><br><span class="line">        <span class="keyword">if</span> model_input_register <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Pre process image failed&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Send data to offline model inference</span></span><br><span class="line">        result_register = model.execute(model_input_register)</span><br><span class="line">        box_info_register = result_register[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        score_register = box_info_register[<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> score_register &gt;<span class="number">0.90</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;参数提取成功 识别率: &quot;</span> + <span class="built_in">str</span>(score_register))</span><br><span class="line">            name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的名字: &quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;参数提取失败 识别率: &quot;</span> + <span class="built_in">str</span>(score_register) + <span class="string">&quot;正在进行重新匹配...&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请告诉我你的名字哦 ~\n\n&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;匹配成功 下面进行人脸识别&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#flag是一个小标记 用来控制 while 循环</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="comment">#注册人脸的模型输出结果以及识别率</span></span><br><span class="line">    box_info_register = result_register[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    score_register = box_info_register[<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 5 秒后开始进行人脸检测</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n5s 后开始进行人脸检测\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;======================================&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#Read a picture from the camera</span></span><br><span class="line">        image = cap.read()</span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Get memory from camera failed&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#The detection network processes images into model input data</span></span><br><span class="line">        model_input = detect.pre_process(image)</span><br><span class="line">        <span class="keyword">if</span> model_input <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Pre process image failed&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#Send data to offline model inference</span></span><br><span class="line">        result = model.execute(model_input)</span><br><span class="line">        <span class="comment">#Detecting network analysis inference output</span></span><br><span class="line">        jpeg_image, detection_list = detect.post_process(result, image)</span><br><span class="line">        <span class="keyword">if</span> jpeg_image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The jpeg image for present is None&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        chan.send_detection_data(CAMERA_FRAME_WIDTH, CAMERA_FRAME_HEIGHT, </span><br><span class="line">                                 jpeg_image, detection_list)</span><br><span class="line">        <span class="comment">#余弦距离可适应用于人脸识别，将待识别人脸的图像提取特征，与人脸注册库的所有图像的特征矩阵求距离，然后找到最相似的</span></span><br><span class="line">        box_info = result[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        score = box_info[<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">        box_info_register = box_info_register[~np.isnan(box_info_register)]</span><br><span class="line">        box_info = box_info[~np.isnan(box_info)]</span><br><span class="line"></span><br><span class="line">        norm1 = norm(box_info,axis=-<span class="number">1</span>)</span><br><span class="line">        norm2 = norm(box_info_register,axis=-<span class="number">1</span>)</span><br><span class="line">        end_norm = np.dot(norm1,norm2)</span><br><span class="line">        cos = np.dot(box_info, box_info_register.T)/end_norm</span><br><span class="line"></span><br><span class="line">        similarity= <span class="number">0.5</span>*cos+<span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        similarity = similarity[~np.isnan(similarity)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> similarity &gt; <span class="number">0.93</span> <span class="keyword">and</span> score &gt; <span class="number">0.90</span> <span class="keyword">and</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(cos.shape)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hi 你好呀 &quot;</span>+name)</span><br><span class="line">            <span class="built_in">print</span>(np.<span class="built_in">all</span>(similarity&gt;<span class="number">0.75</span>))</span><br><span class="line">            k=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(similarity, order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">                k = k + <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(k)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cos:\n&quot;</span>+<span class="built_in">str</span>(cos)+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;similarity:\n&quot;</span>+<span class="built_in">str</span>(similarity))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">type</span>(box_info_register))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;box_info_register:\n&quot;</span>+<span class="built_in">str</span>(box_info_register)+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;box_info:\n&quot;</span>+<span class="built_in">str</span>(box_info))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;score_register: &quot;</span>+<span class="built_in">str</span>(score_register)+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;score: &quot;</span>+<span class="built_in">str</span>(score))</span><br><span class="line">        <span class="keyword">if</span> similarity &lt; <span class="number">0.93</span> <span class="keyword">and</span> score &gt; <span class="number">0.90</span> <span class="keyword">and</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未注册人脸信息 你好 陌生人&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(np.<span class="built_in">all</span>(similarity&lt;<span class="number">0.68</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">type</span>(similarity))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cos:\n&quot;</span>+<span class="built_in">str</span>(cos)+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;similarity:\n&quot;</span>+<span class="built_in">str</span>(similarity))</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0.90</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未能成功检测人脸 识别率: &quot;</span>+<span class="built_in">str</span>(score))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vgg_ssd.py">2. vgg_ssd.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;vgg_ssd&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;../../../../common&quot;</span>)</span><br><span class="line">sys.path.append(<span class="string">&quot;../&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> atlas_utils.acl_dvpp <span class="keyword">import</span> Dvpp</span><br><span class="line"><span class="keyword">from</span> atlas_utils.presenteragent <span class="keyword">import</span> presenter_datatype</span><br><span class="line"></span><br><span class="line">LABEL = <span class="number">1</span></span><br><span class="line">SCORE = <span class="number">2</span></span><br><span class="line">TOP_LEFT_X = <span class="number">3</span></span><br><span class="line">TOP_LEFT_Y = <span class="number">4</span></span><br><span class="line">BOTTOM_RIGHT_X = <span class="number">5</span></span><br><span class="line">BOTTOM_RIGHT_Y = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VggSsd</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;vggssd&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, acl_resource, model_width, model_height</span>):</span></span><br><span class="line">        self._acl_resource = acl_resource</span><br><span class="line">        self._model_width = model_width</span><br><span class="line">        self._model_height = model_height</span><br><span class="line">        <span class="comment">#Use dvpp to process images, when using opencv or PIL, </span></span><br><span class="line">        <span class="comment"># you don&#x27;t need to create a dvpp instance</span></span><br><span class="line">        self._dvpp = Dvpp(acl_resource)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._dvpp:</span><br><span class="line">            <span class="keyword">del</span> self._dvpp</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Release yolov3 resource finished&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_process</span>(<span class="params">self, image</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Use dvpp to scale the image to the required size of the model&quot;&quot;&quot;</span></span><br><span class="line">        resized_image = self._dvpp.resize(image, self._model_width,</span><br><span class="line">                                          self._model_height)</span><br><span class="line">        <span class="keyword">if</span> resized_image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Resize image failed&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#Output the scaled image and image information as inference input data</span></span><br><span class="line">        <span class="keyword">return</span> [resized_image,]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_process</span>(<span class="params">self, infer_output, origin_img</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Analyze inference output data&quot;&quot;&quot;</span></span><br><span class="line">        detection_result_list = self._analyze_inference_output(infer_output, </span><br><span class="line">                                                               origin_img)</span><br><span class="line">        <span class="comment">#Convert yuv image to jpeg image</span></span><br><span class="line">        jpeg_image = self._dvpp.jpege(origin_img)</span><br><span class="line">        <span class="keyword">return</span> jpeg_image, detection_result_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_analyze_inference_output</span>(<span class="params">self, infer_output, origin_img</span>):</span></span><br><span class="line">        <span class="comment">#vgg ssd has two outputs, the first output </span></span><br><span class="line">        <span class="comment"># infer_output[0] is the number of detected objects, and the shape is (1,8)</span></span><br><span class="line">        box_num = <span class="built_in">int</span>(infer_output[<span class="number">0</span>][<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="comment">#The second output infer_output[1] is the detected object information, the shape is (1, 200, 8)</span></span><br><span class="line">        box_info = infer_output[<span class="number">1</span>][<span class="number">0</span>]  </span><br><span class="line">        detection_result_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(box_num):</span><br><span class="line">            <span class="comment">#Detected object confidence</span></span><br><span class="line">            score = box_info[i, SCORE]</span><br><span class="line">            <span class="keyword">if</span> score &lt; <span class="number">0.9</span>:</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            </span><br><span class="line">            detection_item = presenter_datatype.ObjectDetectionResult()            </span><br><span class="line">            detection_item.confidence = score</span><br><span class="line">            <span class="comment">#Person face position frame coordinates, normalized coordinates, </span></span><br><span class="line">            <span class="comment"># need to be multiplied by the width and height of the picture to convert to the coordinates on the picture</span></span><br><span class="line">            detection_item.box.lt.x = <span class="built_in">int</span>(box_info[i, TOP_LEFT_X] * origin_img.width)</span><br><span class="line">            detection_item.box.lt.y = <span class="built_in">int</span>(box_info[i, TOP_LEFT_Y] * origin_img.height)</span><br><span class="line">            detection_item.box.rb.x = <span class="built_in">int</span>(box_info[i, BOTTOM_RIGHT_X] * origin_img.width)</span><br><span class="line">            detection_item.box.rb.y = <span class="built_in">int</span>(box_info[i, BOTTOM_RIGHT_Y] * origin_img.height)</span><br><span class="line">            <span class="comment">#Organize the confidence into a string</span></span><br><span class="line">            detection_item.result_text = <span class="built_in">str</span>(<span class="built_in">round</span>(detection_item.confidence * <span class="number">100</span>, <span class="number">2</span>)) + <span class="string">&quot;%&quot;</span></span><br><span class="line">            detection_result_list.append(detection_item)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> detection_result_list</span><br></pre></td></tr></table></figure>
<h2 id="人脸检测包含注册功能测试">人脸检测包含注册功能测试</h2>
<h3 id="a注册a参与检测">1. A注册A参与检测</h3>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201853471.png" /></p>
<h3 id="a注册b本人参与检测">2. A注册B(本人)参与检测</h3>
<ul>
<li>A</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201855455.JPG" /></p>
<ul>
<li>效果</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201859798.png" /></p>
<h3 id="无人注册">3. 无人注册</h3>
<blockquote>
<p>重复检测拍照注册</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201901380.png" /></p>
<h3 id="a注册无人参与检测">4. A注册无人参与检测</h3>
<blockquote>
<p>重复读取照片 当注册人脸出现时 打印结果语句</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112201905528.png" /></p>
<p><font color=red>相关代码以上传至本人GitHub仓库 查看对应仓库commit记录可见详细改动情况</font></p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>人脸注册</tag>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>COMS模拟集成电路期末考点</title>
    <url>/2021/12/24/COMS%E6%A8%A1%E6%8B%9F%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E6%9C%9F%E6%9C%AB%E8%80%83%E7%82%B9/</url>
    <content><![CDATA[<p>考试时间 2022-1-9</p>
<span id="more"></span>
<h2 id="chap-1">Chap 1</h2>
<h3 id="模拟电路的应用">模拟电路的应用</h3>
<blockquote>
<p>答: 信号的检测与处理 数字信号传输中的模拟设计等等</p>
</blockquote>
<h3 id="模拟设计困难的挑战原因">模拟设计困难的挑战/原因</h3>
<ul>
<li>晶体管的缺陷</li>
</ul>
<blockquote>
<p>由于尺寸的缩小，MOS晶体管的速度不断提高，但这是以器件的模拟特性为代价的</p>
</blockquote>
<ul>
<li>电源电压的降低</li>
</ul>
<blockquote>
<p>由于尺寸的缩小，CMOS电路的电源电压不得不从原来20世纪70年代的12V下降到今天的0.9V左右，许多电路结构无法适应，人们不寻求低电压下的新拓扑结构</p>
</blockquote>
<ul>
<li>功耗</li>
</ul>
<blockquote>
<p>最求低功耗的设计，并减轻对地球资源的消耗，MOS器件的尺寸缩小，对模拟电路的影响复杂很多</p>
</blockquote>
<ul>
<li>电路的复杂性</li>
</ul>
<blockquote>
<p>今天的模拟电路包含成千上万个晶体管，需要冗长而乏味的仿真</p>
</blockquote>
<ul>
<li>PVT变化</li>
</ul>
<blockquote>
<p>许多器件和电路的参数都会随着制造工艺、电源电压和环境温度而变化</p>
</blockquote>
<h2 id="chap-2">Chap 2</h2>
<h3 id="mos管的结构和工作特性"><font color=red>mos管的结构和工作特性</font></h3>
<h4 id="cmos器件结构-图2.4-nmos-pmos">cmos器件结构 图2.4 nmos pmos</h4>
<h4 id="两个主要工艺参数-栅长-l_eff-栅氧厚度-t_ox">两个主要工艺参数 栅长 <span class="math inline">\(L_{eff}\)</span> 栅氧厚度 <span class="math inline">\(t_{ox}\)</span></h4>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112242256235.png" /></p>
<h4 id="mos管的正常工作条件-nmospmos-衬底连接方式">mos管的正常工作条件 nmos/pmos 衬底连接方式</h4>
<blockquote>
<p>答: pmos衬底必须接最低点位VSS nmos衬底必须接最高点位VDD 阱中MOS管衬底常接源级S</p>
</blockquote>
<h3 id="mos大信号模型"><font color=red>mos大信号模型</font></h3>
<h4 id="截止-线性-饱和">截止 线性 饱和</h4>
<h4 id="v_ds-恒定下-v_gs-的三个区-截止亚阈值饱和"><span class="math inline">\(V_{ds}\)</span> 恒定下 <span class="math inline">\(V_{gs}\)</span> 的三个区 截止、亚阈值、饱和</h4>
<h4 id="v_gs-恒定下-v_ds-的三个区-深线性线性饱和"><span class="math inline">\(V_{gs}\)</span> 恒定下 <span class="math inline">\(V_{ds}\)</span> 的三个区 深线性、线性、饱和</h4>
<h4 id="iv曲线-对应工作条件及表达式">IV曲线 对应工作条件及表达式</h4>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 45%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>条件</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>截止区</td>
<td><span class="math inline">\(V_{gs}\)</span> &lt; <span class="math inline">\(V_{TH}\)</span></td>
<td><span class="math inline">\(I_D = 0\)</span></td>
</tr>
<tr class="even">
<td>线性区</td>
<td><span class="math inline">\(V_{gs}\)</span> &gt; <span class="math inline">\(V_{TH}\)</span> <span class="math inline">\(V_{DS}\)</span> &lt; <span class="math inline">\(V_{gs}\)</span> - <span class="math inline">\(V_{TH}\)</span></td>
<td><span class="math inline">\(I_D = \frac{\mu_nC_{ox}W}{2L}[2(V_{GS}-V_{TH})V_{DS}-V_{DS}^2]\)</span></td>
</tr>
<tr class="odd">
<td>饱和区</td>
<td><span class="math inline">\(V_{gs}\)</span> &gt; <span class="math inline">\(V_{TH}\)</span> <span class="math inline">\(V_{DS}\)</span> &gt; <span class="math inline">\(V_{gs}\)</span> - <span class="math inline">\(V_{TH}\)</span></td>
<td><span class="math inline">\(I_D=\frac{\mu_nC_{ox}W}{2L}(V_{GS}-V_{TH})^2\)</span></td>
</tr>
</tbody>
</table>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112242353410.png" /></p>
<h3 id="mos小信号模型"><font color=red>mos小信号模型</font></h3>
<h4 id="g_m-g_ds-g_mb-分别对应三个压控电流源"><span class="math inline">\(g_m\)</span> <span class="math inline">\(g_{ds}\)</span> <span class="math inline">\(g_{mb}\)</span> 分别对应三个压控电流源</h4>
<h4 id="等效电路-以及包含电容的完整模型">等效电路 以及包含电容的完整模型</h4>
<h3 id="mos二级效应"><font color=red>mos二级效应</font></h3>
<h4 id="体效应-g_mb-与-v_sb-的关系">体效应 <span class="math inline">\(g_{mb}\)</span> 与 <span class="math inline">\(V_{sb}\)</span> 的关系</h4>
<p><span class="math display">\[V_{TH}=V_{TH0}+\gamma(\sqrt{|{2\Phi_F+V_{SB}}|}-\sqrt{|{2\Phi_F}|})\]</span></p>
<h4 id="沟道长度调制效应-r_o-与-l-的关系">沟道长度调制效应 <span class="math inline">\(r_o\)</span> 与 <span class="math inline">\(L\)</span> 的关系</h4>
<p><span class="math inline">\(I_D=\frac{\mu_nC_{ox}W}{2L}{(V_{GS}-V_{TH})}^2(1+{\lambda}V_{DS})\)</span></p>
<h4 id="亚阈值导电性-范围-指数律">亚阈值导电性: 范围 指数律</h4>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112262252481.png" /></p>
<h2 id="chap-3">Chap 3</h2>
<h3 id="大信号分析"><font color=red>大信号分析</font></h3>
<h4 id="cs-r负载-二极管负载-sf-cg">CS R负载 二极管负载 、SF 、 CG</h4>
<h4 id="cascode">Cascode</h4>
<p><span class="math inline">\(A_V=-g_mR_D\)</span></p>
<p><span class="math inline">\(A_V=-g_m\cdot(r_o//R_D)\)</span></p>
<p><span class="math inline">\(g_m=\mu_nC_{ox}\frac{W}{L}(V_{GS}-V_{TH})\)</span></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112272109442.png" /></p>
<p>二极管作负载小信号等效电阻:<span class="math inline">\(R=\frac{1}{g_m+g_{mb}+g_{ds}}=\frac{1}{g_m+g_{mb}}\)</span></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112272139966.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112272141367.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112282007459.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202112282007247.png" /></p>
<h3 id="共栅-源级跟随器"><font color=red>共栅 源级跟随器</font></h3>
<h4 id="阻抗变换">阻抗变换</h4>
<h4 id="典型应用">典型应用</h4>
<h3 id="共源共栅结构"><font color=red>共源共栅结构</font></h3>
<h4 id="特点-优缺点">特点 优缺点</h4>
<h4 id="屏蔽特性">屏蔽特性</h4>
<h3 id="折衷问题">折衷问题</h3>
<h4 id="cs的r负载-cs的二极管负载">CS的R负载 、CS的二极管负载</h4>
<p><span class="math inline">\(A_v=-g_mR_D=-\sqrt{2\mu_nC_{ox}{\frac{W}{L}}I_D}R_D=-\sqrt{2\mu_nC_{ox}{\frac{W}{L}}}\frac{V_{RD}}{\sqrt{I_D}}\)</span></p>
<blockquote>
<p>增益<span class="math inline">\(A_V\)</span>与W/L、<span class="math inline">\(I_D\)</span>、<span class="math inline">\(R_D(V_{RD})\)</span>三个参数有关</p>
</blockquote>
<ul>
<li>若保持<span class="math inline">\(I_D\)</span>、<span class="math inline">\(R_D\)</span>为常数,W/L<span class="math inline">\(\uparrow\)</span>,<span class="math inline">\(A_V\uparrow\)</span>,但是MOS管寄生电容<span class="math inline">\(\uparrow\)</span>,高频响应(放大器的<span class="math inline">\(f_{3dB}\downarrow\)</span>)变差</li>
<li>若保持<span class="math inline">\(I_D\)</span>、W/L为常数,<span class="math inline">\(R_D\uparrow\)</span>,<span class="math inline">\(A_V\uparrow\)</span>,这意味着<span class="math inline">\(V_{DS}\downarrow\)</span>,放大器静态工作点下移，输出电压摆幅<span class="math inline">\(\downarrow\)</span></li>
<li>若保持W/L、<span class="math inline">\(V_{RD}\)</span>不变,<span class="math inline">\(I_D\downarrow\)</span>,<span class="math inline">\(A_V\uparrow\)</span>,这意味着<span class="math inline">\(R_D\uparrow\)</span>,版图面积<span class="math inline">\(\uparrow\)</span>,电阻噪声<span class="math inline">\(\uparrow\)</span>,放大器速度<span class="math inline">\(\downarrow\)</span>(输出节点时间常数RC<span class="math inline">\(\uparrow\)</span>),沟道调制效应的影响<span class="math inline">\(\uparrow\)</span>(<span class="math inline">\(r_o\)</span>与<span class="math inline">\(R_D\)</span>更接近)</li>
</ul>
<h3 id="画小信号等效电路"><font color=red>画小信号等效电路</font></h3>
<h4 id="共源-源极负反馈-cascode-等">共源 源极负反馈 Cascode 等</h4>
<table>
<colgroup>
<col style="width: 8%" />
<col style="width: 25%" />
<col style="width: 21%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr class="header">
<th><em>记忆</em></th>
<th>输入电阻</th>
<th>输出电阻</th>
<th>增益</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CS二级管负载</td>
<td></td>
<td><span class="math inline">\(\frac{1}{g_m+g_{mb}}\)</span></td>
<td><span class="math inline">\({\lambda=0:}-\sqrt{\frac{(W/L)_1}{(W/L)_2}}\frac{1}{1+\eta}\)</span>(N二极管) ; <span class="math inline">\(-\sqrt{\frac{\mu_n(W/L)_1}{\mu_p(W/L)_2}}\)</span>(P二极管)</td>
</tr>
<tr class="even">
<td>CS电流源负载</td>
<td></td>
<td></td>
<td>假定<span class="math inline">\(r_{o2}\)</span>相当大, <span class="math inline">\(A_v=-g_mr_{o1}\)</span> 正比于<span class="math inline">\(\sqrt{\frac{W\cdot{L}}{I_D}}\)</span></td>
</tr>
<tr class="odd">
<td>CS源级负反馈</td>
<td></td>
<td><span class="math inline">\([1+(g_m+g_{mb})r_o]R_S+r_o\)</span></td>
<td><span class="math inline">\(A_v=-\frac{g_mr_o}{R_S+[1+(g_m+g_{mb})R_S]r_o}(R_D||R_{OUT})\)</span></td>
</tr>
<tr class="even">
<td>SF</td>
<td></td>
<td><span class="math inline">\(\frac{1}{g_m+g_{mb}}\)</span></td>
<td><span class="math inline">\(A_v=\frac{g_mR_S}{1+(g_m+g_{mb})R_S}&lt;1\)</span></td>
</tr>
<tr class="odd">
<td>CG</td>
<td><span class="math inline">\(\frac{R_D+r_o}{1+(g_m+g_{mb})r_o}\)</span></td>
<td><span class="math inline">\(r_o[1+(g_m+g_{mb})R_s]\)</span></td>
<td>见下图</td>
</tr>
<tr class="even">
<td>Cascade</td>
<td></td>
<td><span class="math inline">\(r_{o1}r_{o2}(g_{m2}+g_{mb2})\)</span></td>
<td><span class="math inline">\(-g_{m1}R_D\)</span></td>
</tr>
</tbody>
</table>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201052245106.png" /></p>
<h3 id="计算题小信号等效电路法-观察法">计算题(小信号等效电路法 观察法)</h3>
<h4 id="av-cs放大器-二极管连接-电流源-恒流源负载">Av CS放大器 二极管连接 电流源 恒流源负载</h4>
<h4 id="r_in-r_out"><span class="math inline">\(R_{in}\)</span> <span class="math inline">\(R_{out}\)</span></h4>
<h4 id="g_m-摆幅"><span class="math inline">\(G_{m}\)</span> 摆幅</h4>
<h3 id="例题-3.3-3.5">例题 3.3 3.5</h3>
<h3 id="习题-3.17a-3.20a-b-3.21a-b">习题 3.17(a) 、3.20(a) (b) 、3.21(a) (b)</h3>
<h2 id="chap-4">Chap 4</h2>
<h3 id="差动特性-优缺点"><font color=red>差动特性 优缺点</font></h3>
<h3 id="差模"><font color=red>差模</font></h3>
<h4 id="打信号分析-图4.7">打信号分析 图4.7</h4>
<h4 id="最大差模输入输出电压范围">最大差模输入输出电压范围</h4>
<h3 id="共模特性"><font color=red>共模特性</font></h3>
<h4 id="共模偏置范围">共模偏置范围</h4>
<h4 id="共模响应-例4.6">共模响应 例4.6</h4>
<h3 id="共模抑制比"><font color=red>共模抑制比</font></h3>
<h4 id="概念">概念</h4>
<h4 id="cmtodm产生的来源电路不对称尾电流等">CM<span class="math inline">\(\to\)</span>DM产生的来源(电路不对称、尾电流等)</h4>
<h3 id="计算题">计算题</h3>
<h4 id="差模增益">差模增益</h4>
<h4 id="a_dm-半边电路法"><span class="math inline">\(A_{dm}\)</span> 半边电路法</h4>
<h4 id="r_in-r_out-1"><span class="math inline">\(R_{in}\)</span> <span class="math inline">\(R_{out}\)</span></h4>
<h4 id="共模增益">共模增益</h4>
<h4 id="a_cm-公式4.28"><span class="math inline">\(A_{cm}\)</span> 公式4.28</h4>
<h2 id="chap-5">Chap 5</h2>
<h3 id="电流镜概念及稳定性评价-ptv"><font color=red>电流镜概念及稳定性评价 PTV</font></h3>
<h3 id="无源电流镜"><font color=red>无源电流镜</font></h3>
<h4 id="基本电流镜-实现方法-缺点-图5.5">基本电流镜 实现方法 缺点 图5.5</h4>
<h4 id="案例-例5.15.2-图5.7">案例 例5.1、5.2 图5.7</h4>
<h4 id="cascode-电流镜-实现方法及缺点-图5.9-5.11">Cascode 电流镜 实现方法及缺点 图5.9 5.11</h4>
<h3 id="有源负载差分对">有源负载差分对</h3>
<h4 id="双端转单端">双端转单端</h4>
<h4 id="小信号模型增益">小信号模型增益</h4>
<h4 id="共模特性-1">共模特性</h4>
<h2 id="chap-6">Chap 6</h2>
<h3 id="传输函数-零极点-带宽关系"><font color=red>传输函数 零极点 带宽关系</font></h3>
<h3 id="bode-plot-画法-幅频特性-相频特性"><font color=red>Bode Plot 画法 幅频特性 相频特性</font></h3>
<h3 id="密勒定理-效应-密勒电容名次解释"><font color=red>密勒定理 /效应 密勒电容(名次解释)</font></h3>
<h3 id="节点极点相关联"><font color=red>节点极点相关联</font></h3>
<h3 id="基本组态放大器带宽比较"><font color=red>基本组态放大器带宽比较</font></h3>
<h3 id="计算传输函数">计算传输函数</h3>
<h4 id="方法一-密勒等效-节极关联-零点简化">方法一: 密勒等效 + 节极关联 + 零点简化</h4>
<h4 id="方法二-等效电路法">方法二: 等效电路法</h4>
<h4 id="电路案列-cs-图6.10-cg-图6.23">电路案列 CS 图6.10 Cg 图6.23</h4>
<h2 id="chap-9">Chap 9</h2>
<h3 id="常见运放性能参数"><font color=red>常见运放性能参数</font></h3>
<h3 id="理解提高运放原理和方法">理解提高运放原理和方法</h3>
<h3 id="理解不同运放结构在增益带宽速度功耗的特点">理解不同运放结构在增益、带宽、速度、功耗的特点</h3>
<h3 id="两级放大器-最大增益-最大摆幅"><font color=red>两级放大器 最大增益 最大摆幅</font></h3>
<h3 id="理解共模反馈的概念-进行共模反馈的三个步骤"><font color=red>理解共模反馈的概念 进行共模反馈的三个步骤</font>&gt;</h3>
<h3 id="理解运放的转换速率"><font color=red>理解运放的转换速率</font></h3>
<h3 id="理解psrr的意义"><font color=red>理解PSRR的意义</font></h3>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>专业课</category>
      </categories>
      <tags>
        <tag>期末破防</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令回顾</title>
    <url>/2021/10/24/Docker%E5%91%BD%E4%BB%A4%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p>Docker 命令备忘录 (初阶)</p>
<span id="more"></span>
<h2 id="设置docker自启动">设置docker自启动</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<h2 id="docker的启动停止重启">docker的启动、停止、重启</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure>
<h2 id="指定-docker-镜像源">指定 Docker 镜像源</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h2 id="阿里云镜像加速">阿里云镜像加速</h2>
<ol type="1">
<li>登录阿里云服务器，找到<code>容器镜像服务</code></li>
<li>设置Registry登录密码</li>
<li>找到镜像加速器</li>
<li>配置使用</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://pi9dpp60.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="docker-镜像">docker 镜像</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line">docker rmi -f xxxxxx</span><br></pre></td></tr></table></figure>
<h2 id="docker-拉取服务镜像">docker 拉取服务镜像</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker push</span><br></pre></td></tr></table></figure>
<h2 id="docker-创建一个容器">docker 创建一个容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]  </span><br><span class="line"> </span><br><span class="line">  -d, --detach=false         指定容器运行于前台还是后台，默认为false   </span><br><span class="line">  -i, --interactive=false   打开STDIN，用于控制台交互  </span><br><span class="line">  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false  </span><br><span class="line">  -u, --user=&quot;&quot;              指定容器的用户  </span><br><span class="line">  -a, --attach=[]            标准输入输出流和错误信息（必须是以非docker run -d启动的容器）</span><br><span class="line">  -w, --workdir=&quot;&quot;           指定容器的工作目录 </span><br><span class="line">  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用  </span><br><span class="line">  -e, --env=[]               指定环境变量，容器中可以使用该环境变量  </span><br><span class="line">  -m, --memory=&quot;&quot;            指定容器的内存上限  </span><br><span class="line">  -P, --publish-all=false    指定容器暴露的端口  </span><br><span class="line">  -p, --publish=[]           指定容器暴露的端口 </span><br><span class="line">  -h, --hostname=&quot;&quot;          指定容器的主机名  </span><br><span class="line">  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class="line">  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cidfile=&quot;&quot;               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class="line">  --cpuset=&quot;&quot;                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class="line">  --device=[]                添加主机设备给容器，相当于设备直通  </span><br><span class="line">  --dns=[]                   指定容器的dns服务器  </span><br><span class="line">  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class="line">  --entrypoint=&quot;&quot;            覆盖image的入口点  </span><br><span class="line">  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class="line">  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class="line">  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class="line">  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class="line">  --name=&quot;&quot;                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class="line">  --net=&quot;bridge&quot;             容器网络设置:</span><br><span class="line">                                bridge 使用docker daemon指定的网桥     </span><br><span class="line">                                host     //容器使用主机的网络  </span><br><span class="line">                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class="line">                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class="line">  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class="line">  --restart=&quot;no&quot;             指定容器停止后的重启策略:</span><br><span class="line">                                no：容器退出时不重启  </span><br><span class="line">                                on-failure：容器故障退出（返回值非零）时重启 </span><br><span class="line">                                always：容器退出时总是重启  </span><br><span class="line">  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class="line">  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理 </span><br></pre></td></tr></table></figure>
<p><strong>eg.</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# docker run -p 8090:8080 -p 50000:50000 --restart always --link Redis:redis --name jenkins -v /home/jenkins:/home/jenkins_home --privileged=true dokcer.io/jenkins/jenkins</span><br></pre></td></tr></table></figure>
<h2 id="查看-docker-容器">查看 docker 容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<h2 id="启动停止重启删除docker容器">启动、停止、重启、删除docker容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start xxxxxx</span><br><span class="line"></span><br><span class="line">docker stop xxxxxx</span><br><span class="line"></span><br><span class="line">docker restart xxxxxx</span><br><span class="line"></span><br><span class="line">docker rm xxxxxx</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -a- q)</span><br><span class="line">-a 查看全部的容器，包括没有运行的</span><br><span class="line">-q 之查看容器的标识</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像-元数据">查看镜像 元数据</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
<h2 id="进入docker容器">进入docker容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it xxxxxx</span><br></pre></td></tr></table></figure>
<ul>
<li><p>ctrl+d 退出容器且关闭</p></li>
<li><p>ctrl+p+q 退出容器但不关闭</p></li>
</ul>
<h2 id="查看容器日志">查看容器日志</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 行数 容器名</span><br></pre></td></tr></table></figure>
<h2 id="docker-网络操作">docker 网络操作</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create mynet</span><br><span class="line"></span><br><span class="line">docker network inspect mynet</span><br><span class="line"></span><br><span class="line">docker network disconnet mynet 容器ID</span><br><span class="line"></span><br><span class="line">docker network rm mynet</span><br></pre></td></tr></table></figure>
<h2 id="docker-拷贝操作">docker 拷贝操作</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.文件从宿主机拷贝到容器:    docker cp 宿主机文件路径   容器名:存放路径</span></span><br><span class="line">docker cp /home/jenkins/test.txt jenkins:/var/jenkins_home</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.文件从容器拷贝到宿主机   docker cp 容器名:要拷贝的文件路径  宿主机存放路径</span>  </span><br><span class="line">docker cp jenkins:/var/jenkins_home/test.txt /home/jenkins</span><br></pre></td></tr></table></figure>
<h2 id="docker-数据卷">docker 数据卷</h2>
<h3 id="创建数据卷">创建数据卷</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷的名称</span><br></pre></td></tr></table></figure>
<h3 id="查看数据卷详情">查看数据卷详情</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>
<h3 id="查看全部数据卷">查看全部数据卷</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
<h3 id="删除数据卷">删除数据卷</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷的名称</span><br></pre></td></tr></table></figure>
<h3 id="数据卷映射">数据卷映射</h3>
<ul>
<li>直接使用命令挂载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录：容器目录</span><br><span class="line"> </span><br><span class="line">[root@iZ2zeg4ytp0whqtmxbsqiiZ home]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br></pre></td></tr></table></figure>
<ul>
<li>匿名 具名挂载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过数据卷名称进行映射 ,使用名称进行映射时，我们需要先来创建出数据卷，才能使用名称进行映射。回讲容器内部自带的文件，复制到默认的存放路径中</span></span><br><span class="line">docker run -d -p 宿主机端口号:容器端口号 -v 数据卷名称:容器内部路径 --name 自定义容器名称 镜像的id # -P 随机指定端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">通过路径进行映射，直接指定一个路径作为数据卷的存放地址，这个路径下是空的。</span></span><br><span class="line">docker run -d -p 宿主机端口号：容器端口号 -v 宿主机路径:容器内部路径 --name 自定义容器名称 镜像的id # -P 随机指定端口</span><br></pre></td></tr></table></figure>
<h2 id="dockerfile-自定义镜像">dockerfile 自定义镜像</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">from: 指定当前自定义镜像的依赖环境</span><br><span class="line">copy: 将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir: 声明镜像的默认工作目录</span><br><span class="line">run:执行的命令，可以编写多个</span><br><span class="line">cmd:需要执行的命令（再workdir下执行，cmd可以写多个，只以最后一个为准）</span><br><span class="line"><span class="meta">#</span><span class="bash">举例</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy springboot.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure>
<p><strong>eg.</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 编写Dockerfile的文件</span></span><br><span class="line">[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER xiaofan&lt;594042358@qq.com&gt;</span><br><span class="line"> </span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH     # 镜像的工作目录</span><br><span class="line"> </span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"> </span><br><span class="line">EXPOSE 80</span><br><span class="line"> </span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span></span><br><span class="line"> </span><br><span class="line">[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line"> </span><br><span class="line">Successfully built d2d9f0ea8cb2</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CMD 和ENTRYPOINT区别</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD         # 指定这个容器启动的时候要运行的命令，只有最后一个会生效可被替代</span><br><span class="line">ENTRYPOINT      # 指定这个容器启动的时候要运行的命令， 可以追加命令</span><br></pre></td></tr></table></figure>
<h3 id="制作镜像">制作镜像</h3>
<p>编写完成Dockerfile后需要通过命令将其制作成为镜像，并且要在Dockerfile的当前目录下执行该命令，之后就以可以使用docker images 查看自己制作好的镜像。注意最后有一个.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名称[:tag] .</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>容器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate</title>
    <url>/2021/11/04/Hibernate/</url>
    <content><![CDATA[<p>无限期延后 因为 Criteria 不下心进坑了</p>
<span id="more"></span>
<h2 id="hibernate-入门">Hibernate 入门</h2>
<blockquote>
<p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任</p>
</blockquote>
<h3 id="第一个hibernate应用程序">第一个Hibernate应用程序</h3>
<h4 id="创建一个简单的javabean类">创建一个简单的javaBean类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">+lib</span><br><span class="line">  &lt;Hibernate and third-party libraries&gt;</span><br><span class="line">+src</span><br><span class="line">  +events</span><br><span class="line">    Event.java</span><br></pre></td></tr></table></figure>
<h4 id="添加映射文件">添加映射文件</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;events.Event&quot;</span> <span class="attr">table</span>=<span class="string">&quot;EVENTS&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;EVENT_ID&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;timestamp&quot;</span> <span class="attr">column</span>=<span class="string">&quot;EVENT_DATE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">+lib</span><br><span class="line">  &lt;Hibernate and third-party libraries&gt;</span><br><span class="line">+src</span><br><span class="line"> +events</span><br><span class="line">  Event.java</span><br><span class="line">  Event.hbm.xml</span><br></pre></td></tr></table></figure>
<h4 id="hibernate配置">Hibernate配置</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Database connection settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.driver_class&quot;</span>&gt;</span>org.hsqldb.jdbcDriver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.url&quot;</span>&gt;</span>jdbc:hsqldb:hsql://localhost<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.username&quot;</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JDBC connection pool (use the built-in) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.pool_size&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SQL dialect --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span>&gt;</span>org.hibernate.dialect.HSQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Enable Hibernate&#x27;s automatic session context management --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;current_session_context_class&quot;</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Disable the second-level cache  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cache.provider_class&quot;</span>&gt;</span>org.hibernate.cache.NoCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Echo all executed SQL to stdout --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Drop and re-create the database schema on startup --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hbm2ddl.auto&quot;</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;events/Event.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最开始的4个<code>property</code>元素包含必要的JDBC连接信息。方言（dialect）的<code>property</code>元素指明Hibernate 生成的特定SQL变量。你很快会看到，Hibernate对持久化上下文的自动session管理就会派上用场。 打开<code>hbm2ddl.auto</code>选项将自动生成数据库模式（schema）－ 直接加入数据库中。当然这个选项也可以被关闭（通过去除这个配置选项）或者通过Ant任务<code>SchemaExport</code>的帮助来把数据库schema重定向到文件中。最后，在配置中为持久化类加入映射文件</p>
<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">+lib</span><br><span class="line">  &lt;Hibernate and third-party libraries&gt;</span><br><span class="line">+src</span><br><span class="line">  +events</span><br><span class="line">    Event.java</span><br><span class="line">    Event.hbm.xml</span><br><span class="line">  hibernate.cfg.xml</span><br><span class="line">+data</span><br><span class="line">build.xml</span><br></pre></td></tr></table></figure>
<h4 id="启动和辅助类">启动和辅助类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.*;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create the SessionFactory from hibernate.cfg.xml</span></span><br><span class="line">            sessionFactory = <span class="keyword">new</span> Configuration().configure().buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// Make sure you log the exception, as it might be swallowed</span></span><br><span class="line">            System.err.println(<span class="string">&quot;Initial SessionFactory creation failed.&quot;</span> + ex);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">+lib</span><br><span class="line">  &lt;Hibernate and third-party libraries&gt;</span><br><span class="line">+src</span><br><span class="line">  +events</span><br><span class="line">    Event.java</span><br><span class="line">    Event.hbm.xml</span><br><span class="line">  +util</span><br><span class="line">    HibernateUtil.java</span><br><span class="line">  hibernate.cfg.xml</span><br><span class="line">+data</span><br><span class="line">build.xml</span><br></pre></td></tr></table></figure>
<h4 id="加载并存储对象">加载并存储对象</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> events;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> util.HibernateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventManager mgr = <span class="keyword">new</span> EventManager();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;store&quot;</span>)) &#123;</span><br><span class="line">            mgr.createAndStoreEvent(<span class="string">&quot;My Event&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HibernateUtil.getSessionFactory().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAndStoreEvent</span><span class="params">(String title, Date theDate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Session session = HibernateUtil.getSessionFactory().getCurrentSession();</span><br><span class="line"></span><br><span class="line">        session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Event theEvent = <span class="keyword">new</span> Event();</span><br><span class="line">        theEvent.setTitle(title);</span><br><span class="line">        theEvent.setDate(theDate);</span><br><span class="line"></span><br><span class="line">        session.save(theEvent);</span><br><span class="line"></span><br><span class="line">        session.getTransaction().commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关联映射">关联映射</h3>
<h4 id="映射person类">映射Person类</h4>
<p>最初简单的<code>Person</code>类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package events;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line">    private int age;</span><br><span class="line">    private String firstname;</span><br><span class="line">    private String lastname;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // Accessor methods for all properties, private setter for &#x27;id&#x27;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个名为<code>Person.hbm.xml</code>的新映射文件（别忘了最上面的DTD引用）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;class name=&quot;events.Person&quot; table=&quot;PERSON&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot; column=&quot;PERSON_ID&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;/&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;firstname&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;lastname&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line"></span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>最后，把新的映射加入到Hibernate的配置中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mapping resource=&quot;events/Event.hbm.xml&quot;/&gt;</span><br><span class="line">&lt;mapping resource=&quot;events/Person.hbm.xml&quot;/&gt;</span><br></pre></td></tr></table></figure>
<p>现在我们在这两个实体之间创建一个关联。显然，persons可以参与一系列events，而events也有不同的参加者（persons）。我们需要处理的设计问题是关联方向（directionality），阶数（multiplicity）和集合（collection）的行为</p>
<h4 id="单向set-based的关联">单向Set-based的关联</h4>
<p>我们将向<code>Person</code>类增加一连串的events。那样，通过调用<code>aPerson.getEvents()</code>，就可以轻松地导航到特定person所参与的events，而不用去执行一个显式的查询。我们使用Java的集合类（collection）：<code>Set</code>，因为set 不包含重复的元素及与我们无关的排序。</p>
<p>我们需要用set 实现一个单向多值关联。让我们在Java类里为这个关联编码，接着映射它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set events = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set <span class="title">getEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEvents</span><span class="params">(Set events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.events = events;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在映射这个关联之前，先考虑一下此关联的另外一端。很显然，我们可以保持这个关联是单向的。或者，我们可以在<code>Event</code>里创建另外一个集合，如果希望能够双向地导航，如：<code>anEvent.getParticipants()</code>。从功能的角度来说，这并不是必须的。因为你总可以显式地执行一个查询，以获得某个特定event的所有参与者。这是个在设计时需要做出的选择，完全由你来决定，但此讨论中关于关联的阶数是清楚的：即两端都是“多”值的，我们把它叫做<em>多对多(many-to-many)</em>关联。因而，我们使用Hibernate的多对多映射：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;events.Person&quot;</span> <span class="attr">table</span>=<span class="string">&quot;PERSON&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;PERSON_ID&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;events&quot;</span> <span class="attr">table</span>=<span class="string">&quot;PERSON_EVENT&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;PERSON_ID&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">column</span>=<span class="string">&quot;EVENT_ID&quot;</span> <span class="attr">class</span>=<span class="string">&quot;events.Event&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Hibernate支持各种各样的集合映射，<code>&lt;set&gt;</code>使用的最为普遍。对于多对多关联（或叫<em>n:m</em>实体关系）, 需要一个关联表（association table）。<code>表</code>里面的每一行代表从person到event的一个关联。表名是由<code>set</code>元素的<code>table</code>属性配置的。关联里面的标识符字段名，对于person的一端，是由<code>&lt;key&gt;</code>元素定义，而event一端的字段名是由<code>&lt;many-to-many&gt;</code>元素的<code>column</code>属性定义。你也必须告诉Hibernate集合中对象的类（也就是位于这个集合所代表的关联另外一端的类）。</p>
<p>因而这个映射的数据库schema是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> _____________        __________________</span><br><span class="line">|             |      |                  |       _____________</span><br><span class="line">|   EVENTS    |      |   PERSON_EVENT   |      |             |</span><br><span class="line">|_____________|      |__________________|      |    PERSON   |</span><br><span class="line">|             |      |                  |      |_____________|</span><br><span class="line">| *EVENT_ID   | &lt;--&gt; | *EVENT_ID        |      |             |</span><br><span class="line">|  EVENT_DATE |      | *PERSON_ID       | &lt;--&gt; | *PERSON_ID  |</span><br><span class="line">|  TITLE      |      |__________________|      |  AGE        |</span><br><span class="line">|_____________|                                |  FIRSTNAME  |</span><br><span class="line">                                               |  LASTNAME   |</span><br><span class="line">                                               |_____________|</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h4 id="使关联工作">使关联工作</h4>
<p>我们把一些people和events 一起放到<code>EventManager</code>的新方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPersonToEvent</span><span class="params">(Long personId, Long eventId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Session session = HibernateUtil.getSessionFactory().getCurrentSession();</span><br><span class="line">    session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Person aPerson = (Person) session.load(Person.class, personId);</span><br><span class="line">    Event anEvent = (Event) session.load(Event.class, eventId);</span><br><span class="line"></span><br><span class="line">    aPerson.getEvents().add(anEvent);</span><br><span class="line"></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在加载一<code>Person</code>和<code>Event</code>后，使用普通的集合方法就可容易地修改我们定义的集合。如你所见，没有显式的<code>update()</code>或<code>save()</code>，Hibernate会自动检测到集合已经被修改并需要更新回数据库。这叫做自动脏检查（<em>automatic dirty checking</em>），你也可以尝试修改任何对象的name或者date属性，只要他们处于<em>持久化</em>状态，也就是被绑定到某个Hibernate 的<code>Session</code>上（如：他们刚刚在一个单元操作被加载或者保存），Hibernate监视任何改变并在后台隐式写的方式执行SQL。同步内存状态和数据库的过程，通常只在单元操作结束的时候发生，称此过程为清理缓存<em>（flushing）</em>。在我们的代码中，工作单元由数据库事务的提交（或者回滚）来结束——这是由<code>CurrentSessionContext</code>类的<code>thread</code>配置选项定义的。</p>
<p>当然，你也可以在不同的单元操作里面加载person和event。或在<code>Session</code>以外修改不是处在持久化（persistent）状态下的对象（如果该对象以前曾经被持久化，那么我们称这个状态为<em>脱管（detached）</em>）。你甚至可以在一个集合被脱管时修改它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPersonToEvent</span><span class="params">(Long personId, Long eventId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Session session = HibernateUtil.getSessionFactory().getCurrentSession();</span><br><span class="line">    session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Person aPerson = (Person) session</span><br><span class="line">            .createQuery(<span class="string">&quot;select p from Person p left join fetch p.events where p.id = :pid&quot;</span>)</span><br><span class="line">            .setParameter(<span class="string">&quot;pid&quot;</span>, personId)</span><br><span class="line">            .uniqueResult(); <span class="comment">// Eager fetch the collection so we can use it detached</span></span><br><span class="line"></span><br><span class="line">    Event anEvent = (Event) session.load(Event.class, eventId);</span><br><span class="line"></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End of first unit of work</span></span><br><span class="line"></span><br><span class="line">    aPerson.getEvents().add(anEvent); <span class="comment">// aPerson (and its collection) is detached</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Begin second unit of work</span></span><br><span class="line"></span><br><span class="line">    Session session2 = HibernateUtil.getSessionFactory().getCurrentSession();</span><br><span class="line">    session2.beginTransaction();</span><br><span class="line"></span><br><span class="line">    session2.update(aPerson); <span class="comment">// Reattachment of aPerson</span></span><br><span class="line"></span><br><span class="line">    session2.getTransaction().commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对<code>update</code>的调用使一个脱管对象重新持久化，你可以说它被绑定到一个新的单元操作上，所以在脱管状态下对它所做的任何修改都会被保存到数据库里。这也包括你对这个实体对象的集合所作的任何改动（增加/删除）。</p>
<p>这对我们当前的情形不是很有用，但它是非常重要的概念，你可以把它融入到你自己的应用程序设计中。在<code>EventManager</code>的main方法中添加一个新的动作，并从命令行运行它来完成我们所做的练习。如果你需要person及event的标识符 — 那就用<code>save()</code>方法返回它（你可能需要修改前面的一些方法来返回那个标识符）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;addpersontoevent&quot;</span>)) &#123;</span><br><span class="line">    Long eventId = mgr.createAndStoreEvent(<span class="string">&quot;My Event&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    Long personId = mgr.createAndStorePerson(<span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">    mgr.addPersonToEvent(personId, eventId);</span><br><span class="line">    System.out.println(<span class="string">&quot;Added person &quot;</span> + personId + <span class="string">&quot; to event &quot;</span> + eventId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是个关于两个同等重要的实体类间关联的例子。像前面所提到的那样，在特定的模型中也存在其它的类和类型，这些类和类型通常是“次要的”。你已看到过其中的一些，像<code>int</code>或<code>String</code>。我们称这些类为<em>值类型（value type）</em>，它们的实例<em>依赖（depend）</em>在某个特定的实体上。这些类型的实例没有它们自己的标识（identity），也不能在实体间被共享（比如，两个person不能引用同一个<code>firstname</code>对象，即使他们有相同的first name）。当然，值类型并不仅仅在JDK中存在（事实上，在一个Hibernate应用程序中，所有的JDK类都被视为值类型），而且你也可以编写你自己的依赖类，例如<code>Address</code>，<code>MonetaryAmount</code>。</p>
<p>你也可以设计一个值类型的集合，这在概念上与引用其它实体的集合有很大的不同，但是在Java里面看起来几乎是一样的。</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM笔记</title>
    <url>/2021/10/24/JVM%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>JVM 初探小笔记</p>
<span id="more"></span>
<h1 id="jvm-探究">JVM 探究</h1>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110251637935.png" /></p>
<ul>
<li>对 JVM 的理解 java8虚拟机和之前的变化更新?</li>
<li>什么是OOM，什么是栈溢出 StackOverflowError? 怎么分析？</li>
<li>JVM的常用调优参数有哪些？</li>
<li>内存快照如何抓取，怎么分析Dump文件？</li>
<li>谈谈对JVM中，类加载器你的认识？</li>
</ul>
<h3 id="jvm的位置">1.JVM的位置</h3>
<p>操作系统之上 -&gt; 操作系统的代理</p>
<h3 id="jvm的体系结构">2.JVM的体系结构</h3>
<p>Class File -&gt; Class Loader -&gt; Runtime Data Area(Method Area &amp; Stack &amp; Native Method Stack &amp; Heap &amp; program counter) &lt;-&gt; 执行引擎 &lt;-&gt; 本地方法接口 &lt;- 本地方法库</p>
<h3 id="类加载器">3.类加载器</h3>
<p>作用：加载 Class 文件 -&gt;</p>
<p>1.虚拟机自带的加载器</p>
<p>2.启动类(根)加载器</p>
<p>3.扩展类加载器</p>
<p>4.应用程序加载器</p>
<h3 id="双亲委任机制">4.双亲委任机制</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       1.类加载器收到类加载的请求</span></span><br><span class="line"><span class="comment">       2.将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</span></span><br><span class="line"><span class="comment">       3.启动类加载器检查是否能够加载当前这个类，能加载就结束，使用当前的加载器，否则就抛出异常，通知子加载器进行加载</span></span><br><span class="line"><span class="comment">       4.重复 3 过程</span></span><br><span class="line"><span class="comment">       Class not Found ~  </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="沙箱安全机制">5.沙箱安全机制</h3>
<p><strong>组成沙箱的基本组件:</strong></p>
<ul>
<li>字节码校验器(bytecode verifier) :确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li>
</ul>
<hr />
<ul>
<li>类裝载器(class loader) :其中类装载器在3个方面对Java沙箱起作用 它防止恶意代码去干涉善意的代码; 它守护了被信任的类库边界;</li>
</ul>
<hr />
<ul>
<li>它将代码归入保护域,确定了代码可以进行哪些操作。 虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。 类装载器采用的机制是双亲委派模式。
<ul>
<li>1.从最内层JVM自带类加载器开始加载,外层恶意同名类得不到加载从而无法使用;</li>
<li>2.由于严格通过包来区分了访问域,外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li>
</ul></li>
</ul>
<hr />
<ul>
<li>存取控制器(access controller) :存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定,可以由用户指定。</li>
</ul>
<hr />
<ul>
<li>安全管理器(security manager) : 是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li>
</ul>
<hr />
<ul>
<li>安全软件包(security package) : java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括:
<ul>
<li>安全提供者</li>
<li>消息摘要</li>
<li>数字签名</li>
<li>加密</li>
<li>鉴别 ###6.Native</li>
</ul></li>
</ul>
<p>native:凡是带了native关键字的，说明java的作用范围达不到了，<strong>回去调用底层C语言的库</strong> -&gt; 会进入 <strong>本地方法栈</strong> 调用本地方法接口 <strong>JNI(Java Native Interface)</strong> JNI作用：开拓Java的使用，融合C &amp; C++ 它在内存中开辟了一块标记区域：Native Method Stack,登记native方法 在最终执行的时候，加载本地方法库中的方法通过JNI</p>
<h3 id="pc寄存器">7.PC寄存器</h3>
<p>程序计数器(Program Counter Register):每个线程都有一个程序计数器，是线程私有的，就是一个指针, 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计</p>
<h3 id="方法区">8.方法区</h3>
<p>保存在着被加载过的每一个类的信息；这些信息由类加载器在加载类的时候，从类的源文件中抽取出来；static变量信息也保存在方法区中；</p>
<p>可以看做是将类（Class）的元数据，保存在方法区里；</p>
<p>方法区是线程共享的；当有多个线程都用到一个类的时候，而这个类还未被加载，则应该只有一个线程去加载类，让其他线程等待；</p>
<p>方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。jvm也可以允许用户和程序指定方法区的初始大小，最小和最大限制；</p>
<p>方法区同样存在垃圾收集，因为通过用户定义的类加载器可以动态扩展Java程序，这样可能会导致一些类，不再被使用，变为垃圾。这时候需要进行垃圾清理</p>
<h3 id="栈">9.栈</h3>
<h3 id="三种jvm">10.三种JVM</h3>
<ul>
<li>Sun公司HotSpot Java Hotspot™ 64-Bit Server VM (build 25.181-b13,mixed mode)</li>
<li>BEA JRockit</li>
<li>IBM J9VM</li>
</ul>
<p>我们学习都是: Hotspot</p>
<h3 id="堆">11.堆</h3>
<p>Heap 堆内存的大小是可以调节的</p>
<p>类加载器读取了文件后，一般会把什么放在堆中? -&gt; 类、方法、常量、变量~ 保存我们所有引用类型的真实对象；堆内存中还要细分为三个区：</p>
<ul>
<li>新生区</li>
<li>养老区</li>
<li>永久区</li>
</ul>
<p>###12.新生区、养老区</p>
<p><strong>新生区</strong></p>
<ul>
<li>类：诞生 和成长的地方，甚至死亡；</li>
<li>伊甸园 所有的对象都是在伊甸园区new出来的</li>
<li>幸存者区(0,1)</li>
</ul>
<p><strong>养老区</strong> 新生区存活下来的</p>
<h3 id="永久区">13.永久区</h3>
<p>这个区域常驻内存，用来存放JDK自身携带的Class对象，Interface元数据，存储的是java运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭JVM虚拟就会释放这个区域的内存</p>
<ul>
<li>jdk1.6之前：永久代，常量池在方法区</li>
<li>jdk1.7 ：永久代，去永久代 ，常量池在堆中</li>
<li>jdk1.8之后：无永久代，常量池在元空间</li>
</ul>
<h3 id="堆内存调优">14.堆内存调优</h3>
<h3 id="gc">15.GC</h3>
<p>JVM在进行GC时，并不是对这三个区统一回收,大部分时候，回收都是新生代</p>
<ul>
<li>新生代</li>
<li>幸存区</li>
<li>老年区</li>
</ul>
<p>GC两种类: 轻GC(普通GC)、重GC(全局GC)</p>
<p>GC题目：</p>
<ul>
<li>JVM的内存模型和分区 -&gt; 详细到每个分区放什么</li>
<li>堆里面的分区有哪些？Eden, form , to , 老年区，有什么特点</li>
<li>GC的算法有哪些？标记清除法，标记压缩，复制算法，引用计数器，怎么用</li>
<li>轻GC和重GC分别在什么时候发生</li>
</ul>
<p>引用计数法：</p>
<p>常用算法</p>
<h3 id="jmm">16.JMM</h3>
<h3 id="总结">17.总结</h3>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Jasmin</title>
    <url>/2021/10/03/Jasmin/</url>
    <content><![CDATA[<p>大二下 计组 Jasmin 作弊小技巧</p>
<span id="more"></span>
<blockquote>
<p>这篇文章主要教你jasmin的环境的搭建,基本编译语法,以及如何从java快速编写jasmin程序,以应付课程任务,鉴于网上相关资源太少,也没什么人研究这个,写自己的第一篇Blog,回忆一下jasmin的学习过程吧0.0</p>
</blockquote>
<h2 id="jasmin环境搭建与基本编译操作"><strong>jasmin环境搭建与基本编译操作:</strong></h2>
<p>首先您只需要支付5积分便可从我分享的资源下载jasmin并获得本人编写的部分jasmin例程供你学习.链接附文章末尾</p>
<h2 id="准备工作">准备工作</h2>
<p>下载jdk并配置好环境变量,命令行输入java --version检查是否成功</p>
<h2 id="jdk安装验证"><img src="https://img-blog.csdnimg.cn/20210605001508591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jdk安装验证" /></h2>
<p>jasmin内部文件+examples例程: <img src="https://img-blog.csdnimg.cn/20210604233032443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jasmin软件" /><img src="https://img-blog.csdnimg.cn/20210604235242822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="examples例程" /></p>
<h2 id="编译步骤"><strong>编译步骤:</strong></h2>
<ul>
<li>1.win+R 输入cmd打开命令行操作界面,打开jasmin文件夹所在目录:这里我将它放在D下方便操作</li>
<li>2.输入:java -jar jasmin.jar examples2.j(ps:q2.j为笔者所写的冒泡排序)编译,(Generated编译成功)生成class执行文件.<img src="https://img-blog.csdnimg.cn/20210604235616851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="编译" /></li>
<li>3.输入:java q2运行(q2对应代码中的q2类,如果代码中你给debug,那么它编译之后便生产的debug.class可执行文件)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> q2</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 20</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">new java/util/Scanner</span></span><br><span class="line"><span class="function">dup</span></span><br><span class="line"><span class="function">getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">astore_0</span><br><span class="line"></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">newarray <span class="keyword">int</span></span><br><span class="line">astore_1</span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore_2</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot;input:&quot;</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">Loadarray:</span><br><span class="line">aload_0</span><br><span class="line">invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">istore_3</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload_2</span><br><span class="line">iload_3</span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">iinc <span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">iload_2</span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loadarray</span><br><span class="line"></span><br><span class="line">bubsort:</span><br><span class="line">aload_1</span><br><span class="line">arraylength</span><br><span class="line">istore <span class="number">4</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">11</span></span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">5</span></span><br><span class="line"></span><br><span class="line">Loop_1:</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">6</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">if_icmplt Loop_2</span><br><span class="line">goto output</span><br><span class="line">Loop_2:</span><br><span class="line">iload <span class="number">11</span></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">10</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">10</span></span><br><span class="line">if_icmplt exchange_judge</span><br><span class="line">goto else_1</span><br><span class="line">exchange_judge:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">iadd</span><br><span class="line">istore <span class="number">7</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">if_icmpgt exchange</span><br><span class="line">goto else_2</span><br><span class="line">exchange:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">8</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">9</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">9</span></span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iload <span class="number">8</span></span><br><span class="line">iastore</span><br><span class="line">goto else_2</span><br><span class="line"></span><br><span class="line">else_1:</span><br><span class="line">iinc <span class="number">5</span> <span class="number">1</span></span><br><span class="line">goto Loop_1</span><br><span class="line"></span><br><span class="line">else_2:</span><br><span class="line">iinc <span class="number">6</span> <span class="number">1</span></span><br><span class="line">goto Loop_2</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">ldc <span class="string">&quot;order:&quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">12</span></span><br><span class="line">Loop_3:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">13</span></span><br><span class="line">getstatic java/lang/System.out Ljava/io/PrintStream;</span><br><span class="line">iload <span class="number">13</span></span><br><span class="line">invokevirtual java/io/PrintStream/print(I)V</span><br><span class="line">ldc <span class="string">&quot; &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iinc <span class="number">12</span> <span class="number">1</span></span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loop_3</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot; whlll  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">ldc <span class="string">&quot; 19041420  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">Print:</span><br><span class="line">astore <span class="number">2</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">ret <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<p><em>请忽视博主的学号姓名0.0</em></p>
<ul>
<li>4.运行结果:<img src="https://img-blog.csdnimg.cn/20210605001002661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="运行结果" /> So easy!</li>
</ul>
<h2 id="当你会java后情况就变得不一样了"><strong>当你会java后,情况就变得不一样了:</strong></h2>
<p>当你有一个约瑟夫环的java代码+javap <em>约瑟夫环 java:</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> YSF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 500个小孩围一圈，数到3的退出，问剩下最后的小孩原来是多少号？</span></span><br><span class="line"><span class="comment"> * author@</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YueSeFuHuan</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Scanner sca = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入该游戏的参与人数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = sca.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;输入数到退出的数字：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> m = sca.nextInt();</span><br><span class="line">		sca.close();</span><br><span class="line">		<span class="keyword">int</span> len = n;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (len &gt;= m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i % n] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123; <span class="comment">// 这里判断是否被圈出去</span></span><br><span class="line">				<span class="keyword">if</span> (j % m == <span class="number">0</span>)</span><br><span class="line">				&#123; <span class="comment">// 这里判断是否报的数相同，是则退出该位置，且下一位重新报数</span></span><br><span class="line">				<span class="comment">// System.out.print(a[i%n]+&quot;,&quot;);</span></span><br><span class="line">					a[i % n] = -<span class="number">1</span>;</span><br><span class="line">					i++;</span><br><span class="line">					j = <span class="number">1</span>;</span><br><span class="line">					len--;</span><br><span class="line">				&#125; <span class="keyword">else</span></span><br><span class="line">				&#123; <span class="comment">// 不相同则继续</span></span><br><span class="line">					i++;</span><br><span class="line">					j++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span></span><br><span class="line">			&#123; <span class="comment">// 表示该位置已被圈出，跳向下一位</span></span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[k] &gt; <span class="number">0</span>)</span><br><span class="line">				System.out.print(a[k] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;     whllll 19041420&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>eclipse配置好javap插件(java提供的一个用来查看java字节码的工具),那么你将得到:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;YueSeFuHuan.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YSF</span>.<span class="title">YueSeFuHuan</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> YSF.YueSeFuHuan();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">16</span>                 <span class="comment">// class java/util/Scanner</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: getstatic     #<span class="number">18</span>                 <span class="comment">// Field java/lang/System.in:Ljava/io/InputStream;</span></span><br><span class="line">       <span class="number">7</span>: invokespecial #<span class="number">24</span>                 <span class="comment">// Method java/util/Scanner.&quot;&lt;init&gt;&quot;:(Ljava/io/InputStream;)V</span></span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">14</span>: ldc           #<span class="number">31</span>                 <span class="comment">// String 输入该游戏的参与人数：</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">27</span>: ldc           #<span class="number">43</span>                 <span class="comment">// String 输入数到退出的数字：</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual #<span class="number">45</span>                 <span class="comment">// Method java/util/Scanner.close:()V</span></span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span>, -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span>           #<span class="number">48</span>                 <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic  #<span class="number">50</span>                 <span class="comment">// Method java/lang/String.valueOf:(I)Ljava/lang/String;</span></span><br><span class="line">     <span class="number">166</span>: invokespecial #<span class="number">56</span>                 <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">169</span>: ldc           #<span class="number">58</span>                 <span class="comment">// String ,</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual #<span class="number">60</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">     <span class="number">174</span>: invokevirtual #<span class="number">64</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">     <span class="number">177</span>: invokevirtual #<span class="number">68</span>                 <span class="comment">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">192</span>: ldc           #<span class="number">71</span>                 <span class="comment">// String      whllll 19041420</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>下一步:</strong>修改为jasmin的标准代码以及结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> YSF</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 10</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">       0: new java/util/Scanner</span></span><br><span class="line"><span class="function">       3: dup</span></span><br><span class="line"><span class="function">       4: getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">       <span class="number">7</span>: invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">14</span>: ldc <span class="string">&quot;Enter the number of players in the game: &quot;</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">27</span>: ldc <span class="string">&quot;Enter the number to the exit number:&quot;</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual java/util/Scanner/close()V</span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span> -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span> <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span> java/lang/StringBuilder</span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic java/lang/String/valueOf(I)Ljava/lang/String;</span><br><span class="line">     <span class="number">166</span>: invokespecial java/lang/StringBuilder/&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">169</span>: ldc <span class="string">&quot;,&quot;</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual java/lang/StringBuilder/append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">     <span class="number">174</span>: invokevirtual java/lang/StringBuilder/toString()Ljava/lang/String;</span><br><span class="line">     <span class="number">177</span>: invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span> <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">192</span>: ldc <span class="string">&quot;     whllll 19041420&quot;</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<h2 id="部分规则">部分规则:</h2>
<ol type="1">
<li>'#+数字' 替换为 'javap给的注释内容'(#16 // class java/util/Scanner)</li>
<li>将 . 替换为 /</li>
<li>去掉 " "(双引号) <em>具体参考约瑟夫环案例</em></li>
</ol>
<h2 id="最后"><strong>最后:</strong></h2>
<p>一段jasmin代码就搞定了,快速完成了您的课程任务0.0 只要把它放在examples文件夹目录下,后缀名改为.j,按上述操作即可编译运行啦~</p>
<h2 id="笔者寄语"><strong>笔者寄语:</strong></h2>
<p>jasmin作为java的独立的汇编语言,不同于java的字节码依附于java本身代码而存在,从开发上必然没有高级语言的复用性而带来的简洁优美,但其更有助于初学者学习,了解高级语言的更下层的解释,如何实现上层的功能.jasmin的语法更接近于个人计算机RISIC的体系架构,例如先装载再使用的高并发性...虽然网上都说学这玩意儿没啥意思 笔者也是因为课程要求才涉及它,这点心得希望成为那些觉得它还有点意思的人的一点动力吧0.0</p>
<p>whlll的jasmin软件+样例程序链接: <a href="https://download.csdn.net/download/qq_45893516/19393587">jasmin+本人写的一些样例程序仅供学习参考</a></p>
<p>参考书籍:计算机组成及汇编语言原理(第十章) 机械工业出版社 (美)Patrick Juola 著</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
        <tag>Jasmin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kmeans算法初探</title>
    <url>/2021/10/30/Kmeans%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>实验室有一个项目用到了Kmeans算法的思想 但是靠的是纯纯的人力 能不能用机器学习中的Kmeans来彻底实现呢？</p>
<span id="more"></span>
<h2 id="kmeans-info">KMEANS INFO</h2>
<blockquote>
<p>有<strong>四个牧师</strong>去郊区布道，一开始牧师们随意选了几个布道点，并且把这几个布道点的情况公告给了郊区所有的<strong>村民</strong>，于是每个村民到离自己家最近的布道点去听课。听课之后，大家觉得距离太远了，于是<strong>每个牧师统计了一下自己的课上所有的村民的地址，搬到了所有地址的中心地带</strong>，并且在海报上更新了自己的布道点的位置。牧师每一次移动不可能离所有人都更近，有的人发现A牧师移动以后自己还不如去B牧师处听课更近，于是每个村民又去了离自己最近的布道点……就这样，牧师每个礼拜更新自己的位置，<strong>村民根据自己的情况选择布道点</strong>，最终稳定了下来。</p>
</blockquote>
<ul>
<li>村民牧师解释
<ul>
<li>四个牧师: <font color=red>K(种类 ML中叫类聚中心)</font></li>
<li>村民: K种样本集合</li>
<li>牧师更改布道点: <font color=red>更改类聚中心位置</font></li>
<li>村民根据自己情况选择布道点: 迭代已达到稳定</li>
</ul></li>
</ul>
<h2 id="kmeans-details">KMEANS DETAILS</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301559400.gif" /></p>
<ul>
<li><p>1.初始化K个样本作为初试类聚中心a = a1、a2、a3、a4、a5</p></li>
<li><p>2.针对每个样本中的xi计算到每个样本类聚中心的距离(欧氏距离)最小值<span class="math inline">\(d=\sqrt{\sum_{i=0}^N(x_{1i}-x_{2i})^2}\)</span>，分到对应的类聚中心的类中</p></li>
<li><p>3.针对每个类别ai,重新计算它的类聚中心</p></li>
</ul>
<p><span class="math display">\[
a_j=\frac1{|C_i|}\sum{x}(x\epsilon{C_i})
\]</span></p>
<ul>
<li>4.重复上面 2 3 两步操作，直到达到某个中止条件（<strong>迭代次数</strong>、<strong>最小误差变化</strong>等）</li>
</ul>
<h2 id="shortcoming">SHORTCOMING</h2>
<ul>
<li>K 值需要人为设定，不同 K 值得到的结果不一样 (<strong>Gap statistic</strong>)</li>
<li>对初始的簇中心敏感，不同选取方式会得到不同结果 (<strong>Kmeans++ | Kmeans II</strong>)</li>
<li>对异常值敏感 (<strong>Pretreatment</strong>)</li>
<li>不适合太离散的分类、样本类别不平衡的分类、非凸形状的分类 (<strong>核函数</strong>)</li>
<li>样本只能归为一类，不适合多分类任务 (<strong>ISODATA细分样本</strong>)</li>
</ul>
<h2 id="optimization-of-kmeans">OPTIMIZATION OF KMEANS</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301608007.png" /></p>
<ul>
<li>手肘法(人工确定K)</li>
</ul>
<blockquote>
<p>当 K &lt; 2 时，曲线急速下降；当 K &gt; 2 时，曲线趋于平稳，通过手肘法我们认为拐点 2 为 K 的最佳值</p>
</blockquote>
<ul>
<li><strong>Gap statistic</strong></li>
</ul>
<p><span class="math display">\[
𝑑_{𝑖𝑖^′}=\Sigma(𝑥_{𝑖𝑗}−𝑥_{𝑖^′ 𝑗})^2 (𝑖=1,2…𝑛;𝑗=1,2,…𝑝)\to 描述与中心的距离
\]</span></p>
<p><span class="math display">\[
n_r=|C_r| \to 样本空间
\]</span></p>
<p><span class="math display">\[
W_k=\Sigma(\frac{1}{2n_r}D_r) \to 损失函数
\]</span></p>
<p><span class="math display">\[
最终公式\to Gap_n(k)=E^*\{log(W_k)\}-log(W_k)
\]</span></p>
<p><span class="math display">\[
E^*\{log(W_k)\}\to how\ to\ get?
\]</span></p>
<blockquote>
<p>参考论文: <a href="https://statweb.stanford.edu/~gwalther/gap">Estimating the number of clusters in a data set via the gap statistic</a></p>
<p>Robert Tibshirani , Guenther Walther and Trevor Hastie</p>
<p>Stanford University</p>
</blockquote>
<h2 id="monte-carlo-method">MONTE CARLO METHOD</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301616821.gif" /></p>
<ul>
<li>解决两类问题</li>
</ul>
<blockquote>
<p>一类是所求解的问题<strong>本身</strong>具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程</p>
<p>另一种类型是所求解问题可以<strong>转化</strong>为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值</p>
</blockquote>
<ul>
<li>理解</li>
</ul>
<blockquote>
<p>假设你有一袋豆子，把豆子均匀地朝这个图形上撒，然后数这个图形之中有多少颗豆子，这个豆子的数目就是图形的面积。当你的豆子越小，撒的越多的时候，结果就越精确。借助计算机程序可以生成大量均匀分布坐标点，然后统计出图形内的点数，通过它们占总点数的比例和坐标点生成范围的面积就可以求出图形面积。</p>
</blockquote>
<h2 id="kmeans---kmeans---kmeans-ii">Kmeans -&gt; Kmeans++ -&gt; Kmeans II</h2>
<h3 id="kmeans">Kmeans</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据 n 个 m维 的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成 K 个 m维 的点(where)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j &lt; k;j++)</span><br><span class="line">	  		   计算 i 到类 j 的距离</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;I &lt; k;i++)</span><br><span class="line">           <span class="number">1.</span>  找出所有属于自己这一类的所有数据点</span><br><span class="line">           <span class="number">2.</span>  把自己的坐标修改为这些数据中心点坐标</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="kmeans-1">Kmeans++</h3>
<ul>
<li><p>1.随机选取<span class="math inline">\(a_i\)</span></p></li>
<li><p>2.计算数据到之前 n 个聚类中心最远的距离 , 并以一定的概率 <span class="math inline">\(\frac{D(x)^2}{∑D(x)^2}\)</span>,选择新的中心点<span class="math inline">\(a_i\)</span></p></li>
<li><p>3.重复步骤2</p></li>
</ul>
<h3 id="kmeans-ii">Kmeans II</h3>
<ul>
<li>在Kmeans++基础上 每次遍历取样k个，重复该取样过程klog(n)次，得到一个集合，然后随机选取 K个点作为类聚中心</li>
</ul>
<h2 id="pretreatment">PRETREATMENT</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301706552.png" /></p>
<blockquote>
<p>当样本点过于离散时的效果</p>
</blockquote>
<ul>
<li>1.预处理提前过滤掉异常值</li>
<li>2.通过一个<font color=red>非线性映射</font>，将输入空间中的数据点映射到高位的特征空间中，并在新的特征空间中进行聚类。<font color=red>非线性映射增加了数据点线性可分的概率</font>，从而在经典的聚类算法失效的情况下，通过引入核函数可以达到更为<strong>准确</strong>的聚类结果。</li>
</ul>
<h2 id="isodata">ISODATA</h2>
<blockquote>
<p>ISODATA (迭代自组织数据分析法)。它解决了 K 的值需要预先人为的确定这一缺点。而当遇到高维度、海量的数据集时，人们往往很难准确地估计出 K 的大小</p>
</blockquote>
<ul>
<li>当属于某个类别的样本数过少时把这个类别去除，当属于某个类别的样本数过多、分散程度较大时把这个类别分为两个子类别</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown数学公式语法</title>
    <url>/2021/10/31/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>数学公式编辑器的救星 比Office不要好用太多 很好记</p>
<span id="more"></span>
<h2 id="行内与独行">行内与独行</h2>
<ul>
<li><p>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：<span class="math inline">\(xyz\)</span></p></li>
<li><p>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：<span class="math display">\[xyz\]</span></p></li>
</ul>
<h2 id="上标下标与组合">上标、下标与组合</h2>
<ul>
<li><p>上标符号，符号：<code>^</code>，如：<span class="math inline">\(x^4\)</span></p></li>
<li><p>下标符号，符号：<code>_</code>，如：<span class="math inline">\(x_1\)</span></p></li>
<li><p>组合符号，符号：<code>&#123;&#125;</code>，如：<span class="math inline">\({16}_{8}O{2+}_{2}\)</span></p></li>
</ul>
<h2 id="汉字字体与格式">汉字、字体与格式</h2>
<ul>
<li><p>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：<span class="math inline">\(V_{\mbox{初始}}\)</span></p></li>
<li><p>字体控制，符号：<code>\displaystyle</code>，如：<span class="math inline">\(\displaystyle \frac{x+y}{y+z}\)</span></p></li>
<li><p>下划线符号，符号：<code>\underline</code>，如：<span class="math inline">\(\underline{x+y}\)</span></p></li>
<li><p>标签，符号<code>\tag&#123;数字&#125;</code>，如：<span class="math inline">\(\tag{11}\)</span></p></li>
<li><p>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：<span class="math inline">\(\overbrace{a+b+c+d}^{2.0}\)</span></p></li>
<li><p>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：<span class="math inline">\(a+\underbrace{b+c}_{1.0}+d\)</span></p></li>
<li><p>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：<span class="math inline">\(\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}\)</span></p></li>
</ul>
<h2 id="占位符">占位符</h2>
<ul>
<li><p>两个quad空格，符号：<code>\qquad</code>，如：<span class="math inline">\(x \qquad y\)</span></p></li>
<li><p>quad空格，符号：<code>\quad</code>，如：<span class="math inline">\(x \quad y\)</span></p></li>
<li><p>大空格，符号<code>\</code>，如：<span class="math inline">\(x \ y\)</span></p></li>
<li><p>中空格，符号<code>\:</code>，如：<span class="math inline">\(x \: y\)</span></p></li>
<li><p>小空格，符号<code>\,</code>，如：<span class="math inline">\(x \, y\)</span></p></li>
<li><p>没有空格，符号``，如：<span class="math inline">\(xy\)</span></p></li>
<li><p>紧贴，符号<code>\!</code>，如：<span class="math inline">\(x \! y\)</span></p></li>
</ul>
<h2 id="定界符与组合">定界符与组合</h2>
<ul>
<li><p>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：<span class="math inline">\(（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)\)</span></p></li>
<li><p>中括号，符号：<code>[]</code>，如：<span class="math inline">\([x+y]\)</span></p></li>
<li><p>大括号，符号：<code>\&#123; \&#125;</code>，如：<span class="math inline">\({x+y}\)</span></p></li>
<li><p>自适应括号，符号：<code>\left \right</code>，如：<span class="math inline">\(\left(x\right)\)</span>，<span class="math inline">\(\left(x{yz}\right)\)</span></p></li>
<li><p>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：<span class="math inline">\({n+1 \choose k}={n \choose k}+{n \choose k-1}\)</span></p></li>
<li><p>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：<span class="math inline">\(\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots\)</span></p></li>
</ul>
<h2 id="四则运算">四则运算</h2>
<ul>
<li><p>加法运算，符号：<code>+</code>，如：<span class="math inline">\(x+y=z\)</span></p></li>
<li><p>减法运算，符号：<code>-</code>，如：<span class="math inline">\(x-y=z\)</span></p></li>
<li><p>加减运算，符号：<code>\pm</code>，如：<span class="math inline">\(x \pm y=z\)</span></p></li>
<li><p>减甲运算，符号：<code>\mp</code>，如：<span class="math inline">\(x \mp y=z\)</span></p></li>
<li><p>乘法运算，符号：<code>\times</code>，如：<span class="math inline">\(x \times y=z\)</span></p></li>
<li><p>点乘运算，符号：<code>\cdot</code>，如：<span class="math inline">\(x \cdot y=z\)</span></p></li>
<li><p>星乘运算，符号：<code>\ast</code>，如：<span class="math inline">\(x \ast y=z\)</span></p></li>
<li><p>除法运算，符号：<code>\div</code>，如：<span class="math inline">\(x \div y=z\)</span></p></li>
<li><p>斜法运算，符号：<code>/</code>，如：<span class="math inline">\(x/y=z\)</span></p></li>
<li><p>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：<span class="math inline">\(\frac{x+y}{y+z}\)</span></p></li>
<li><p>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：<span class="math inline">\({x+y} \over {y+z}\)</span></p></li>
<li><p>绝对值表示，符号：<code>||</code>，如：<span class="math inline">\(|x+y|\)</span></p></li>
</ul>
<h2 id="高级运算">高级运算</h2>
<ul>
<li><p>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：<span class="math inline">\(\overline{xyz}\)</span></p></li>
<li><p>开二次方运算，符号：<code>\sqrt</code>，如：<span class="math inline">\(\sqrt x\)</span></p></li>
<li><p>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：<span class="math inline">\(\sqrt[3]{x+y}\)</span></p></li>
<li><p>对数运算，符号：<code>\log</code>，如：<span class="math inline">\(\log(x)\)</span></p></li>
<li><p>极限运算，符号：<code>\lim</code>，如：<span class="math inline">\(\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>极限运算，符号：<code>\displaystyle \lim</code>，如：<span class="math inline">\(\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>求和运算，符号：<code>\sum</code>，如：<span class="math inline">\(\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>求和运算，符号：<code>\displaystyle \sum</code>，如：<span class="math inline">\(\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>积分运算，符号：<code>\int</code>，如：<span class="math inline">\(\int^{\infty}_{0}{xdx}\)</span></p></li>
<li><p>积分运算，符号：<code>\displaystyle \int</code>，如：<span class="math inline">\(\displaystyle \int^{\infty}_{0}{xdx}\)</span></p></li>
<li><p>微分运算，符号：<code>\partial</code>，如：<span class="math inline">\(\frac{\partial x}{\partial y}\)</span></p></li>
<li><p>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：<span class="math inline">\(\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\cdots5 &amp;6 &amp;\cdots &amp;8\\vdots &amp;\vdots &amp;\ddots &amp;\vdots\cdots13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]\)</span></p></li>
</ul>
<h2 id="逻辑运算">逻辑运算</h2>
<ul>
<li><p>等于运算，符号：<code>=</code>，如：<span class="math inline">\(x+y=z\)</span></p></li>
<li><p>大于运算，符号：<code>&gt;</code>，如：<span class="math inline">\(x+y&gt;z\)</span></p></li>
<li><p>小于运算，符号：<code>&lt;</code>，如：<span class="math inline">\(x+y&lt;z\)</span></p></li>
<li><p>大于等于运算，符号：<code>\geq</code>，如：<span class="math inline">\(x+y \geq z\)</span></p></li>
<li><p>小于等于运算，符号：<code>\leq</code>，如：<span class="math inline">\(x+y \leq z\)</span></p></li>
<li><p>不等于运算，符号：<code>\neq</code>，如：<span class="math inline">\(x+y \neq z\)</span></p></li>
<li><p>不大于等于运算，符号：<code>\ngeq</code>，如：<span class="math inline">\(x+y \ngeq z\)</span></p></li>
<li><p>不大于等于运算，符号：<code>\not\geq</code>，如：<span class="math inline">\(x+y \not\geq z\)</span></p></li>
<li><p>不小于等于运算，符号：<code>\nleq</code>，如：<span class="math inline">\(x+y \nleq z\)</span></p></li>
<li><p>不小于等于运算，符号：<code>\not\leq</code>，如：<span class="math inline">\(x+y \not\leq z\)</span></p></li>
<li><p>约等于运算，符号：<code>\approx</code>，如：<span class="math inline">\(x+y \approx z\)</span></p></li>
<li><p>恒定等于运算，符号：<code>\equiv</code>，如：<span class="math inline">\(x+y \equiv z\)</span></p></li>
</ul>
<h2 id="集合运算">集合运算</h2>
<ul>
<li><p>属于运算，符号：<code>\in</code>，如：<span class="math inline">\(x \in y\)</span></p></li>
<li><p>不属于运算，符号：<code>\notin</code>，如：<span class="math inline">\(x \notin y\)</span></p></li>
<li><p>不属于运算，符号：<code>\not\in</code>，如：<span class="math inline">\(x \not\in y\)</span></p></li>
<li><p>子集运算，符号：<code>\subset</code>，如：<span class="math inline">\(x \subset y\)</span></p></li>
<li><p>子集运算，符号：<code>\supset</code>，如：<span class="math inline">\(x \supset y\)</span></p></li>
<li><p>真子集运算，符号：<code>\subseteq</code>，如：<span class="math inline">\(x \subseteq y\)</span></p></li>
<li><p>非真子集运算，符号：<code>\subsetneq</code>，如：<span class="math inline">\(x \subsetneq y\)</span></p></li>
<li><p>真子集运算，符号：<code>\supseteq</code>，如：<span class="math inline">\(x \supseteq y\)</span></p></li>
<li><p>非真子集运算，符号：<code>\supsetneq</code>，如：<span class="math inline">\(x \supsetneq y\)</span></p></li>
<li><p>非子集运算，符号：<code>\not\subset</code>，如：<span class="math inline">\(x \not\subset y\)</span></p></li>
<li><p>非子集运算，符号：<code>\not\supset</code>，如：<span class="math inline">\(x \not\supset y\)</span></p></li>
<li><p>并集运算，符号：<code>\cup</code>，如：<span class="math inline">\(x \cup y\)</span></p></li>
<li><p>交集运算，符号：<code>\cap</code>，如：<span class="math inline">\(x \cap y\)</span></p></li>
<li><p>差集运算，符号：<code>\setminus</code>，如：<span class="math inline">\(x \setminus y\)</span></p></li>
<li><p>同或运算，符号：<code>\bigodot</code>，如：<span class="math inline">\(x \bigodot y\)</span></p></li>
<li><p>同与运算，符号：<code>\bigotimes</code>，如：<span class="math inline">\(x \bigotimes y\)</span></p></li>
<li><p>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></p></li>
<li><p>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></p></li>
<li><p>空集，符号：<code>\emptyset</code>，如：<span class="math inline">\(\emptyset\)</span></p></li>
</ul>
<h2 id="数学符号">数学符号</h2>
<ul>
<li><p>无穷，符号：<code>\infty</code>，如：<span class="math inline">\(\infty\)</span></p></li>
<li><p>虚数，符号：<code>\imath</code>，如：<span class="math inline">\(\imath\)</span></p></li>
<li><p>虚数，符号：<code>\jmath</code>，如：<span class="math inline">\(\jmath\)</span></p></li>
<li><p>数学符号，符号<code>\hat&#123;a&#125;</code>，如：<span class="math inline">\(\hat{a}\)</span></p></li>
<li><p>数学符号，符号<code>\check&#123;a&#125;</code>，如：<span class="math inline">\(\check{a}\)</span></p></li>
<li><p>数学符号，符号<code>\breve&#123;a&#125;</code>，如：<span class="math inline">\(\breve{a}\)</span></p></li>
<li><p>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：<span class="math inline">\(\tilde{a}\)</span></p></li>
<li><p>数学符号，符号<code>\bar&#123;a&#125;</code>，如：<span class="math inline">\(\bar{a}\)</span></p></li>
<li><p>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：<span class="math inline">\(\vec{a}\)</span></p></li>
<li><p>数学符号，符号<code>\acute&#123;a&#125;</code>，如：<span class="math inline">\(\acute{a}\)</span></p></li>
<li><p>数学符号，符号<code>\grave&#123;a&#125;</code>，如：<span class="math inline">\(\grave{a}\)</span></p></li>
<li><p>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：<span class="math inline">\(\mathring{a}\)</span></p></li>
<li><p>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：<span class="math inline">\(\dot{a}\)</span></p></li>
<li><p>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：<span class="math inline">\(\ddot{a}\)</span></p></li>
<li><p>上箭头，符号：<code>\uparrow</code>，如：<span class="math inline">\(\uparrow\)</span></p></li>
<li><p>上箭头，符号：<code>\Uparrow</code>，如：<span class="math inline">\(\Uparrow\)</span></p></li>
<li><p>下箭头，符号：<code>\downarrow</code>，如：<span class="math inline">\(\downarrow\)</span></p></li>
<li><p>下箭头，符号：<code>\Downarrow</code>，如：<span class="math inline">\(\Downarrow\)</span></p></li>
<li><p>左箭头，符号：<code>\leftarrow</code>，如：<span class="math inline">\(\leftarrow\)</span></p></li>
<li><p>左箭头，符号：<code>\Leftarrow</code>，如：<span class="math inline">\(\Leftarrow\)</span></p></li>
<li><p>右箭头，符号：<code>\rightarrow</code>，如：<span class="math inline">\(\rightarrow\)</span></p></li>
<li><p>右箭头，符号：<code>\Rightarrow</code>，如：<span class="math inline">\(\Rightarrow\)</span></p></li>
<li><p>底端对齐的省略号，符号：<code>\ldots</code>，如：<span class="math inline">\(1,2,\ldots,n\)</span></p></li>
<li><p>中线对齐的省略号，符号：<code>\cdots</code>，如：<span class="math inline">\(x_1^2 + x_2^2 + \cdots + x_n^2\)</span></p></li>
<li><p>竖直对齐的省略号，符号：<code>\vdots</code>，如：<span class="math inline">\(\vdots\)</span></p></li>
<li><p>斜对齐的省略号，符号：<code>\ddots</code>，如：<span class="math inline">\(\ddots\)</span></p></li>
</ul>
<h2 id="希腊字母">希腊字母</h2>
<table>
<thead>
<tr class="header">
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr class="even">
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr class="odd">
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr class="even">
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr class="odd">
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr class="even">
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr class="odd">
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr class="even">
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr class="odd">
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr class="even">
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr class="odd">
<td>N</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr class="even">
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr class="odd">
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr class="even">
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr class="odd">
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\cmicron</code></td>
</tr>
<tr class="even">
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr class="odd">
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr class="even">
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr class="odd">
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr class="even">
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr class="odd">
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr class="even">
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr class="odd">
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr class="even">
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody>
</table>
<p>转载：https://www.jianshu.com/p/e74eb43960a1</p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MindStudio容器化部署</title>
    <url>/2021/10/24/MindStudio%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>大三上 创新实践 华为云 MindStudio 容器化部署</p>
<span id="more"></span>
<h2 id="安装-更新docker">安装 | 更新Docker</h2>
<ul>
<li>如果原来docker版本老旧 删除之</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>
<ul>
<li>Centos</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker</span><br></pre></td></tr></table></figure>
<ul>
<li>更新apt包</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<ul>
<li>更新yum包</li>
<li>Centos</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Centos</p></li>
<li><p>安装需要的包</p></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<ul>
<li>设置镜像的仓库(可以不用 网上CV下来的)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">	--add-repo \ </span><br><span class="line">https://download.docker,com/linux/centos/docker-ce.repo ## 这是个默认从国外的 </span><br><span class="line"></span><br><span class="line">yum-config-manager \ </span><br><span class="line">	--add-repo \ </span><br><span class="line">	htttp://mirrors.aliyum.com/docker-ce/linux/centos/docker-ce.repo ## 推荐使用aliyun</span><br></pre></td></tr></table></figure>
<ul>
<li>安装</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure>
<ul>
<li>Centos</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker</span><br></pre></td></tr></table></figure>
<ul>
<li>安装验证</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">Docker version 20.10.9, build c2ea9bc</span><br></pre></td></tr></table></figure>
<h2 id="用户添加到docker组">用户添加到docker组</h2>
<ul>
<li>查看是否有docker组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有就创建</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
<ul>
<li>将当前用户添加到docker组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -G docker whlll（你的用户ID）</span><br></pre></td></tr></table></figure>
<ul>
<li>重启docker服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果直接使用root 可以忽略此步</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>链接：https://pan.baidu.com/s/1M5bcfzus_hKPSN_cJCVZ5A 提取码：pz61</p>
<ul>
<li>FileZilla FTP传输 c32.zip 到虚拟机(推荐当前用户的home目录) 解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip c32.zip</span><br></pre></td></tr></table></figure>
<ul>
<li>加载镜像到docker(在解压后c32v1的目录)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i c32v1</span><br></pre></td></tr></table></figure>
<ul>
<li>查看镜像ID是否加载成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<ul>
<li>重命名镜像</li>
</ul>
<blockquote>
<p>使用 <strong>docker images</strong> 查看镜像ID</p>
<p>使用 <strong>docker ps -a </strong> 查看运行的容器ID</p>
<p>使用 <strong>docker ps -aq</strong> 查看运行和退出状态的容器ID</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag [镜像ID] [名字]:[标签]</span><br></pre></td></tr></table></figure>
<ul>
<li>登录本机图形化界面 配置图形化显示</li>
</ul>
<blockquote>
<p>注意：Ubuntu上没有这个<strong>x11-xserver-utils</strong>工具 如果使用Centos 最后一步 图形化窗口无法初始化 先挖个坑以后填 当前推荐使用Debian 下的linux版本 如Ubuntu</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install x11-xserver-utils</span><br><span class="line"></span><br><span class="line">xhost +</span><br></pre></td></tr></table></figure>
<ul>
<li>启动镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --network=host -v /etc/localtime:/etc/localtime:ro -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=unix$DISPLAY -e GDK_SCALE -e GDK_DPI_SCALE [镜像ID] bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次启动需要这个命令 后续每次启动都不需要 使用以下命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --network=host [镜像ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>进入之前创建好的容器</li>
</ul>
<blockquote>
<p>如果容器本身是停止的</p>
<p>你需要使用 <strong>docker start [容器ID]</strong> 启动之</p>
<p>再使用一下命令进入</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exex -it [容器ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>切换MindStudio的安装用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - ascend</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ascend用户和root用户的密码均为各自的用户名</p>
</blockquote>
<ul>
<li>进入home目录并启动MindStudio</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/MindStudio-ubuntu/bin/</span><br><span class="line"></span><br><span class="line">./MindStudio.sh</span><br></pre></td></tr></table></figure>
<h2 id="docker-基本命令相见docker命令回顾">docker 基本命令(相见docker命令回顾)</h2>
<ul>
<li>查看运行中的容器使用</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<ul>
<li>查看所有的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<ul>
<li>停止运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>启动停止的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>删除停止的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>强制删除运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>进入运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exex -it [容器ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>回退</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CTRL + d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MindStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql笔记</title>
    <url>/2021/10/02/MySql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>MySQL 梦开始的地方</p>
<span id="more"></span>
<p><strong>MySQL是一个关系型数据库管理系统</strong></p>
<blockquote>
<p>5.7 -&gt; 稳定</p>
<p><strong>8.0</strong> -&gt; 用的最多</p>
<p>在用 -&gt; 8.0.25</p>
</blockquote>
<h2 id="配置my.ini">配置my.ini</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">basedir=D:\Program Files\mysql</span><br><span class="line"></span><br><span class="line">datadir=D:\Program Files\mysql\data</span><br><span class="line"></span><br><span class="line">max_connections=200</span><br><span class="line"></span><br><span class="line">max_connect_errors=10</span><br><span class="line"></span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>
<h2 id="创建数据库">创建数据库</h2>
<blockquote>
<p>基字符集：<em>utf-8</em><br />
数据库排序规则：<em>utf8—general-ci</em></p>
</blockquote>
<h2 id="连接数据库">连接数据库</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="comment">-- 连接数据库</span></span><br><span class="line"></span><br><span class="line">update mysql.user</span><br><span class="line"><span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>;  <span class="comment">-- 修改用户密码</span></span><br><span class="line"></span><br><span class="line">flush privileges ;  <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="comment">-- -----------------------------------------</span></span><br><span class="line"><span class="comment">-- 所有的语句都用;结尾</span></span><br><span class="line"><span class="keyword">show</span> databases ; <span class="comment">-- 查看所有数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>use school <span class="comment">-- 切换数据库 use</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables ; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">-- 显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database whlll; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit;</span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/*(多行注释)</span></span><br><span class="line"><span class="comment">你好</span></span><br><span class="line"><span class="comment">whlll</span></span><br><span class="line"><span class="comment">Bye!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数据库xxx语言(CRUD 增删改查!)<br />
</li>
<li>DDL 定义<br />
</li>
<li>DML 操作<br />
</li>
<li>DQL 查询<br />
</li>
<li>DCL 控制</li>
</ul>
<h2 id="操作数据库">操作数据库</h2>
<blockquote>
<p>操作数据库 -&gt; 操作数据库中的表 -&gt; 操作数据库表中的数据</p>
</blockquote>
<h3 id="创建数据库-1">创建数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] whlll </span><br></pre></td></tr></table></figure>
<h3 id="删除数据库">删除数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] whlll </span><br></pre></td></tr></table></figure>
<h3 id="使用数据库">使用数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果你的表名或字段名是一个特殊字符 需要带 ``</span></span><br><span class="line">use `school`;</span><br><span class="line"><span class="keyword">select</span> `<span class="keyword">user</span>` <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h3 id="查看数据库">查看数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases <span class="comment">-- 查看所有的数据库</span></span><br></pre></td></tr></table></figure>
<p><strong>学习思路</strong> - 对照sqlyog可视化历史记录查看sql - 固定的语法或关键字帮助记忆</p>
<h2 id="数据库的列类型">数据库的列类型</h2>
<h3 id="数值">数值</h3>
<h4 id="tinyint">tinyint</h4>
<ul>
<li>十分小的数据 1字节</li>
</ul>
<h4 id="smallint">smallint</h4>
<ul>
<li>较小的数据 2字节</li>
</ul>
<h4 id="mediumint">mediumint</h4>
<ul>
<li>中等大小的数据 3字节</li>
</ul>
<h4 id="int">int</h4>
<ul>
<li><strong>标准的整数</strong> <strong>4字节</strong></li>
</ul>
<h4 id="bigint">bigint</h4>
<ul>
<li>较大的数据 8字节</li>
</ul>
<h4 id="float">float</h4>
<ul>
<li>浮点数 4字节</li>
</ul>
<h4 id="double">double</h4>
<ul>
<li>浮点数 8字节 (精度问题！)</li>
</ul>
<h4 id="decimal">decimal</h4>
<ul>
<li>字符串形式的浮点数 金融计算时候，一般使用decimal</li>
</ul>
<h3 id="字符串">字符串</h3>
<h4 id="char">char</h4>
<ul>
<li>字符串固定大小 0-255</li>
</ul>
<h4 id="varchar">varchar</h4>
<ul>
<li>可变字符串 0-65535 <strong>常用的</strong></li>
</ul>
<h4 id="tinytext">tinytext</h4>
<ul>
<li>微型文本 2^8-1</li>
</ul>
<h4 id="text">text</h4>
<ul>
<li>文本串 2^16-1 <strong>保存大文本</strong></li>
</ul>
<h3 id="时间日期">时间日期</h3>
<h4 id="date">date</h4>
<ul>
<li>YYYY-MM-DD,日期</li>
</ul>
<h4 id="time">time</h4>
<ul>
<li>HH:mm:ss 时间格式</li>
</ul>
<h4 id="datetime"><strong>datetime </strong></h4>
<ul>
<li><strong>YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li>
</ul>
<h4 id="timestamp">timestamp</h4>
<ul>
<li>时间戳， 1970.1.1到现在的毫秒数！ 较为常用</li>
</ul>
<h4 id="year">year</h4>
<ul>
<li>年份表示</li>
</ul>
<h4 id="null">null</h4>
<ul>
<li>没有值，未知</li>
</ul>
<blockquote>
<p><em>不要使用null值进行计算</em></p>
</blockquote>
<h2 id="数据库的字段属性重点">数据库的字段属性(重点)</h2>
<h3 id="unsigned">Unsigned</h3>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<h4 id="zerofill">zerofill</h4>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充 int(3) -&gt; 5 ---&gt; 005</li>
</ul>
<h4 id="自增">自增</h4>
<ul>
<li>通常理解为自增，在上一条的记录基础上+1(默认)</li>
<li>通常用来设计唯一的主键，必须为整数类型</li>
<li>可以自定义主键自增的起始值和增量</li>
</ul>
<h4 id="非空-null-not-null">非空 NULL not null</h4>
<ul>
<li>假设设置为not null ，如果不赋值，则会报错！</li>
<li>NULL，如果不填值，默认为null</li>
</ul>
<h4 id="默认">默认</h4>
<ul>
<li>设置默认值</li>
<li>eg：sex 默认值为男</li>
</ul>
<blockquote>
<p>每一个表，都必须存在以下五个字段 -&gt; 项目 id 主键 version 乐观锁 is_delete 伪删除 gmt_create 创建时间 gmt_update 修改时间</p>
</blockquote>
<h2 id="创建数据库表">创建数据库表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列，字段) 使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2)，生日日期(datetime)，家庭住址，email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文() ， 表的名称 和 字段 尽量使用 `` 括起来</span></span><br><span class="line"><span class="comment">-- AUTO INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用 单引号括起来！</span></span><br><span class="line"><span class="comment">-- 所有语句后面加,(英文) ,最后一个不用加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `grade`(</span><br><span class="line">    `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年纪id&#x27;</span>,</span><br><span class="line">    `gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年纪名称&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`</span><br><span class="line">(</span><br><span class="line">    `id`   <span class="type">INT</span>(<span class="number">4</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `pwd`  <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<h3 id="格式">格式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释]</span><br><span class="line">) [表类型][字符集设置][注释]</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库引擎">数据库引擎</h3>
<blockquote>
<p>INNODB 默认使用 MYISAM 早些年使用</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="odd">
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
</tbody>
</table>
<p>常规使用操作： - MYISAM 节约空间，速度快 - INNODB 安全性高，事务的处理，多表多用户操作</p>
<h4 id="物理空间的存在位置">物理空间的存在位置</h4>
<blockquote>
<p>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库<br />
本质还是文件的储存</p>
</blockquote>
<h4 id="mysql引擎在物理文件上的区别">MySQL引擎在物理文件上的区别</h4>
<ul>
<li>INNODB 在数据库表中只有一个 *.frm 文件，以及上级目录下的 ibdata1 文件</li>
<li>MYISAM 对应文件
<ul>
<li>*.frm - 表结构的定义文件</li>
<li>*.MYD 数据文件(data)</li>
<li>*.MYI 索引文件(index)</li>
</ul></li>
</ul>
<h3 id="设置数据库表的字符集编码">设置数据库表的字符集编码</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不设置 -&gt; 默认 -&gt; 不支持中文<br />
在my.ini中设置默认的编码</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character_set_server</span>=utf8</span><br></pre></td></tr></table></figure>
<h2 id="修改删除表">修改删除表</h2>
<h3 id="修改">修改</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表 ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher RENAME <span class="keyword">AS</span> teacher1;</span><br><span class="line"><span class="comment">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment">-- 修改表的字段(重命名，修改约束！)</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>); <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 CHANGE age age1 <span class="type">INT</span>(<span class="number">1</span>); <span class="comment">-- 字段重命名</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher1</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>所有的创建和删除尽量加上判断，以免报错~</strong></p>
</blockquote>
<p><strong>注意点</strong></p>
<ul>
<li>``字段名,使用这个包裹！</li>
<li>注释 -- /**/</li>
<li>sql 关键字大小写不敏感 -&gt; 建议写小写</li>
<li>所有的符号用英文</li>
</ul>
<h2 id="mysql数据管理">MySQL数据管理</h2>
<h3 id="外键">外键</h3>
<h4 id="方式一-在创建表的时候增加约束麻烦比较复杂">方式一 在创建表的时候，增加约束(麻烦，比较复杂)</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `grade`(</span><br><span class="line">    `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年纪id&#x27;</span>,</span><br><span class="line">    `gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年纪名称&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束(执行引用) references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`</span><br><span class="line">(</span><br><span class="line">    `id`   <span class="type">INT</span>(<span class="number">4</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `pwd`  <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY `FK_gradeid` (`gradeid`),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除有外键关系的表的时候，必须删除引用别人的表(从表),再删除被引用的表(主表)</p>
</blockquote>
<h4 id="方式二-创建表成功后添加外键约束">方式二 创建表成功后，添加外键约束</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `grade`(</span><br><span class="line">    `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年纪id&#x27;</span>,</span><br><span class="line">    `gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年纪名称&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束(执行引用) references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`</span><br><span class="line">(</span><br><span class="line">    `id`   <span class="type">INT</span>(<span class="number">4</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `pwd`  <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表(哪个字段);</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上操作都是物理外键，数据库级别的外键，我们不建议使用！(避免数据库过多造成困扰)</p>
</blockquote>
<h4 id="最佳实践">最佳实践</h4>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行(数据)和列(字段)</li>
<li>我们想使用多张表的数据，想使用外键(程序去实现) ###3.2 DML语言(全部记住) 数据库意义：数据存储，数据管理 DML语言：数据操作语言</li>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="添加">添加</h3>
<ul>
<li>insert</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句(添加)</span></span><br><span class="line"><span class="comment">-- insert into 表名([字段名1，字段2，字段3])values(&#x27;值1&#x27;),(&#x27;值2&#x27;),(&#x27;值3&#x27;),...</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大四&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于主键自增我们可以省略(如果不写表的字段，他就会一一匹配)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span>(<span class="string">&#x27;大三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `g`student`rade`(`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大一&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;aaaaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`pwd`,`sex`) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;aaaaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;aaaaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="语法">语法</h4>
<p><code>insert into 表名([字段名1，字段2，字段3])values('值1'),('值2'),('值3'),...</code></p>
<h4 id="注意事项">注意事项</h4>
<ol type="1">
<li>字段和字段之间使用 英文逗号 隔开</li>
<li>字段可以省略，但是后面的值必须一一对应</li>
<li>可以同时插入多条数据，VALUES后面的值，需要使用 , 隔开即可 <code>VALUES(),()</code></li>
</ol>
<h3 id="修改-1">修改</h3>
<ul>
<li>update 修改谁 (条件) set原来的值=新值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学员名字,带了条件</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;whlll&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况下,会改动所有表！</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;长江七号&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;whlll&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;whlll0305lhl@gmail.com&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 set column_name = value[column_name=value,...] where [条件]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>条件：where子句 运算符 id等于某个值，大于某个值，在某个区间内修改...</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th>操作符</th>
<th>意义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr class="even">
<td>&lt;&gt; 或 !=</td>
<td>不等于</td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr class="odd">
<td>BETWEEN...and...</td>
<td>[...]闭合区间</td>
<td>[2,5]</td>
<td></td>
</tr>
<tr class="even">
<td>AND</td>
<td>与</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr class="odd">
<td>OR</td>
<td>或</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;银河舰队&#x27;</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;whlll&#x27;</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="语法-1">语法</h4>
<p><code>UPDATE 表名 set column_name = value[column_name=value,...] where [条件]</code></p>
<h4 id="注意事项-1">注意事项</h4>
<ul>
<li>column_name 是数据库的列，尽量带上```</li>
<li>条件，筛选条件，如果没有给定，则会修改所有的列</li>
<li>value，是一个具体的值，也可以是一个变量</li>
<li>多个设置的属性之间，使用英文逗号隔开</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE `student` <span class="keyword">SET</span> `birthday`<span class="operator">=</span><span class="built_in">CURRENT_TIME</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;银河舰队&#x27;</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除-1">删除</h3>
<ul>
<li>delete 命令</li>
</ul>
<h4 id="语法-2">语法</h4>
<p><code>delete from 表名 [where 条件]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除数据(避免这样写) 会全部删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>TRUNCATE 命令</li>
</ul>
<blockquote>
<p>作用：完全清空一个数据库表，表的结构和索引约束不会变！</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空 student 表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`</span><br></pre></td></tr></table></figure>
<h4 id="delete-和-truncate-区别">delete 和 TRUNCATE 区别</h4>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同
<ul>
<li>TRUNCATE 重新设置 自增列 计数器会归零</li>
<li>TRUNCATE 不会影响事务</li>
</ul></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试delete 和 TRUNCATE 区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`coll`) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`; <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test` <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></figure>
<p><strong>DELETE删除的问题，重启数据库，现象</strong> - INNODB 自增列会从1开始(存在内存中的，断电即失) - MyISAM 继续从上一个自增量开始(存在文件中的，断电不会丢失)</p>
<h2 id="dql查询数据重点">DQL查询数据(重点)</h2>
<h3 id="dql">DQL</h3>
<p><strong>(Data Query LANGUAGE:数据查询语言)</strong></p>
<ul>
<li>所有的查询操作都用它 Slect</li>
<li>简单的查询，复杂的查询它都做~</li>
<li>数据库中最核心的语言，最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生 SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentName` <span class="keyword">FROM</span> student; </span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 别名 给结果起一个名字 AS 可以给字段起别名 也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">AS</span> 学号,`StudentName` <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名&#x27;</span>,StudentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有的时候，列名字不是那么的好理解，起别名 AS (字段名 AS 别名)</p>
</blockquote>
<h4 id="语法-3">语法</h4>
<p><code>SELECT 字段... FROM 表</code></p>
<ul>
<li>去重 distinct</li>
<li>作用: 去除SELECT查询出来的结果中的重复数据，重复的数据只显示一条</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `StudnetNo` <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 发现重复数据 去重</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数据库的列(表达式)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION() <span class="comment">-- 查询系统版本(函数)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果 <span class="comment">-- 用来计算(计算表达式)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment <span class="comment">-- 查询自增的步长(变量)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员考试成绩 +1分 查看</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentResult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量...</p>
</blockquote>
<p><code>select 表达式 from 表</code></p>
<h3 id="where-条件子句">where 条件子句</h3>
<ul>
<li>作用: 检索数据中 符合条件 的值</li>
</ul>
<p><strong>搜索的条件由一个或多个表达式组成！ 结果 -&gt; 布尔值</strong></p>
<ul>
<li>逻辑运算符</li>
</ul>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>and &amp;&amp;</td>
<td>a and b</td>
<td>逻辑与</td>
</tr>
<tr class="even">
<td>or</td>
<td>a or b</td>
<td>逻辑或</td>
</tr>
<tr class="odd">
<td>Not !</td>
<td>not a</td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
<p><strong>尽量使用英文字母</strong></p>
<ul>
<li>模糊查询：比较运算符</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ==============where===============</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在 95-100 分之间的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;</span><span class="number">95</span> <span class="keyword">AND</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询 (区间)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号同学之外同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentNo<span class="operator">!=</span><span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- != not</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNo,`StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentNo <span class="operator">=</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Generator</title>
    <url>/2021/11/04/Mybatis-Generator/</url>
    <content><![CDATA[<p>MyBatis Generator (MBG) 是一个Mybatis的代码生成器</p>
<span id="more"></span>
<blockquote>
<p>他可以内省数据库的表（或多个表）然后生成可以用来访问（多个）表的基础对象。 这样和数据库表进行交互时不需要创建对象和配置文件。 MBG的解决了对数据库操作有最大影响的一些简单的CRUD（插入，查询，更新，删除）操作。 您仍然需要对联合查询和存储过程手写SQL和对象</p>
</blockquote>
<h2 id="mybatis-generator介绍">MyBatis Generator介绍</h2>
<p>MyBatis Generator 会生成:</p>
<ul>
<li><p>匹配表结构的Java POJO，可能包括:</p>
<ul>
<li>一个和表主键匹配的类(如果存在主键[注:只有联合主键会有])</li>
<li>一个包含了非主键字段的类(BLOB字段除外[注:单字段做主键时这里会包含])</li>
<li>一个包含了BLOB字段的类 (如果表包含了BLOB字段)</li>
<li>一个允许动态查询、更新和删除的类[注:指的是Example查询]</li>
</ul>
<p>这些类之间会有适当的继承关系。 请注意可以配置生成器来生成不同类型的 POJO 的层次结构。 例如，如果您愿意您可能会选择针对每个表生成一个单独的实体对象。</p></li>
<li><p>MyBatis/iBATIS 兼容 SQL 映射 XML 文件。MBG 在配置中为每个表简单的 CRUD 操作生成 SQL。 生成的 SQL 语句包括：</p>
<ul>
<li>insert (插入)</li>
<li>update by primary key (根据主键更新记录)</li>
<li>update by example (根据条件更新记录)</li>
<li>delete by primary key (根据主键删除记录)</li>
<li>delete by example (根据条件删除记录)</li>
<li>select by primary key (根据主键查询记录)</li>
<li>select by example (根据条件查询记录集)</li>
<li>count by example (根据条件查询记录总数)</li>
</ul>
<p>根据表的结构，生成的这些语句会有不同的变化（例如，如果表中没有主键，那么 MBG 将不会生成update by primary key方法）。</p></li>
<li><p>Java客户端类会适当的使用上面的对象，生成Java客户端类时可选的。 MBG会为MyBatis 3.x生成如下客户端类：</p>
<ul>
<li>一个可以和MyBatis 3.x一起使用的mapper接口类MBG会为iBATIS 2.x生成如下的客户端类：</li>
<li>符合 <a href="http://www.springframework.org/">Spring</a> 框架的DAO类。</li>
<li>只使用iBATIS SQL映射API的DAO。 这种DAO可以通过下面两种方式生成：提供<code>SqlMapClient</code>通过构造方法或者setter注入。</li>
<li>符合iBATIS DAO 框架的DAO (iBATIS可选的一部分，这一框架已经过时，我们建议您使用Spring框架替代)。</li>
</ul></li>
</ul>
<p>MyBatis generator 可以在迭代开发环境中良好的运行， 在持续的构建环境中作为一个ant任务或maven插件。 运行MBG时要记住以下重要的事：</p>
<ol type="1">
<li>MBG 会自动合并已经存在并且和新生成的文件重名的 XML。MBG 不会覆盖您对已经生成xml所做的修改。 您可以反复的运行而不必担心失去您自定义的更改。 MBG 将取代所有以前运行中生成的 XML 元素。</li>
<li>MBG <strong>不会</strong> 合并 Java 文件,他可以覆盖已经存在的文件或者保存新生成的文件为一个不同的唯一的名字。 您可以手动合并这些更改。 当您使用<a href="http://www.eclipse.org/">Eclipse</a> 插件时, MBG 可以自动合并 Java 文件.</li>
</ol>
<h3 id="依赖项">依赖项</h3>
<p>MBG依赖JRE,需要JRE6.0或以上版本。 此外，还有一个继承了DatabaseMetaData接口的JDBC驱动。 特别是<code>getColumns</code>和<code>getPrimaryKeys</code>两个方法时必须的。</p>
<h2 id="mybatis-generator-快速入门">MyBatis Generator 快速入门</h2>
<p>若要启动并快速运行 MyBatis Generator（MBG），请按以下步骤进行:</p>
<ol type="1">
<li><p>创建并填写适当的配置文件。 至少，您必须指定:</p>
<ol type="1">
<li><code>&lt;jdbcConnection&gt;</code> 元素定义如何连接目标数据库</li>
<li><code>&lt;javaModelGenerator&gt;</code> 元素来指定生成 Java 模型对象所属的包</li>
<li><code>&lt;sqlMapGenerator&gt;</code> 元素来指定生成 SQL 映射文件所属的包和的目标项目</li>
<li>(可选的) <code>&lt;javaClientGenerator&gt;</code> 元素来指定目标包和目标项目生成的客户端接口和类 （如果您不想生成 Java 客户端代码您可以省略<code>&lt; javaClientGenerator &gt;</code> 元素）</li>
</ol>
<p>查看 <a href="https://www.kancloud.cn/wizardforcel/java-opensource-doc/configreference/xmlconfig.html">XML 配置文件参考</a> 一个配置文件的例子.</p></li>
<li><p>将文件保存在一些方便的位置(例如 .xml)</p></li>
<li><p>按下面的方式从命令行运行 MBG:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar mybatis-generator-core-x.x.x.jar -configfile \temp\generatorConfig.xml -overwrite</span><br></pre></td></tr></table></figure>
<p>这会告诉 MBG 使用配置文件去运行。 MBG还会覆盖已经存在的同名Java文件。 如果您想保留已经存在的Java文件，您可以忽略 <code>-overwrite</code> 参数。 如果存在冲突, MBG 会用一个唯一的名字保存新生成的文件（例如：MyClass.java.1)。</p></li>
<li><p>MBG运行后, 您将需要创建或修改的标准 MyBatis 或 iBATIS 配置文件来使用新生成的代码。</p></li>
</ol>
<h2 id="使用java运行-mybatis-generator魔眼项目中">使用Java运行 MyBatis Generator(魔眼项目中)</h2>
<p>MyBatis Generator (MBG) 可以直接使用Java调用。 对于配置，您可以使用XML配置文件，或者完全使用Java进行配置。</p>
<h3 id="使用xml配置文件从java运行mbg">使用XML配置文件从Java运行MBG</h3>
<p>下面的代码例子展示了如何通过XML配置文件从Java运行MBG。 他不显示异常处理，但是编译错误是很明显的 :)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">&quot;generatorConfig.xml&quot;</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>配置文件属性可以通过 ConfigurationParser 的构造函数的参数传递给解析器。如果没有显式传递，配置文件的属性将会从JVM的系统属性搜索。 例如，属性 <code>generated.source.dir</code> 可以在配置文件中通过 <code>$&#123;generated.source.dir&#125;</code> 被访问。</li>
<li>如果没有指定配置文件中的一个属性，这个属性将会原样输出。</li>
</ul>
<h3 id="通过基于java的配置运行mgb">通过基于Java的配置运行MGB</h3>
<p>下面的代码例子展示了如何通过基于Java的配置运行MGB。 他不显示异常处理，但是编译错误是很明显的 :)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line"><span class="comment">//   ... fill out the config object as appropriate...</span></span><br><span class="line"></span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="mybatis-generator-xml-配置参考">MyBatis Generator XML 配置参考</h2>
<p>最常见的用例中，代码生成器(MBG)是由一个XML配置文件驱动。配置文件告诉MBG:</p>
<ul>
<li>如何连接到数据库</li>
<li>生成什么对象，以及如何生成它们</li>
<li>那些表生成对象</li>
</ul>
<p>下面是一个MBG配置文件的例子。查阅每个元素单独的页面查看更多有关元素的更多信息和属性值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;COM.ibm.db2.jdbc.app.DB2Driver&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:db2:TEST&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">&quot;db2admin&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">&quot;db2admin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;test.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;\MBGTestProject\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;test.xml&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;\MBGTestProject\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;test.dao&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;\MBGTestProject\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;DB2ADMIN&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;ALLTYPES&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Customer&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;DATE_FIELD&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">&quot;FRED&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;LONG_VARCHAR_FIELD&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有关此文件的重要说明:</p>
<ul>
<li>该文件指定旧式DB2 CLI驱动程序将用于连接到数据库，并指定在何处可以找到驱动程序。</li>
<li>Java类型解析器不应该强制型对象字段BigDecimal的使用，这意味着整数类型(短、整型、长等)如果可能的话将被取代。 此功能是为了使数据库DECIMAL和NUMERIC列容易处理。</li>
<li>Java模型生成器应该使用子包。 这意味着在这种情况下生成的模型对象将被放置在名为 <code>test.model.db2admin</code> 的包中（因为表在 DB2ADMIN schema中）。 如果 <code>enableSubPackages</code> 属性设置为 <code>false</code>， 那么包名将会是 <code>test.model</code>。 Java模型生成器也应该对字符串进行trim操作。 这意味着任何字符串属性的setter方法将调用trim方法 - 如果您的数据库可能会在字符末尾返回空白符，这是非常有用的。</li>
<li>SQL映射生成器将使用子包。这意味着这种情况下生成的XML文件将被放置在名为 <code>test.xml.db2admin</code> 的包中（因为表在 DB2ADMIN schema中）。 如果 <code>enableSubPackages</code> 属性设置为 <code>false</code>， 那么包名将会是 <code>test.xml</code>。</li>
<li>DAO生成器将使用子包。这意味着这种情况下生成的DAO类都会被放置在名为 <code>test.dao.db2admin</code> 的包中（因为表在 DB2ADMIN schema中）。 如果 <code>enableSubPackages</code> 属性设置为 <code>false</code>， 那么包名将会是 <code>test.dao</code>。 DAO生成器会生成一些引用Mybatis XML配置的mapper接口。</li>
</ul>
<h3 id="classpathentry元素"><code>&lt;classPathEntry&gt;</code>元素</h3>
<p><code>&lt;classPathEntry&gt;</code> 元素 用于添加运行类路径位置到类路径中的 MyBatis Generator（MBG）。 <code>&lt;classPathEntry&gt;</code> 元素是 <code>&lt;generatorConfiguraion&gt;</code> 的子元素. MBG 在这些情况下从这些路径下加载类:</p>
<ul>
<li>当加载 JDBC 驱动内省数据库时</li>
<li>当加载根类中的 JavaModelGenerator 检查重写的方法时</li>
</ul>
<p>这个元素是可选的，而且如果您给MGB安装了类路径，您就不需要这个元素(例如 使用<code>java</code>命令时使用参数<code>-cp</code>)。</p>
<p><strong>重要说明:</strong> 加载扩展一个 MBG 的类或实现 MBG 的接口之一的类时，不会使用这些位置。 在这种情况下，您必须以相同的方式将 MBG 添加到运行时的类路径下(例如 使用<code>java</code>命令时使用参数<code>-cp</code>)。</p>
<h4 id="必选属性">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">location</td>
<td style="text-align: left;">要添加到类路径中的 JAR/ZIP 文件的完整路径名称或要添加到类路径中的目录。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性">可选属性</h4>
<p>无</p>
<h4 id="子元素">子元素</h4>
<p>无</p>
<h4 id="例子">例子</h4>
<p>这里指定了DB2 JDBC驱动的路径:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="columnoverride-元素"><code>&lt;columnOverride&gt;</code> 元素</h3>
<p>MyBatis Generator (MBG) 使用 <code>&lt;columnOverride&gt;</code> 元素从将某些属性默认计算的值更改为内省数据库列得的值。 这个元素是 <code>&lt;table&gt;</code>元素可选的一个子元素。</p>
<h4 id="必选属性-1">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">column</td>
<td style="text-align: left;">要内省的列名</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-1">可选属性</h4>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">property</td>
<td style="text-align: left;">要使用的 Java 属性的名称。如果没有指定，MBG会根据列名生成。 例如，如果一个表的一列名为"STRT_DTE"， MBG会根据"useActualColumnNames"属性(查看 <code>&lt;table&gt;</code> 的属性获取更多的信息) 生成"STRT_DTE" 或 "strtDte"。</td>
</tr>
<tr class="even">
<td style="text-align: left;">javaType</td>
<td style="text-align: left;">该列属性的完全限定的 Java 类型。如果需要，这可以覆盖由 <code>JavaTypeResolver</code> 计算出的类型。 对某些数据库来说， 这是必要的用来处理“奇怪的”数据库类型（例如 MySql 的 unsigned bigint 类型需要映射为 java.lang.Object)。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">jdbcType</td>
<td style="text-align: left;">该列的 JDBC 类型 (INTEGER, DECIMAL, NUMERIC, VARCHAR 等等)。 如果需要，这可以覆盖由 <code>JavaTypeResolver</code> 计算出的类型。 对某些数据库来说，这是必要的用来处理怪异的 JDBC 驱动 (例如 DB2 的 LONGVARCHAR 类型需要为iBATIS 映射为 VARCHAR)。</td>
</tr>
<tr class="even">
<td style="text-align: left;">typeHandler</td>
<td style="text-align: left;">用户定义的需要用来处理这列的类型处理器。 它必须是一个继承iBATIS的 <code>TypeHandler</code> 类或 <code>TypeHandlerCallback</code>接口（该接口很容易继承） 的全限定的类名。 如果没有指定或者是空白，iBATIS会用默认的类型处理器来处理类型。 <strong>重要:</strong> MBG 不会校验这个类型处理器是否存在或者可用。 MGB只是简单的将这个值插入到生成的SQL映射的配置文件中。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">delimitedColumnName</td>
<td style="text-align: left;">指定是否应在生成的 SQL 分隔的列名称。 如果列的名称中包含空格，MGB会自动的分割列名， 所以这个重写只有当列名需要强制为一个合适的名字或者列名是数据库中的保留字时是必要的。当设置为 "true" 是, <code>column</code> 属性用于重写必须匹配从数据库返回的列名。分隔符指定在 <code>&lt;context&gt;</code> 元素上。<em>默认值是false。然而MGB会自动分割包含空格的列名，所以在这种情况下不需要重写。</em></td>
</tr>
</tbody>
</table>
<h4 id="子元素-1">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N) 注：在此处定义的任何属性都会被加入相应的内省列的属性集合中。 MBG目前不响应任何属性。 此元素被设置使得对于每一列的特殊值，可以在该插件被编码， 以产生或修改一些独特的特定列中的事件被提供给插件。</li>
</ul>
<h3 id="columnrenamingrule-元素"><code>&lt;columnRenamingRule&gt;</code> 元素</h3>
<p>MyBatis Generator (MBG) 使用 <code>&lt;columnRenamingRule&gt;</code> 元素处理在内省表 中相应的属性名之前重命名数据库列。 这对那些存在同一前缀的字段想在生成属性名时去除前缀的表非常有用。 例子，假设一个表包含以下的列：</p>
<ul>
<li>CUST_BUSINESS_NAME</li>
<li>CUST_STREET_ADDRESS</li>
<li>CUST_CITY</li>
<li>CUST_STATE</li>
</ul>
<p>生成的所有属性名中如果都包含 CUST的前缀可能会让人不爽。这些前缀可以通过如下方式定义重命名规则:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">columnRenamingRule</span> <span class="attr">searchString</span>=<span class="string">&quot;^CUST_&quot;</span> <span class="attr">replaceString</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，在内部，MBG使用<code>java.util.regex.Matcher.replaceAll</code>方法实现这个功能。 请参阅有关该方法的文档和在Java中使用正则表达式的例子。</p>
<p>当 <code>&lt;columnOverride&gt;</code> 匹配一列时，这个元素（<code>&lt;columnRenamingRule&gt;</code>）会被忽略。 <code>&lt;columnOverride&gt;</code>优先于重命名的规则。</p>
<p>如果指定该选项，重命名规则会在生成属性名前替换列名。 计算出的属性名可能不同，这取决于 <code>&lt;table&gt;</code> 元素上的 "useActualColumnNames"属性。 下表显示了如果重命名规则用于字段集上时不同的值:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">列名</th>
<th style="text-align: left;">属性 useActualColumnNames="true"</th>
<th style="text-align: left;">属性 useActualColumnNames="false"</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">CUST_BUSINESS_NAME</td>
<td style="text-align: left;">BUSINESS_NAME</td>
<td style="text-align: left;">businessName</td>
</tr>
<tr class="even">
<td style="text-align: left;">CUST_STREET_ADDRESS</td>
<td style="text-align: left;">STREET_ADDRESS</td>
<td style="text-align: left;">streetAddress</td>
</tr>
<tr class="odd">
<td style="text-align: left;">CUST_CITY</td>
<td style="text-align: left;">CITY</td>
<td style="text-align: left;">city</td>
</tr>
<tr class="even">
<td style="text-align: left;">CUST_STATE</td>
<td style="text-align: left;">STATE</td>
<td style="text-align: left;">state</td>
</tr>
</tbody>
</table>
<p>这个元素是 <code>&lt;table&gt;</code> 元素的一个可选的子元素。</p>
<h4 id="必选属性-2">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">searchString</td>
<td style="text-align: left;">定义将被替换的子字符串的正则表达式。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-2">可选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">replaceString</td>
<td style="text-align: left;">这是一个用来替换搜索字符串列每一个匹配项的字符串。如果没有指定，就会使用空字符串。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-2">子元素</h4>
<p>无</p>
<h3 id="commentgenerator元素"><code>&lt;commentGenerator&gt;</code>元素</h3>
<p><code>&lt;commentGenerator&gt;</code> 元素用来定义注释生成器的属性。 注释生成器用来给由 MyBatis Generator (MBG) 生成的多种元素（Java自动，Java方法，XML元素等等）生成注释。 默认的注释生成器将 JavaDoc 注释添加到所有生成的Java元素上，从而使Eclipse插件可以使用合并Java的功能。 此外，注释还会添加到每一个生成的XML元素。 注释的目的还在于告诉用户这个元素是生成的，并且有可能重新生成（也就是说 - 他们不应该被修改）。 这个元素是 <code>context</code> 元素的一个可选的子元素。</p>
<p>默认的实现类是 <code>org.mybatis.generator.internal.DefaultCommentGenerator</code>。 如果您只想修改某些行为，默认的实现类专门为扩展进行设计。</p>
<h4 id="必选属性-3">必选属性</h4>
<p>无</p>
<h4 id="可选属性-3">可选属性</h4>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">type</td>
<td style="text-align: left;">使用用户指定提供的注释生成器类型。 这个类必须继承<code>org.mybatis.generator.api.CommentGenerator</code>接口。 而且必须有一个默认的构造函数。 这个属性接收指定特殊的值 DEFAULT，这将会使用默认的实现类（这和不指定该属性的效果一样）。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-3">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N)</li>
</ul>
<h4 id="支持的属性">支持的属性</h4>
<p>这个表格列出了注释生成器中所有可以通过 <code>&lt;property&gt;</code> 子元素进行设置的属性：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性名</th>
<th style="text-align: left;">属性值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">suppressAllComments</td>
<td style="text-align: left;">这个属性用来指定MBG生成的代码中是否包含任何注释。 这个属性有以下可选值：</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">false <em>这是默认值</em> 当这个属性是false或者没有指定时，所有生成的元素都会包含用来说明这是生成元素的注释。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">true 当这个属性是true时，不会往生成的元素中添加任何注释。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;"><strong>警告:</strong> 如果您将这个值设为true，那么所有的代码合并都会被禁用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">suppressDate</td>
<td style="text-align: left;">这个元素用来指定生成的注释中是否包含生成的日期。 这个属性有以下可选值：</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">false <em>这是默认值</em> 当这个属性是false或者没有指定时，所有元素生成注释时都会带着生成时间。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">true 当这个属性是true时，注释中不会添加时间戳。</td>
</tr>
</tbody>
</table>
<h4 id="示例">示例</h4>
<p>这个元素指定了我们不希望生成的注释中包含时间戳:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="context-元素"><code>&lt;context&gt;</code> 元素</h3>
<p><code>&lt;context&gt;</code> 元素用于指定生成一组对象的环境。 子元素用于指定要连接到的数据库、 要生成对象的类型和要内省的表。 多个 <code>&lt;context&gt;</code> 元素可以在 <code>&lt;generatorConfiguration&gt;</code> 元素中列出来，这样可以在同一个MyBatis Generator (MBG)从不同的数据库或者使用不同的生成生成器参数生成对象。</p>
<h4 id="必选属性-4">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">id</td>
<td style="text-align: left;">context唯一的标识符。此值将用于某些错误消息。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-4">可选属性</h4>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 73%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">defaultModelType</td>
<td style="text-align: left;">这个属性用来设置生成对象类型的默认值。 对象类型定义了MBG如何生成实体类。 对某些对象类型，MBG会给每一个表生成一个单独的实体类。 对另外一些对象类型，MBG会根据表结构生成不同的类。这个属性有以下可选值：</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">conditional <em>这是默认值</em> 这个模型和hierarchical类似，除了如果那个单独的类将只包含一个字段，将不会生成一个单独的类。 因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">flat 该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">hierarchical 如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系（注：BLOB类 继承 其他字段类 继承 主键类）。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">targetRuntime</td>
<td style="text-align: left;">此属性用于指定生成的代码的运行时目标。 该属性支持这些特殊的值：</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">MyBatis3 <em>这是默认值</em> 使用这值的时候，MBG会生成兼容MyBatis 3.0或更高版本， 兼容JSE 5.0或更高版本的对象（例如Java模型类和Mapper接口会使用泛型）。 这些生成对象中的"by example"方法将支持几乎不受限制的动态的where子句。 另外，这些生成器生成的Java对象支持JSE 5.0特性，包含泛型和注解。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">MyBatis3Simple <em>这是默认值</em> 使用这值的时候，和上面的MyBatis3类似，但是不会有"by example"一类的方法，只有少量的动态SQL。 Ibatis2Java2 使用这值的时候，MBG会生成兼容iBATIS 2.2.0或更高版本（除了iBATIS 3），还有Java2的所有层次。 这些生成对象中的"by example"方法将支持几乎不受限制的动态的where子句。 这些生成的对象不能100%和原生的Abator或其他的代码生成器兼容。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">Ibatis2Java5 使用这值的时候，MBG会生成兼容iBATIS 2.2.0或更高版本（除了iBATIS 3）， 兼容JSE 5.0或更高版本的对象（例如Java模型类和Dao类会使用泛型）。 这些生成对象中的"by example"方法将支持几乎不受限制的动态的where子句。 另外，这些生成器生成的Java对象支持JSE 5.0特性，包含泛型和注解。 这些生成的对象不能100%和原生的Abator或其他的代码生成器兼容。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">如果您想创建一个完全不同的代码生成器， 使用一个继承了<code>org.mybatis.generator.api.IntrospectedTable</code>类的权限定类名替换该值。 通过这个值，您可以创建您自己的代码生成器，然后插入到代码生成器引擎中。 查阅 <a href="https://www.kancloud.cn/wizardforcel/reference/extending.html">扩展 MyBatis Generator</a> 页面获取更多信息。</td>
</tr>
<tr class="even">
<td style="text-align: left;">introspectedColumnImpl</td>
<td style="text-align: left;">使用这个值去指定一个继承了<code>org.mybatis.generator.api.IntrospectedColumn</code>类的权限定名称。 这可以修改代码生成器计算列信息时候的行为。 查阅 <a href="https://www.kancloud.cn/wizardforcel/reference/extending.html">扩展 MyBatis Generator</a> 页面获取更多信息。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-4">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N)</li>
<li><code>&lt;plugin&gt;</code> (0..N)</li>
<li><code>&lt;commentGenerator&gt;</code> (0 or 1)</li>
<li><code>&lt;jdbcConnection&gt;</code> (1 Required)</li>
<li><code>&lt;javaTypeResolver&gt;</code> (0 or 1)</li>
<li><code>&lt;javaModelGenerator&gt;</code> (1 Required)</li>
<li><code>&lt;javaMapGenerator&gt;</code> (0 or 1)</li>
<li><code>&lt;javaClientGenerator&gt;</code> (0 or 1)</li>
<li><code>&lt;table&gt;</code> (1..N)</li>
</ul>
<h4 id="支持的属性-1">支持的属性</h4>
<p>下面的表格列出了所有可用的 <code>&lt;property&gt;</code>子元素:</p>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性名</th>
<th style="text-align: left;">属性值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">autoDelimitKeywords</td>
<td style="text-align: left;">如果是true，那么MGB会分隔SQL关键字，如果他们被用作表中的列名。 MBG维护了许多不同数据库的SQL关键字列表。 然而，列表可能不是非常的全面。 如果一个特殊的关键字没有在MBG的关键字列表中， 您需要通过<code>&lt;columnOverride&gt;</code>强制分隔列。查看 <code>org.mybatis.generator.internal.db.SqlReservedWords</code> 这个类的源码查看MGB包含的关键字列表。<em>默认值是false。</em></td>
</tr>
<tr class="even">
<td style="text-align: left;">beginningDelimiter</td>
<td style="text-align: left;">要用作需要分隔符的 SQL 标识符开头的标识符分隔符的值。 MBG会自动分割包含空格的SQL标识符。 MGB还会自动分隔在 <code>&lt;table&gt;</code> 或 <code>&lt;columnOverride&gt;</code>中配置了具体要求的标识符。<em>默认值是双引号 (")。</em></td>
</tr>
<tr class="odd">
<td style="text-align: left;">endingDelimiter</td>
<td style="text-align: left;">要使用作为结束的标识符分隔符需要分隔符的 SQL 标识符的值。 MBG会自动分割包含空格的SQL标识符。 MGB还会分隔在 <code>&lt;table&gt;</code> 或 <code>&lt;columnOverride&gt;</code>中配置了具体要求的标识符。<em>默认值是双引号 (")。</em></td>
</tr>
<tr class="even">
<td style="text-align: left;">javaFileEncoding</td>
<td style="text-align: left;">通过这个属性设置要使用的Java文件的编码。 新生成的Java文件会用这个编码写入到文件系统。 如果Java文件已经存在并且可以使用这个编码进行读取，就会执行合并操作。 如果没有指定，就会使用平台的默认编码。查阅 <code>java.nio.charset.Charset</code> 获取可以选择的编码的信息。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">javaFormatter</td>
<td style="text-align: left;">使用此属性来指定生成的 Java 文件的用户提供 formater 的完整的类名称。 这个类必须继承 <code>org.mybatis.generator.api.JavaFormatter</code> 而且必须有一个默认（不含参数）的构造方法。 每一个context都持有一个单独的javaFormatter的实例。 默认的javaFormatter是 <code>org.mybatis.generator.api.dom.DefaultJavaFormatter</code>。 默认的格式使用内置到Java DOM类的格式。</td>
</tr>
<tr class="even">
<td style="text-align: left;">xmlFormatter</td>
<td style="text-align: left;">使用此属性来指定生成的 XML 文件的用户提供 formater 的完整的类名称。 这个类必须继承 <code>org.mybatis.generator.api.XmlFormatter</code> 而且必须有一个默认（不含参数）的构造方法。 每一个context都持有一个单独的xmlFormatter的实例。 默认的xmlFormatter是 <code>org.mybatis.generator.api.dom.DefaultXmlFormatter</code>。 默认的格式使用内置到Java DOM类的格式。</td>
</tr>
</tbody>
</table>
<h3 id="generatedkey-元素"><code>&lt;generatedKey&gt;</code> 元素</h3>
<p><code>&lt;generatedKey&gt;</code> 元素用来指定自动生成主键的属性（identity字段或者sequences序列）。 如果指定了这个元素，MyBatis Generator (MBG)会在生成insert的SQL映射文件中插入一个合适的 <code>&lt;selectKey&gt;</code> 元素。 这个元素是 <code>&lt;table&gt;</code> 元素的一个可选的子元素。</p>
<h4 id="必选属性-5">必选属性</h4>
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">column</td>
<td style="text-align: left;">生成列的列名。</td>
</tr>
<tr class="even">
<td style="text-align: left;">sqlStatement</td>
<td style="text-align: left;">将返回新值的 SQL 语句。如果这是一个identity列，您可以使用其中一个预定义的的特殊值。 或者为您的数据库使用一个合适的语句。 预先定义好的特殊值如下:</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">Cloudscape 这将转化为: <code>VALUES IDENTITY_VAL_LOCAL()</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">DB2 这将转化为: <code>VALUES IDENTITY_VAL_LOCAL()</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">DB2_MF 这将转化为:<code>SELECT IDENTITY_VAL_LOCAL()               | |              | FROM SYSIBM.SYSDUMMY1</code>为运行在zOS（主框架）或者有些情况是iSeries (AS/400)上的DB2数据库使用该值</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">Derby 这将转化为: <code>VALUES IDENTITY_VAL_LOCAL()</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">HSQLDB 这将转化为: <code>CALL IDENTITY()</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">Informix 这将转化为: <code>select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">MySql 这将转化为: <code>SELECT LAST_INSERT_ID()</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">SqlServer 这将转化为: <code>SELECT SCOPE_IDENTITY()</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">SYBASE 这将转化为: <code>SELECT @@IDENTITY</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">JDBC 这会配置MBG使用MyBatis3支持的JDBC标准的生成key来生成代码。 这是一个独立于数据库获取标识列中的值的方法。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;"><strong>重要:</strong> 只有当目标运行为MyBatis3时才会产生正确的代码。 如果与iBATIS2一起使用目标运行时会产生运行时错误的代码。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-5">可选属性</h4>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">identity</td>
<td style="text-align: left;">当设置为 <code>true</code> 时,该列会被标记为identity列， 并且 <code>&lt;selectKey&gt;</code> 元素会被插入在insert后面。 当设置为 <code>false</code> 时， <code>&lt;selectKey&gt;</code> 会插入到insert之前（通常是序列）。<strong>重要:</strong> 即使您 <code>type</code> 属性指定为"post"， 您仍然需要为 identity 列将该参数设置为 "true"。 这将标志MBG从插入列表中删除该列。默认值是 <em>false</em>.</td>
</tr>
<tr class="even">
<td style="text-align: left;">type</td>
<td style="text-align: left;">如果指定，则此值将被添加为生成selectKey元素的类型。 此属性的值应该是"pre"或"post"。<strong>重要:</strong> 如果指定此属性的值，然后生成selectKey元素将永远被放置在insert语句之前。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-5">子元素</h4>
<p>无</p>
<h3 id="generatorconfiguration-元素"><code>&lt;generatorConfiguration&gt;</code> 元素</h3>
<p><code>&lt;generatorConfiguration&gt;</code> 元素是MyBatis Generator配置的根元素。这个文件必须包含下面的 DOCTYPE:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="必选属性-6">必选属性</h4>
<p>无</p>
<h4 id="可选属性-6">可选属性</h4>
<p>无</p>
<h4 id="子元素-6">子元素</h4>
<h3 id="ignorecolumn-元素"><code>&lt;ignoreColumn&gt;</code> 元素</h3>
<p><ignoreColumn>元素用来告诉 MyBatis Generator (MBG) 忽略一个表中的列。 生成的SQL不会使用该列，而且生成的模型对象中将不包含该列。 这个元素是 <code>&lt;table&gt;</code> 元素的一个可选的子元素。</p>
<h4 id="必选属性-7">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">column</td>
<td style="text-align: left;">被忽略的列名。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-7">可选属性</h4>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">delimitedColumnName</td>
<td style="text-align: left;">当匹配对从数据库中返回的列时，如果为真，则MBG将执行区分大小写完全匹配。 如果为false(默认值)，则被认为是不区分大小写的名称。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-7">子元素</h4>
<p>无</p>
<h3 id="javaclientgenerator-元素"><code>&lt;javaClientGenerator&gt;</code> 元素</h3>
<p><code>&lt;javaClientGenerator&gt;</code> 元素用于定义 Java 客户端代码生成器的属性。 Java客户端生成器生成Java接口和类，它可以简单地使用生成的Java模型和XML映射文件。 在iBATIS2目标环境中，这些对象可以生成DAO接口和实现类形式的代码。 对Mybatis来说，会生成Mapper接口形式的代码。 这个元素是 <code>&lt;context&gt;</code> 元素的一个可选的子元素。 如果不指定此元素，然后代码生成器(MBG)将不会生成Java客户端接口和类</p>
<h4 id="必选属性-8">必选属性</h4>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 82%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">type</td>
<td style="text-align: left;">此属性用于选择一个预定义的Java客户端的生成器，或指定用户提供的Java客户端生成器。 任何用户提供的DAO生成器必须继承 <code>org.mybatis.generator.codegen.AbstractJavaClientGenerator</code> 类, 必须有一个公开默认的构造函数。该属性接收下列预定义的代码生成器之一:</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">如果<code>&lt;context&gt;</code> targetRuntime 是 <strong>MyBatis3</strong>:</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">ANNOTATEDMAPPER 生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将会基于注解和 MyBatis 3.x SqlProviders。不会有XML文件生成。（注：就是纯接口使用注解的形式，不会有XML文件）ANNOTATEDMAPPER 依赖 MyBatis 3.0.4 或更高版本。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">MIXEDMAPPER 生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将基于注解和XML的混合形式。 注解将会用在简单注解可以实现的地方。 此客户端不会生成SqlProvider，所有复杂的动态SQL都会生成在XML中。The MIXEDMAPPER 依赖 MyBatis 3.0.4 或更高版本。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">XMLMAPPER 生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将会依赖于生成的XML文件。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">如果 <code>&lt;context&gt;</code> targetRuntime 是 <strong>MyBatis3Simple</strong>:</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">ANNOTATEDMAPPER 生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将会基于注解和 MyBatis 3.x SqlProviders。不会有XML文件生成。（注：就是纯接口使用注解的形式，不会有XML文件）The ANNOTATEDMAPPER 依赖 MyBatis 3.0.4 或更高版本。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">XMLMAPPER 生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将会依赖于生成的XML文件。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">如果 <code>&lt;context&gt;</code> targetRuntime 是 <strong>Ibatis2Java2</strong> or <strong>Ibatis2Java5</strong>:</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">IBATIS 生成的对象将符合（不建议使用）iBATIS的DAO框架。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">GENERIC-CI 生成的对象将只依赖于SqlMapClient。SqlMapClient将会通过构造参数依赖注入提供。 生成的对象将是DAO接口和实现类的形式。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">GENERIC-SI 生成的对象将只依赖于SqlMapClient。SqlMapClient将会通过setter方法依赖注入提供。 生成的对象将是DAO接口和实现类的形式。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">SPRING 生成的对象将符合Spring的DAO框架。</td>
</tr>
<tr class="even">
<td style="text-align: left;">targetPackage</td>
<td style="text-align: left;">这个包用于放置生成的接口和实现类。 在默认的生成器中，属性"enableSubPackages"用来控制如何计算实际的包。 如果是true，如果表的catalog和schema存在，就将他们作为子包加起来。 如果"enableSubPackages"是false（默认值），计算的package将是targetPackage属性指定的值。 MBG 将创建所需的生成包的文件夹。<strong>注:</strong> 实现类的包可以通过指定下面会提到的可选的 <code>implementationPackage</code> 属性。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">targetProject</td>
<td style="text-align: left;">这用来指定生成接口和类的目标项目。 当在Eclipse环境中运行时，此选项指定保存对象的位置的项目和源文件夹。 在其他环境中，此值应为本地文件系统上的现有目录。 如果它不存在，MBG不会创建它。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-8">可选属性</h4>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">implementationPackage</td>
<td style="text-align: left;">如果指定了该属性，实现类就会生成在这个包中。 在默认的生成器中，属性"enableSubPackages"用来控制如何计算实际的包。 如果是true，如果表的catalog和schema存在，就将他们作为子包加起来。 如果"enableSubPackages"是false（默认值），计算的package将是targetPackage属性指定的值。 MBG 将创建所需的生成包的文件夹。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-8">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N)</li>
</ul>
<h4 id="支持的属性-2">支持的属性</h4>
<p>这个表格列出了所有可以通过 <code>&lt;property&gt;</code> 子元素进行设置的属性：</p>
<table>
<colgroup>
<col style="width: 27%" />
<col style="width: 72%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性名</th>
<th style="text-align: left;">属性值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">enableSubPackages</td>
<td style="text-align: left;">这个属性用来选择MGB是否根据基于目录和内省表来生成不同的Java包。例如，假设某个表MYTABLE在MYSCHMA的schema中，也假设targetPackage属性的值设置为"com.mycompany"。 如果此属性为true，为这个表生成的DAO接口和类将被放置在包"com.mycompany.myschema"中。 如果此属性是false，生成的SQL映射将被放在"com.mycompany" schema中。<em>默认值是 false</em></td>
</tr>
<tr class="even">
<td style="text-align: left;">exampleMethodVisibility</td>
<td style="text-align: left;">此属性用来设置不同"ByExample"方法的可见性 - selectByExample, deleteByExample等等。 如果没有指定，这些方法将会是公开的的，并将在接口中声明。 此属性使您可以隐藏这些方法如果您只想使用它们来执行其他专门的方法。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">public <em>这是默认值</em> 生成实现类中的方法将是公开的，并将该接口中声明的方法。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">private 生成实现类中的方法将是private的，也不会在接口中声明。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">protected 生成实现类中的方法将是protected的，也不会在接口中声明。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">default 生成实现类中的方法将是包内可见的，也不会在接口中声明。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;"><strong>重要提示:</strong> 如果目标运行时是MyBatis3，则将忽略此属性。</td>
</tr>
<tr class="even">
<td style="text-align: left;">methodNameCalculator</td>
<td style="text-align: left;">此属性用于选择一个方法名称计算器。 方法名称计算器可以用来为DAO方法提供不同的名称。 您可以选择一个预定义的值。 如果提供的选项都适合您的环境， 也可以指定一个实现了<code>org.mybatis.generator.api.DAOMethodNameCalculator</code>接口的 完全限定名称。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">default <em>这是默认值</em> 生成的方法名称会很简单("insert", "updateByPrimaryKey"等等)。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">extended 生成的方法名称将包括与方法关联的实体对象的名称("insertWidget", "updateWidgetByPrimaryKey"等等)。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;"><strong>重要提示:</strong> this property is ignored if the target runtime is MyBatis3.</td>
</tr>
<tr class="even">
<td style="text-align: left;">rootInterface</td>
<td style="text-align: left;">此属性用于指定一个所有生成的接口都继承的父接口。 这个值可以通过表配置的 <code>rootInterface</code> 属性覆盖。<strong>重要:</strong> MBG 不验证接口是否存在或者是否是一个有效的接口。如果指定，这个属性值应该是一个全限定接口名称(例如 com.github.abel533.mapper.Mapper)。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">useLegacyBuilder</td>
<td style="text-align: left;">如果为true，那么客户端将使用SqlBuilder为MyBatis生成动态SQL。 在MyBatis 3.2或以后版本，这个SqlBuilder废弃了，用了一个新的SQL类替代。 如果是false，MBG会使用新的SQL生成器生成客户端代码。<em>默认值是 false</em></td>
</tr>
</tbody>
</table>
<h4 id="示例-1">示例</h4>
<p>此元素指定我们总希望生成的接口和对象在"text.model'包中，并且我们希望使用基于schema和catalog的子包。 它还指定了我们想使用为MyBatis3的XML配置文件的mapper接口。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;test.model&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">targetProject</span>=<span class="string">&quot;\MyProject\src&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="jdbcconnection-元素"><code>&lt;jdbcConnection&gt;</code> 元素</h3>
<p><code>&lt;jdbcConnection&gt;</code> 元素用于指定数据库连接所需的内省表的属性。 MyBatis Generator 使用JDBC的数据库元数据类来发现您在配置中指定的属性表。 每一个 <code>&lt;context&gt;</code> 都必须有一个<code>&lt;jdbcConnection&gt;</code>元素。</p>
<h4 id="必选属性-9">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">driverClass</td>
<td style="text-align: left;">用于访问数据库的JDBC驱动程序的完全限定类名称。</td>
</tr>
<tr class="even">
<td style="text-align: left;">connectionURL</td>
<td style="text-align: left;">用于访问数据库的JDBC连接URL。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-9">可选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">userId</td>
<td style="text-align: left;">访问数据库的用户ID。</td>
</tr>
<tr class="even">
<td style="text-align: left;">password</td>
<td style="text-align: left;">访问数据库的密码。</td>
</tr>
</tbody>
</table>
<h4 id="子元素-9">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N) 注意: 这里指定的任何属性将添加到JDBC驱动程序的属性中。</li>
</ul>
<h4 id="示例-2">示例</h4>
<p>此元素将连接到DB2数据库配置为MBGTEST在DB2客户端配置实用程序。 使用JDBC驱动程序的默认安装位置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;COM.ibm.db2.jdbc.app.DB2Driver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:db2:MBGTEST&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">userId</span>=<span class="string">&quot;db2admin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">password</span>=<span class="string">&quot;db2admin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="plugin-元素"><code>&lt;plugin&gt;</code> 元素</h3>
<p><code>&lt;plugin&gt;</code> 元素用来定义一个插件。插件用于扩展或修改通过MyBatis Generator (MBG)代码生成器生成的代码。 这是 <code>&lt;context&gt;</code> 元素的一个子元素。 可以在context指定任意数量的插件。插件将在配置中配置的顺序执行。</p>
<p>有关执行插件的详细信息，请参阅 <a href="https://www.kancloud.cn/wizardforcel/reference/pluggingIn.html">Implementing Plugins</a> 页面的引用。</p>
<p>有关MyBatis Generator提供的插件代码生成器的详细信息，请参阅 <a href="https://www.kancloud.cn/wizardforcel/reference/plugins.html">Supplied Plugins</a>提供参考页。</p>
<h4 id="必选属性-10">必选属性</h4>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">type</td>
<td style="text-align: left;">实现该接口的类的完全限定名的插件。该类必须实现该接口 <code>org.mybatis.generator.api.Plugin</code>, 必须有一个公开默认的构造函数。注意，继承 <code>org.mybatis.generator.api.PluginAdapter</code> 这个适配器类比继承接口更容易扩展。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-10">可选属性</h4>
<p>无</p>
<h4 id="子元素-10">子元素</h4>
<p>无</p>
<h3 id="properties-元素"><code>&lt;properties&gt;</code> 元素</h3>
<p><code>&lt;properties&gt;</code> 元素用于指定一个需要在配置中解析使用的外部属性文件。 属性配置中的任何属性将接受 <code>$&#123;property&#125;</code> 这种形式的属性。 从指定的属性文件中搜索匹配的值，配置的值将会被替换。 属性文件时正常的Java属性文件的格式。</p>
<p><code>&lt;properties&gt;</code>元素是 <code>&lt;generatorConfiguration&gt;</code> 元素的子元素。</p>
<h4 id="必选属性-11">必选属性</h4>
<p>以下属性是必需的，并且只能有其中一个。</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">resource</td>
<td style="text-align: left;">属性文件的全限定名称。当指定了resource属性，将会从classpath下面搜索属性文件。 当指定为 <code>com/myproject/generatorConfig.properties</code> 时，他必须存在 <code>com.myproject</code> 包下面。</td>
</tr>
<tr class="even">
<td style="text-align: left;">url</td>
<td style="text-align: left;">属性文件的URL值。这可以用于指定一个属性文件在文件系统上的特定位置，例如 <code>file:///C:/myfolder/generatorConfig.properties</code>。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-11">可选属性</h4>
<p>无</p>
<h4 id="子元素-11">子元素</h4>
<p>无</p>
<h3 id="property-元素"><code>&lt;property&gt;</code> 元素</h3>
<p><code>&lt;property&gt;</code> 元素用于指定许多其他元素的属性。 每个支持属性元素的文档页面列出的不同值都是有效的。 此元素也可以用于将属性传递给您的任何自定义的代码生成器执行。</p>
<h4 id="必选属性-12">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">name</td>
<td style="text-align: left;">属性的名称(区分大小写)。</td>
</tr>
<tr class="even">
<td style="text-align: left;">value</td>
<td style="text-align: left;">属性的值(通常是不区分大小写)。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-12">可选属性</h4>
<p>无</p>
<h4 id="子元素-12">子元素</h4>
<p>无</p>
<h3 id="sqlmapgenerator-元素"><code>&lt;sqlMapGenerator&gt;</code> 元素</h3>
<p><code>&lt;sqlMapGenerator&gt;</code> element 用于定义SQL映射生成器的属性。 SQL映射生成器为每一个内省的表生成MyBatis/iBATIS形式的XML文件。</p>
<p>如果目标是iBATIS2，那么这个元素是 <code>&lt;context&gt;</code> 元素的一个必须的子元素。</p>
<p>如果目标是MyBatis3，那么只有当您选择javaClientGenerator需要XML时，他才是 <code>&lt;context&gt;</code> 元素的一个必须的子元素。</p>
<p>如果不指定一个javaClientGenerator，则适用以下规则:</p>
<ul>
<li>如果您指定一个sqlMapGenerator，那么MBG将只生成SQL映射的XML文件和模型对象。</li>
<li>如果您没有指定一个sqlMapGenerator，那么MBG将只会生成模型对象。</li>
</ul>
<h4 id="必选属性-13">必选属性</h4>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 82%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">targetPackage</td>
<td style="text-align: left;">这个包用于放置生成的SQL映射文件。 在默认的生成器中，属性"enableSubPackages"用来控制如何计算实际的包。 如果是true，如果表的catalog和schema存在，就将他们作为子包加起来。 如果"enableSubPackages"是false（默认值），计算的package将是targetPackage属性指定的值。 MBG 将创建所需的生成包的文件夹。</td>
</tr>
<tr class="even">
<td style="text-align: left;">targetProject</td>
<td style="text-align: left;">这用来指定生成SQL映射的目标项目。 当在Eclipse环境中运行时，此选项指定保存对象的位置的项目和源文件夹。 在其他环境中，此值应为本地文件系统上的现有目录。 如果它不存在，MBG不会创建它。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-13">可选属性</h4>
<p>无</p>
<h4 id="子元素-13">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N)</li>
</ul>
<h4 id="支持的属性-3">支持的属性</h4>
<p>下面的表格列出了所有可用的 <code>&lt;property&gt;</code> 子元素:</p>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 77%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性名</th>
<th style="text-align: left;">属性值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">enableSubPackages</td>
<td style="text-align: left;">这个属性用来选择MGB是否根据基于目录和内省表来生成不同的Java包。例如，假设某个表MYTABLE在MYSCHMA的schema中，也假设targetPackage属性的值设置为"com.mycompany"。 如果此属性为true，为这个表生成的DAO接口和类将被放置在包"com.mycompany.myschema"中。 如果此属性是false，生成的SQL映射将被放在"com.mycompany" schema中。<em>默认值是 false</em></td>
</tr>
</tbody>
</table>
<h4 id="示例-3">示例</h4>
<p>此元素指定我们总希望生成的SQL映射文件在"text.model'包中，并且我们希望使用基于schema和catalog的子包。 它还指定了我们想使用为MyBatis3的XML配置文件的mapper接口。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;test.model&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">targetProject</span>=<span class="string">&quot;\MyProject\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="table-元素"><code>&lt;table&gt;</code> 元素</h3>
<table>
<p>元素用来从内省数据库中选择一个表。选定的表会生成如下的这些对象：</p>
<ul>
<li>一个 MyBatis/iBATIS 格式的SQL映射文件</li>
<li>一组根据表生成的"model"类:
<ul>
<li>一个和表的主键匹配的类(如果表有主键)。</li>
<li>一个包含了非主键字段和BLOB字段的类，如果存在主键类，这个类就会继承主键类。</li>
<li>如果表中包含BLOB字段，就会有一个包含了BLOB字段的类。这个类会根据表的配置继承上面的一个或两个类。</li>
<li>一个用于不同的"by example"方法(selectByExample, deleteByExample)生成动态查询条件的类。</li>
</ul></li>
<li>(可选) 一个DAO接口或者类</li>
</ul>
<p>这个元素是 <code>&lt;context&gt;</code> 元素的一个至少存在一个的必选子元素。 您可以指定不限制数量的table元素。</p>
<h4 id="数据库标识符">数据库标识符</h4>
<p>MyBatis Generator (MBG) 试图自动处理数据库标识符的大小写敏感性。 在大多数情况下，无论您是否设置<code>catalog</code>, <code>schema</code> 和 <code>tableName</code> 属性，MBG都能找到表。 MBG的处理过程遵循以下步骤：</p>
<ol type="1">
<li>如果 <code>catalog</code>, <code>schema</code> 或 <code>tableName</code> 属性包含空格，MBG将会根据指定的精确的情况查找。 在这种（包含空格）情况下，MBG将会自动分割生成SQL中表的标识符。</li>
<li>如果数据库记录是以大写形式存储的标识符，MGB会自动将任何表的标识符转换为大写。</li>
<li>如果数据库记录是以小写形式存储的标识符，MGB会自动将任何表的标识符转换为小写。</li>
<li>其他情况，MBG根据指定的精确的情况查找。</li>
</ol>
<p>在大多数情况下，这种处理很完美。然而，在某些情况下它会失败。 例如，假设您创建了这样的一个表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> &quot;myTable&quot; (</span><br><span class="line">   ...<span class="keyword">some</span> columns</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>因为表名可以用分隔符，即使数据库把标识符存储为大写，大部分的数据库会根据精确指定的表名来生成表。 在（上面）这种情况下，您需要在表的配置中指定<code>delimitIdentifiers="true"</code>。</p>
<h4 id="必选属性-14">必选属性</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">tableName</td>
<td style="text-align: left;">数据库表的名称(不包括schema或catalog)。如果需要，指定的值可以包含SQL通配符。</td>
</tr>
</tbody>
</table>
<h4 id="可选属性-14">可选属性</h4>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">schema</td>
<td style="text-align: left;">数据库 schema - 如果您的数据库不使用 schema ，或者有一个默认的 schema 您不需要设置 schema。 如果需要，指定的值可以包含SQL通配符。</td>
</tr>
<tr class="even">
<td style="text-align: left;">catalog</td>
<td style="text-align: left;">数据库 catalog - 如果您的数据库不使用 catalog，或者有一个默认的 catalog，您就不需要设置 catalog。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">alias</td>
<td style="text-align: left;">如果指定，这个值会用在生成的select查询SQL的表的别名和列名上。 列名会被别名为 alias_actualColumnName(别名_实际列名) 这种模式。</td>
</tr>
<tr class="even">
<td style="text-align: left;">domainObjectName</td>
<td style="text-align: left;">生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称。 这个（指定或者自动生成的）名字将用于计算实体类的名称和DAO类的名称。您可以在实体对象的名字上指定包名分割。 例如，您可以指定<code>foo.Bar</code>，然后实体对象的名字会是 <code>Bar</code>，包名<code>foo</code>会添加到生成器配置中指定的目标包后面。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">enableInsert</td>
<td style="text-align: left;">指定是否生成Insert语句。默认值是 <em>true</em>。</td>
</tr>
<tr class="even">
<td style="text-align: left;">enableSelectByPrimaryKey</td>
<td style="text-align: left;">指定是否生成通过主键查询的语句。 无论这个怎么设置，当表不存在主键的时候，不会生成这个语句。默认值是 <em>true</em>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">enableSelectByExample</td>
<td style="text-align: left;">指定是否生成通过Example查询的语句。 这个语句支持运行时生成多种不同条件的动态查询。默认值是 <em>true</em>。</td>
</tr>
<tr class="even">
<td style="text-align: left;">enableUpdateByPrimaryKey</td>
<td style="text-align: left;">指定是否生成通过主键更新的语句。 无论这个怎么设置，当表不存在主键的时候，不会生成这个语句。默认值是 <em>true</em>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">enableDeleteByPrimaryKey</td>
<td style="text-align: left;">指定是否生成通过主键删除的语句。 无论这个怎么设置，当表不存在主键的时候，不会生成这个语句。默认值是 <em>true</em>。</td>
</tr>
<tr class="even">
<td style="text-align: left;">enableDeleteByExample</td>
<td style="text-align: left;">指定是否生成通过Example删除的语句。 这个语句支持运行时生成多种不同的条件动态删除。默认值是 <em>true</em>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">enableCountByExample</td>
<td style="text-align: left;">指定是否生成通过Example查询总数的语句。 这个语句将返回满足Example条件的数据总数。默认值是 <em>true</em>。</td>
</tr>
<tr class="even">
<td style="text-align: left;">enableUpdateByExample</td>
<td style="text-align: left;">指定是否生成通过Example更新的语句。 这个语句将更新满足Example条件的数据。 如果设置为True,UpdateByExampleSelective语句也会生成。 这个语句只会更新那些参数中值不为null的的列。默认值是 <em>true</em>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">selectByPrimaryKeyQueryId</td>
<td style="text-align: left;">这个值会以"'<code>&lt;value&gt;</code>' as QUERYID"这种形式被添加到通过主键查询的语句的select列中。 这可能对在运行时的DBA跟踪工具中标记查询有用。 如果您使用这个值，您需要为MBG生成的每一个查询指定一个唯一的id。</td>
</tr>
<tr class="even">
<td style="text-align: left;">selectByExampleQueryId</td>
<td style="text-align: left;">这个值会以"'<code>&lt;value&gt;</code>' as QUERYID"这种形式被添加到通过Example查询的语句的select列中。 这可能对在运行时的DBA跟踪工具中标记查询有用。 如果您使用这个值，您需要为MBG生成的每一个查询指定一个唯一的id。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">modelType</td>
<td style="text-align: left;">如果您需要，这个值可以用来重写默认的模型类型。 如果没有指定，MBG将会生成基于上下文默认模型类型的实体对象。 模型类型定义了MBG如何生成实体类。 有一些模型类型MGB会为每个表生成一个单独的实体类。 另外一些模型，MGB会根据表结构生成不同的一些类。 这个属性有以下可选值：</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">conditional 这个模型和hierarchical类似，除了如果那个单独的类将只包含一个字段，将不会生成一个单独的类。 因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">flat 该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">hierarchical 如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系（注：BLOB类 继承 其他字段类 继承 主键类）。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">escapeWildcards</td>
<td style="text-align: left;">这个属性表示当查询列，是否对schema和表名中的SQL通配符 ('_' and '%') 进行转义。 对于某些驱动当schema或表名中包含SQL通配符时（例如，一个表名是MY_TABLE，有一些驱动需要将下划线进行转义）是必须的。默认值是 <em>false</em>.</td>
</tr>
<tr class="even">
<td style="text-align: left;">delimitIdentifiers</td>
<td style="text-align: left;">这个属性表示当查询表并且在生成的SQL中分隔标识符时，是否使用指定的确切的值。 有关更多详细信息，请参见上面的详述。分隔符在 <code>&lt;context&gt;</code> 元素上指定。默认值是 <em>false</em>。除非 <code>catalog</code>, <code>schema</code> 或 <code>tableName</code> 属性值包含空白时，是 <em>true</em>.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">delimitAllColumns</td>
<td style="text-align: left;">指示是否给生成SQL中所有的列名添加分隔符。 这是一种给每个列添加<code>&lt;columnOverride&gt;</code>来指定列需要被分隔的替代方式。 这对类似PostgreSQL这种使用小写标识符的数据库很有用。分隔符在 <code>&lt;context&gt;</code> 元素上指定。默认值是 <em>false</em>.</td>
</tr>
</tbody>
</table>
<h4 id="子元素-14">子元素</h4>
<ul>
<li><code>&lt;property&gt;</code> (0..N)</li>
<li><code>&lt;generatedKey&gt;</code> (0 or 1)</li>
<li><code>&lt;columnRenamingRule&gt;</code> (0 or 1)</li>
<li><code>&lt;columnOverride&gt;</code> (0..N)</li>
<li><code>&lt;ignoreColumn&gt;</code> (0..N)</li>
</ul>
<h4 id="支持的属性-4">支持的属性</h4>
<p>下面的表格列出了所有可用的 <code>&lt;property&gt;</code> 子元素:</p>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">属性名</th>
<th style="text-align: left;">属性值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">constructorBased</td>
<td style="text-align: left;">此属性用于选择代码生成器是否生成接受类中的每个字段的值的类的构造函数。 此外，SQL结果映射也会为每个字段生成使用构造方法而不是"setter"的方式。此属性仅适用于MyBatis3，iBATIS2将会被忽略。如果"immutable"属性设置为"true"，这个属性将会被忽略。<em>默认值是 false</em></td>
</tr>
<tr class="even">
<td style="text-align: left;">ignoreQualifiersAtRuntime</td>
<td style="text-align: left;">如果设置为true，MBG不会讲schema或catalog添加到生成SQL中的表名上。 如果您有几个schemas中的表具有相同的名称，这是非常有用的。 您可以使用MBG生成基于在一个schema上的表，但是运行时不包含schema。<em>默认值是 false</em></td>
</tr>
<tr class="odd">
<td style="text-align: left;">immutable</td>
<td style="text-align: left;">此属性用于选择MBG是否会生成不可变的模型类。 这意味着这些类不会包含"setter"方法，而且通过构造参数接收类中所有字段的值。如果设置为true,将会忽略"constructorBased"属性， 强制生成通过参数化构造方法的模型类。此属性仅适用于MyBatis3，iBATIS2将会被忽略。<em>默认值是 false</em></td>
</tr>
<tr class="even">
<td style="text-align: left;">modelOnly</td>
<td style="text-align: left;">此属性用于选择MBG是否只会为表生成模型类。如果设置为true，那么就不会生成Java客户端类。 如果 <code>&lt;sqlMapGenerator&gt;</code> 配置了，并且属性设置为true，那么MGB将会在该表的SQL映射XML中只生成结果映射元素。如果设置为true，这个值会覆盖<code>&lt;table&gt;</code>元素上所有的"enable<em>"属性，将不会生成任何CRUD方法。</em>默认值是 false*</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rootClass</td>
<td style="text-align: left;">这个属性可以用来指定所有生成的Java模型类的基类。 如果表包含主键，MBG会将该值指定为主键对象的超类。 或者其他记录对象的超类。 这个值将会覆盖Java模型生成配置中配置的<code>rootClass</code><strong>重要:</strong> 如果MBG可以加载基类，通常生成的属性不会覆盖和基类中完全匹配的属性。 完全匹配属性的定义如下</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">属性名称完全相同</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">属性的类型相同</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">属性有一个"getter"方法</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">属性有一个"setter"方法</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">如果指定这个值，这个属性值应该是一个完全限定的类名(例如：com.mycompany.MyRootClass).</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rootInterface</td>
<td style="text-align: left;">这个属性可以用来指定所有生成的DAO接口对象的父接口。 这个属性值会覆盖DAO生成器配置中配置的<code>rootInterface</code>属性。<strong>重要:</strong> MBG 不会校验接口是否存在或者合法。如果指定这个值，这个属性值应该是一个完全限定的接口名 (例如：com.mycompany.MyRootInterface).</td>
</tr>
<tr class="even">
<td style="text-align: left;">runtimeCatalog</td>
<td style="text-align: left;">如果您指定了这个属性值，MBG会在生成的SQL中使用这个catalog，而不是前面配置的<code>catalog</code> 属性值。 当您生成代码的catalog和运行时的catalog不一样时，这会非常有用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">runtimeSchema</td>
<td style="text-align: left;">如果您指定了这个属性值，MBG会在生成的SQL中使用这个schema，而不是前面配置的<code>schema</code> 属性值。 当您生成代码的schema和运行时的schema不一样时，这会非常有用。</td>
</tr>
<tr class="even">
<td style="text-align: left;">runtimeTableName</td>
<td style="text-align: left;">如果您指定了这个属性值，MBG会在生成的SQL中使用这个表名，而不是前面配置的<code>tableName</code> 属性值。 当您想在Oracle中使用公共同义词生成对象时，这会非常有用。 在这种情况下，您将需要生成对象的同义词的指向您实际表。那就在此属性中指定同义词名称。 在使用公共同义词的大多数情况下，您还需要设置 <code>ignoreQualifiersAtRuntime</code>属性。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">selectAllOrderByClause</td>
<td style="text-align: left;">这个属性可以用于指定将会加到 <code>selectAll</code> 方法中的order by语句。 这仅适用于您使用<code>MyBatis3Simple</code>目标运行环境时。 MBG会将您在这儿指定的任何属性值前面追加<code>order by</code>， 因此该属性赢仅包含列表中的列(例如 <code>ID1, ID2</code> 或 <code>ID1 desc, ID2 asc</code>)</td>
</tr>
<tr class="even">
<td style="text-align: left;">useActualColumnNames</td>
<td style="text-align: left;">如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过 <code>&lt;columnOverride&gt;</code> 元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。例如，假设一个表包含START_DATE列，如果这个属性是"true", 那么MBG生成的属性名是<code>START_DATE</code> - 这意味着这个值的getter和setter方法将会是 <code>getSTART_DATE()</code> 和 <code>setSTART_DATE()</code>. 如果这个属性值是fasle,MBG将会生成的属性名是 <code>startDate</code> - 这意味着这个值的getter和setter方法将会是 <code>getStartDate()</code> 和 <code>setStartDate()</code>.<em>默认值是 false</em></td>
</tr>
<tr class="odd">
<td style="text-align: left;">useColumnIndexes</td>
<td style="text-align: left;">如果是true,MBG生成resultMaps的时候会使用列的索引,而不是结果中列名的顺序. 当表中的列名的区别只是大小写的时候,这会非常有用. 这个支持还会有一个轻微的性能优势.<em>默认值是 false</em><strong>重要提示:</strong> 当目标运行环境是Mybatis版本3时不支持这个属性.</td>
</tr>
<tr class="even">
<td style="text-align: left;">useCompoundPropertyNames</td>
<td style="text-align: left;">如果是true,那么MBG生成属性名的时候会将列名和列备注接起来. 这对于那些通过第四代语言自动生成列(例如:FLD22237),但是备注包含有用信息(例如:"customer id")的数据库来说很有用. 在这种情况下,MBG会生成属性名FLD2237_CustomerId.<em>默认值是 false</em></td>
</tr>
</tbody>
</table>
<h4 id="示例-4">示例</h4>
<p>这个元素指定我们总是想为一个在MYSCHEMA schema上的叫做 MYTABLE 的表生成代码. 我们还想忽略表中一个叫"fred"的列,而且我想还想重写"BEG_DATA"列,以便生成的属性名是"startDate".</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;MYTABLE&quot;</span> <span class="attr">schema</span>=<span class="string">&quot;MYSCHEMA&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">&quot;fred&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;BEG_DATE&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用生成的对象">使用生成的对象</h2>
<ul>
<li>Java模型对象</li>
<li>SQL映射文件</li>
<li>Java客户端对象</li>
<li>Example类使用说明</li>
<li>扩展Example类</li>
</ul>
<h3 id="java实体对象">JAVA实体对象</h3>
<p>MyBatis Generator (MBG)根据数据库表字段生成Java类. MBG生成的是简单实体对象而非带业务逻辑的实体对象(详见<a href="https://www.kancloud.cn/wizardforcel/philosophy.html">设计理念</a>介绍).MBG根据表特性和配置生成不同类型的实体对象.</p>
<p>MBG生成字段和方法时包含JavaDoc标签 <code>@mbggenerated</code>.运行Eclipse插件时,MBG会将每个Java对象中的JavaDoc标签删除或替换.其他地方不会发生变化. 在这种情况下,您在Java类中添加的字段和方法就不用担心丢失--不包括包含了JavaDoc<code>@mbggenerated</code>标签部分内容.</p>
<p>离开Eclipse插件，您需要手动合并Java文件,但是使用JavaDoc的<code>@mbggenerated</code>标签用来了解删除以前版本的文件是否安全.</p>
<p>以下描述生成不同的实体对象.MBG根据<code>&lt;context&gt;</code>的<code>defaultModelType</code>属性(支持conditional、flat、hierarchical三个值)和<code>&lt;table&gt;</code>的<code>modelType</code>(此属性用于覆盖默认的defaultModelType)属性配置生成不同的实体对象.</p>
<p>任何字段配置了<code>&lt;ignoreColumn&gt;</code>,自动生成时不会添加到Java对象中.</p>
<p>注意: 下面描述中"BLOB"指任何列的BLOB数据类型包括BLOB, CLOB, LONGVARCHAR, 和 LONGVARBINARY.</p>
<h4 id="主键类">主键类</h4>
<p>主键类在表中包含一个主键的字段属性. (MBG)根据表列明自动生成属性名称.自动生成的属性名称可以配置<code>&lt;columnOverride&gt;</code>属性覆盖.</p>
<p>类名默认情况是<code>?TableName?Key</code>,如果<code>&lt;table&gt;</code>配置了<code>domainObjectName</code>属性那么类名是<code>?domainObjectName?Key</code>.</p>
<p>如果表中存在一个字段的主键将会生成hierarchical类型实体对象. 如果表中存在多列组合主键将会生成conditional类型实体对象.主键类是不会生成flat类型实体对象 model.</p>
<h4 id="记录类">记录类</h4>
<p>主键类在表中不包含主键、BLOB的字段属性. 如果只有一个主键记录类将继承主键类. (MBG)根据表列明自动生成属性名称.自动生成的属性名称可以配置<code>&lt;columnOverride&gt;</code>属性覆盖.</p>
<p>类名默认情况是<code>?TableName?</code>,如果<code>&lt;table&gt;</code>配置了<code>domainObjectName</code>属性那么类名是<code>?domainObjectName?</code>配置的值.</p>
<p>如果表中不存在组合主键、BLOB列将生成hierarchical类型实体对象.如果表中不存一个字段的主键、BLOB列或只有一个主键或者一个BLOB列将生成conditional类型实体对象.记录类常常生成flat类型实体对象.</p>
<h4 id="blob记录类">BLOB记录类</h4>
<p>BLOB记录类在表中包含BLOB字段属性. 如果表中只存在一个字段该类将继承基础类, 或将继承主键类(注意:MBG不支持表中只包含BLBO列). (MBG)根据表列明自动生成属性名称.自动生成的属性名称可以配置<code>&lt;columnOverride&gt;</code>属性覆盖.</p>
<p>BLOB记录类调用<code>selectByPrimaryKey</code>或<code>selectByExampleWithBLOBs</code>方法返回BLOB字段值.</p>
<p>类名默认情况是<code>?TableName?WithBLOBs</code>,如果<code>&lt;table&gt;</code>配置了<code>domainObjectName</code>属性那么类名是<code>?domainObjectName?WithBLOBs</code>.</p>
<p>如果表中存在一个BLOB列将生成hierarchical类型实体对象. 如果表中存在多个BLOB列将生成conditional类型实体对象.BLOB记录类是不会生成flat类型实体对象.</p>
<h4 id="example类">Example类</h4>
<p>Example类用来处理MBG动态查询功能. Example类设置条件用于动态WHERE子句下列方法中:</p>
<ul>
<li><code>selectByExample</code></li>
<li><code>selectByExampleWithBLOBs</code></li>
<li><code>deleteByExample</code></li>
<li><code>countByExample</code></li>
<li><code>updateByExample</code></li>
</ul>
<p>Example类不继承任何实体对象.</p>
<p>类名默认情况是<code>?TableName?Example</code>,如果<code>&lt;table&gt;</code>配置了<code>domainObjectName</code>属性那么类名是<code>?domainObjectName?Example</code>.</p>
<p>如果方法被启动Example类将生成任何<code>*ByExample</code>方法.注意:如果表中有非常多的字段该类可能很大,但 DAO生成的XML是比较小的. 如果您不需要使用动态WHERE子句,您可以禁用生成这些方法.</p>
<h3 id="sql映射文件">SQL映射文件</h3>
<p>MyBatis Generator (MBG)生成SQL映射文件遵循MyBatis或iBATIS SQL Map DTD规范. 在表的基础上这些文件还包含了不同的标签和属性配置. MBG按照配置表生成SQL映射文件.表名就是SQL映射文件的命名空间(前提是数据库支持schema和catalog,主流数据库对schema和catalog都支持).MBG不会自动把 SQL映射文件到MyBatis/iBATIS配置文件中 - 您必须手动把<code>xxxMapper.xml</code>文件加入到配置文件中(或者您使用一个插件使MBG生成配置文件;Spring配置文件可以实现自动扫描<code>xxxMapper.xml</code>和接口).</p>
<p>每个自动生成的XML方法标签下都包含<code>@mbggenerated</code>的注释块.在运行的时候<code>@mbggenerated</code>注释块将删除和替换.其他部分内容将保持不变. 考虑到这点,不用担心在运行时丢失您新增内容--不包括<code>@mbggenerated</code>块内容.</p>
<p>以下部分描述了将要生成的元素.</p>
<p>注意:下面描述中"BLOB"指任何列的BLOB数据类型包括BLOB, CLOB, LONGVARCHAR, 和 LONGVARBINARY.</p>
<h4 id="结果集">结果集</h4>
<p>结果集用于数据库表列映射Java对象的属性. 结果集(和相应的查询语句)不包括如下情况:</p>
<ul>
<li>任何列配置<code>&lt;ignoreColumn&gt;</code>属性将被会被忽略</li>
<li>任何BLOB字段(详见有关BLOBs字段相关映射)</li>
</ul>
<p>对于列配置<code>&lt;columnOverride&gt;</code>属性将映射成配置的名称.没有配置使用的是默认的属性和JDBC类型.</p>
<p>对于自定义连接查询结果集继承一个结果集是一种非常常见的用法. 对于其他连接查询也想使用该结果集在MBG自动生成的时候需要配置前缀.详见<code>&lt;table&gt;</code>属性alias配置前缀,这样做法可以区分表中相同字段.</p>
<p>如果table配置enableSelectByExample、enableSelectByPrimaryKey属性为true,MBG会生成结果集,table默认这两个配置都是true,所以大部分情况下都会生成resultMap.</p>
<h4 id="blob结果集">BLOB结果集</h4>
<p>表中存在BLOB字段时MBG会自动生成一个BLOB结果集,BLOB结果集继承了除BLOB字段外的基础结果集. 我们提供不同的版本查询语句,来适应查询结果中是否需要BLOB字段.</p>
<p>BLOB结果集(和相应的查询语句)不包括如下情况:</p>
<ul>
<li>任何列配置<code>&lt;ignoreColumn&gt;</code>属性将被会被忽略</li>
</ul>
<p>对于列配置<code>&lt;columnOverride&gt;</code>属性将映射成配置的名称.没有配置使用的是默认的属性和JDBC类型.</p>
<p>对于自定义连接查询结果集继承一个结果集是一种非常常见的用法.对于其他连接查询也想使用该结果集,在MBG自动生成的时候需要配置前缀.详见 <code>&lt;table&gt;</code> 性alias配置前缀,这样做法可以区分表中相同字段.</p>
<p>如果table存在BLOB字段且配置了enableSelectByExample、enableSelectByPrimaryKey属性,MBG会生成BLOB结果集,table默认这两个配置都是true所以大部分情况下都会生成resultMap.</p>
<h4 id="where条件sql语句">Where条件SQL语句</h4>
<p>"by example"方法重用Where条件.被重用的Where条件不包括BLOB字段.大部分表WHERE条件都不支持BLOB字段.</p>
<p>"by example"语句被配置将动态生成Where条件语句.</p>
<h4 id="根据主键查询">根据主键查询</h4>
<p>select语句按照主键查询返回一行数据.如果表中存在BLOB字段,查询结果中会包含该字段.</p>
<p>如果table配置了enableSelectByExample、enableSelectByPrimaryKey属性为true,MBG会生成结果集,table默认这两个配置都是true所以大部分情况下都会生成resultMap.</p>
<h4 id="根据条件查询">根据条件查询</h4>
<p>根据条件查询结果集和自动生成对象相匹配. 通过实现一个简单的"query by example"方法可以适用于不同的数据库查询.就算表中存在BLOB字段该查询结果集也不会返回该BLOB字段 (具体返回BLOB字段详见根据条件查询包含BLOB字段结果集部分描述).</p>
<p><strong>重要:*<em>条件为空或者没有设置条件时,会将表中*</em>所有</strong>数据查询出来.</p>
<p>如果table配置了enableSelectByExample属性为true,MBG会生成Example查询.</p>
<h4 id="根据条件查询包含blob字段方法selectbyexamplewithblobs">根据条件查询包含BLOB字段(方法:selectByExampleWithBLOBs)</h4>
<p>Example查询结果集和自动生成对象相匹配. 通过实现一个简单的"query by example"方法可以适用于不同的数据库查询.算表中存在BLOB字段该查询结果集将返回该BLOB字段.</p>
<p><strong>重要:</strong> 查询条件为空或者没有设置查询条件时,会将表中<strong>所有</strong>数据查询出来.</p>
<p>如果table配置了enableSelectByExample属性为true,MBG会生成包含BLOB字段的Example查询.</p>
<h4 id="插入">插入</h4>
<p>该方法可以插入表中所有字段(包括BLOB字段),但列配置了<code>&lt;ignoreColumn&gt;</code>属性将不会插入.</p>
<p>如果表有主键自动增长(自动增长列或序列),table子元素配置<code>&lt;generatedKey&gt;</code>属性,MBG会生成<code>&lt;selectKey&gt;</code>块语句,一般情况下都不需要配置使用数据库自动增长即可,除非表字段需要使用序列.</p>
<p><strong>重要提示:</strong>与iBATIS2和MyBatis3插入的差异.差异如下:</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运行</th>
<th style="text-align: left;">特性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">iBATIS2</td>
<td style="text-align: left;">配置了<code>&lt;generatedKey&gt;</code>属性,插入的时候会返回新的自动增长值.没有配置<code>&lt;generatedKey&gt;</code>属性, 插入返回值为<code>void</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;">MyBatis3</td>
<td style="text-align: left;">插入方法将返回插入受影响的行数(通常是0或者1). 配置了<code>&lt;generatedKey&gt;</code>属性,自动增长值会被设置在参数对象中返回.</td>
</tr>
</tbody>
</table>
<p>如果table配置了enableInsert属性为true,MBG会生成该方法.</p>
<h4 id="选择性插入">选择性插入</h4>
<p>该方法可以插入表中所有字段(包括BLOB字段),但列配置了<code>&lt;ignoreColumn&gt;</code>属性将不会插入.然而,参数对象<code>为空</code>的列将不会插入值.如果数据库列设置了默认值则取默认值,否则列值是空. 对于列不允许为<code>空</code>情况-则需要人为确保调用该方法时不为空列确保有值使插入不报错.<strong>重要:</strong>任何映射到java引用类型的字段都会被该方法插入.</p>
<p>如果表有主键自动增长(自动增长列或序列),table子元素配置<code>&lt;generatedKey&gt;</code>属性,MBG会生成<code>&lt;selectKey&gt;</code>块语句,一般情况下都不需要配置使用数据库自动增长即可,除非表字段需要使用序列.</p>
<p><strong>重要提示:</strong>与iBATIS2和MyBatis3插入的差异.差异如下:</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运行</th>
<th style="text-align: left;">特性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">iBATIS2</td>
<td style="text-align: left;">配置了<code>&lt;generatedKey&gt;</code>属性,插入的时候会返回新的自动增长值.没有配置.没有配置<code>&lt;generatedKey&gt;</code> 属性, 插入返回值为<code>void</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;">MyBatis3</td>
<td style="text-align: left;">插入方法将返回插入受影响的行数(通常是0或者1). I配置了<code>&lt;generatedKey&gt;</code>属性,自动增长值会被设置在参数对象中返回.</td>
</tr>
</tbody>
</table>
<p>如果table配置了enableInsert属性为true,MBG会生成该方法.</p>
<h4 id="根据主键更新">根据主键更新</h4>
<p>该方法按照主键修改一行数据.该方法会修改表中所有字段,除非:</p>
<ul>
<li>列配置了<code>&lt;ignoreColumn&gt;</code>属性</li>
<li>BLOB字段(详见根据主键更新包含BLOB字段)</li>
</ul>
<p>数据库表中存在主键且table配置了enableUpdateByPrimaryKey属性为true,MBG会生成该方法.</p>
<h4 id="根据主键更新包含blob字段">根据主键更新包含BLOB字段</h4>
<p>该方法按照主键修改一行数据.该方法会修改表中所有字段(包括BLOB字段),除非:</p>
<ul>
<li>列配置了<code>&lt;ignoreColumn&gt;</code>属性</li>
</ul>
<p>数据库表中存在主键包含BLOB列且table配置了enableUpdateByPrimaryKey属性为true,MBG会生成该方法.</p>
<h4 id="根据主键选择性更新">根据主键选择性更新</h4>
<p>该方法按照主键修改一行数据.该方法会更新表中参数对象属性不为空的列.该方法可以被使用更新某些特定的列而不影响所有列数据. <strong>重要:</strong> 任何映射到java引用类型的字段都会被该方法更新.</p>
<p>数据库表中存在主键且table配置了enableUpdateByPrimaryKey属性为true,MBG会生成该方法.</p>
<h4 id="根据主键删除记录">根据主键删除记录</h4>
<p>该方法按照主键删除一行数据.</p>
<p>数据库表中存在主键且table配置了enableDeleteByPrimaryKey属性为true,MBG会生成该方法.</p>
<h4 id="根据条件删除记录">根据条件删除记录</h4>
<p>该方法按照条件将删除一行或者多行数据.</p>
<p><strong>重要:*<em>条件为空或者没有设置条件时, 会将表中*</em>所有</strong>记录删除.</p>
<p>如果table配置了enableDeleteByExample属性为true,MBG会生成该方法.</p>
<h4 id="根据条件查询记录总数">根据条件查询记录总数</h4>
<p>该方法按照条件查询表中符合条件记录的记录总数.</p>
<p><strong>重要:</strong>条件为空或者没有设置条件时,返回表中所有记录总数.</p>
<p>如果table配置了enableCountByExample属性为true,MBG会生成该方法.</p>
<h4 id="根据条件更新记录">根据条件更新记录</h4>
<p>该方法按照条件更新表中符合条件记录.该方法会修改表中所有字段,除非:</p>
<ul>
<li>列配置了<code>&lt;ignoreColumn&gt;</code>属性</li>
<li>BLOB字段(详见根据条件修改记录包含BLOB字段)</li>
</ul>
<p><strong>重要:*<em>条件为空或者没有设置条件时, 会将表中*</em>所有</strong>记录更新.</p>
<p>如果table配置了enableUpdateByExample属性为true,MBG会生成该方法.</p>
<h4 id="根据条件修改记录包含blob字段">根据条件修改记录包含BLOB字段</h4>
<p>该方法按照条件更新表中符合条件记录.该方法会修改表中所有字段(包括BLOB字段),除非:</p>
<ul>
<li>列配置了<code>&lt;ignoreColumn&gt;</code>属性</li>
</ul>
<p><strong>重要:*<em>条件为空或者没有设置条件时, 会将表中*</em>所有</strong>记录更新.</p>
<p>如果表存在BLOB字段且table配置了enableUpdateByExample属性为true,MBG会生成该方法.</p>
<h4 id="根据条件选择性更新记录">根据条件选择性更新记录</h4>
<p>该方法按照条件更新表中符合条件记录.该方法会更新表中参数对象属性不为空的列.该方法可以被使用更新某些特定的列而不影响所有列数据.<strong>重要:</strong> 任何映射到java引用类型的字段都会被该方法更新.</p>
<p><strong>重要:*<em>条件为空或者没有设置条件时, 会将表中*</em>所有</strong>记录更新.</p>
<p>如果table配置了enableUpdateByExample属性为true,MBG会生成该方法.</p>
<h3 id="java客户端对象">Java客户端对象</h3>
<p>MyBatis Generator (MBG)生成几种类型的Java客户端对象.用Java的客户端对象与所产生的XML交互容易得多. 对于配置中的每个表，MBG生成一个或多个Java客户端对象.如MyBatis的3, 这些都接口映射.对于iBATIS的2.x中，这些都是DAO接口和实现类. 生成Java客户对象是可选的,由<code>&lt;javaClientGenerator&gt;</code>配置. MBGr可以产生以下的Java客户短对象类型:</p>
<ul>
<li>如MyBatis 3.x:
<ul>
<li>XMLMAPPER - 用与支持MyBatis 3.x映射</li>
</ul></li>
<li>如iBATIS 2.x:
<ul>
<li>IBATIS - 使用iBATIS DAO框架</li>
<li>SPRING - 与Spring框架联合使用</li>
<li>GENERIC-CI - 使用不依赖iBATIS数据映射</li>
<li>GENERIC-SI - 使用不依赖iBATIS数据映射</li>
</ul></li>
</ul>
<p>每个字段和方法产生包括JavaDoc标签<code>@mbggenerated</code>.Eclipse插件运行时, 运行中每个字段和方法包括此Javadoc标记将被删除并替换.在类中的其他任何字段或方法将保持不变. 考虑到这一点,您可以不用担心加入的字段和方法丢失 -不包括在Javadoc标签<code>@mbggenerated</code>中内容.</p>
<p>离开Eclipse插件,您需要手动合并Java文件,但是使用JavaDoc的 <code>@mbggenerated</code>标签用来了解删除以前版本的文件是否安全.</p>
<p>注意: 下面描述中"BLOB"指任何列的BLOB数据类型包括BLOB, CLOB, LONGVARCHAR, 和 LONGVARBINARY.</p>
<h4 id="通用dao方法">通用DAO方法</h4>
<p>根据表的特性,以及配置选项,Java客户端自动生成如下方法:</p>
<ul>
<li>countByExample</li>
<li>deleteByPrimaryKey</li>
<li>deleteByExample</li>
<li>insert</li>
<li>insertSelective</li>
<li>selectByPrimaryKey</li>
<li>selectByExample</li>
<li>selectByExampleWithBLOBs</li>
<li>updateByPrimaryKey (否更新BLOB字段需要重写方法)</li>
<li>updateByPrimaryKeySelective (只更新参数类非空字段)</li>
<li>updateByExample (否更新BLOB字段需要重写方法)</li>
<li>updateByExampleSelective (只更新参数类非空字段)</li>
</ul>
<p>对于包含BLOB的表,MBG通过生成不同的对象和方法使您更容易使用BLOB字段,是否忽略它们,这取决于具体情况.</p>
<p>详见 <a href="https://www.kancloud.cn/wizardforcel/java-opensource-doc/exampleClassUsage.html">Example类使用说明</a> 中<code>selectByExample</code>方法使用.</p>
<h4 id="xmlmapper-客户端-mybatis-3.x">XMLMAPPER 客户端 (MyBatis 3.x)</h4>
<p>XMLMAPPER客户端是将接口方法映射到生成的XML映射文件中.例如,MBG自动生成的接口名为<code>MyTableMapper</code>.您可以如下使用该接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  MyTableMapper mapper = sqlSession.getMapper(MyTableMapper.class);</span><br><span class="line">  List&lt;MyTable&gt; allRecords = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有关如何创建实例的详细信息,请参阅MyBatis文档怎么创建<code>sqlSessionFactory</code>实例.</p>
<h3 id="example类使用说明">Example类使用说明</h3>
<p>Example类指定如何构建一个动态的where子句. 表中的每个non-BLOB列可以被包括在where子句中. 例子是展示此类用法的最好方式.</p>
<p>Example类可以用来生成一个几乎无限的where子句.</p>
<p>Example类包含一个内部静态类 <code>Criteria</code> 包含一个用 <code>anded</code> 组合在where子句中的条件列表. Example类包含一个 <code>List&lt;Criteria&gt;</code> 属性,所有内部类Criteria中的子句会用 <code>ored</code>组合在一起. 使用不同属性的 <code>Criteria</code> 类允许您生成无限类型的where子句.</p>
<p>创建 <code>Criteria</code> 对象 可以使用Example类中的 <code>createCriteria()</code> 或者 <code>or()</code> . 如果 <code>Criteria</code> 对象是用 <code>createCriteria()</code> 创建的，它会自动为 <code>List&lt;Criteria&gt;</code> 属性添加一个 <code>Criteria</code> 对象 - 这使得它更容易写一个简单的where子句， 如果您不需要 <code>or</code> 或者其他几个子句组合的话. 用 <code>or(Criteria criteria)</code> 方法创建 <code>Criteria</code> 对象, 方法里的 <code>criteria</code> 对象会被添加进 <code>Criteria</code> 对象的列表中.</p>
<p><strong>重要</strong> 我们推荐您只使用 <code>or()</code> 方法创建 <code>Criteria</code> 对象. 我们相信这种方法使代码更有可读性.</p>
<h4 id="简单查询">简单查询</h4>
<p>这个例子展示了如何用生成后的Example类去生成一个简单的where子句:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line"></span><br><span class="line">example.createCriteria().andField1EqualTo(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>作为另一种选择, 下面的方式也是可以的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line"></span><br><span class="line">example.or().andField1EqualTo(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> field1 <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="复杂查询">复杂查询</h4>
<p>下面的例子展示了如何用生成后的Example类去生成一个复杂的where子句 (用到了 JSE 5.0 的泛型):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line"></span><br><span class="line">example.or()</span><br><span class="line">  .andField1EqualTo(<span class="number">5</span>)</span><br><span class="line">  .andField2IsNull();</span><br><span class="line"></span><br><span class="line">example.or()</span><br><span class="line">  .andField3NotEqualTo(<span class="number">9</span>)</span><br><span class="line">  .andField4IsNotNull();</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; field5Values = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">field5Values.add(<span class="number">8</span>);</span><br><span class="line">field5Values.add(<span class="number">11</span>);</span><br><span class="line">field5Values.add(<span class="number">14</span>);</span><br><span class="line">field5Values.add(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">example.or()</span><br><span class="line">  .andField5In(field5Values);</span><br><span class="line"></span><br><span class="line">example.or()</span><br><span class="line">  .andField6Between(<span class="number">3</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> (field1 <span class="operator">=</span> <span class="number">5</span> <span class="keyword">and</span> field2 <span class="keyword">is</span> <span class="keyword">null</span>)</span><br><span class="line">   <span class="keyword">or</span> (field3 <span class="operator">&lt;&gt;</span> <span class="number">9</span> <span class="keyword">and</span> field4 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)</span><br><span class="line">   <span class="keyword">or</span> (field5 <span class="keyword">in</span> (<span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">22</span>))</span><br><span class="line">   <span class="keyword">or</span> (field6 <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>将会返回满足这些条件的记录结果.</p>
<h4 id="去重复查询">去重复查询</h4>
<p>您可以在所有的Example类中调用 <code>setDistinct(true)</code> 方法进行强制去重复查询.</p>
<h4 id="criteria类">Criteria类</h4>
<p><code>Criteria</code> 内部类的每个属性都包含 <code>andXXX</code> 方法，以及如下的标准的SQL查询方法:</p>
<ul>
<li>IS NULL - 指相关的列必须为NULL</li>
<li>IS NOT NULL - 指相关的列必须不为NULL</li>
<li>= (equal) - 指相关的列必须等于方法参数中的值</li>
<li>&lt;&gt; (not equal) - 指相关的列必须不等于方法参数中的值</li>
<li>&gt; (greater than) - 指相关的列必须大于方法参数中的值</li>
<li>&gt;= (greater than or equal) - 指相关的列必须大于等于方法参数中的值</li>
<li>&lt; (less than) - 指相关的列必须小于于方法参数中的值</li>
<li>&lt;= (less than or equal) - 指相关的列必须小于等于方法参数中的值</li>
<li>LIKE - 指相关的列必须 "like" 方法参数中的值. 这个方法不用必须加入 '%', 您必须设置方法参数中的值.</li>
<li>NOT LIKE - 指相关的列必须 "not like" 方法参数中的值. 这个方法不用必须加入 '%', 您必须设置方法参数中的值.</li>
<li>BETWEEN - 指相关的列必须在 "between" 方法参数中的两个值之间.</li>
<li>NOT BETWEEN - 指相关的列必须不在 "not between" 方法参数中的两个值之间.</li>
<li>IN - 指相关的列必须在传入的方法参数的list中.</li>
<li>NOT IN - 指相关的列必须不在传入的方法参数的list中.</li>
</ul>
<h3 id="扩展example类">扩展Example类</h3>
<p>在某些情况下可能需要扩展自动生成的example。您可能希望添加特定数据库查询条件(如Oracle ROWNUM支持),或添加除自动生成外的查询条件(如不区分大小写查询)。在这种情况下，您需要扩展自动生成example类来添加这些额外的查询条件。</p>
<h4 id="一般原则">一般原则</h4>
<p>MyBatis Generator (MBG)一般情况下一个表名对应一个自动生成"example"类,除非您特殊配置。"example"类动态生成where条件被用于<code>xxxByExample</code>方法。</p>
<p>标准的"example"类包含只是标准SQL条件查询功能。在这种情况下,程序特定需要您添加额外条件查询功能。这可能需要添加非标准条件查询或在where条件中使用数据库特定功能。</p>
<p>自动生成"example"类中包含一个内部类实现where条件查询功能。内部类命名为<code>GeneratedCriteria</code>。 MBG同时也生成了内部类<code>Criteria</code>继承了<code>GeneratedCriteria</code>,您可以使用它在example类中添加您想要的功能。Eclipse插件不会删除<code>Criteria</code>类新增代码(注：只有Eclipse插件,并且有注释和时间戳等要求才能自动合并),因此您无需担心新增代码丢失。</p>
<p>例如,有一个表叫CUSTOMER。通常,MBG生成一个名为 <code>CustomerExample</code>的类。在<code>CustomerExample</code>类中添加额外功能,需要在<code>CustomerExample.Criteria</code>类中新增方法。</p>
<h4 id="扩展vs插件">扩展vs插件</h4>
<p>如果您经常扩展自动生成类,写一个插件来实现该功能比手工编写扩展类代码更方便。下面(标题"单条件参数")的插件类能够完成单参数查询 <code>org.mybatis.generator.plugins.CaseInsensitiveLikePlugin</code>。</p>
<h4 id="添加条件语句">添加条件语句</h4>
<p>MBG自动生成SQL在运行允许创建无限制where条件。为了完成这个,自动生成SQL支持四大类型条件语句。对应每种类型的SQL语句,<code>GeneratedCriteria</code> 内部有一个对应的方法用于添加一个动态的where条件。</p>
<h4 id="简单字符串替换">1. 简单字符串替换</h4>
<p>在使用这种类型的条件查询时不需要参数对象替换where条件中。例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FIRST_NAME <span class="keyword">is</span> <span class="keyword">null</span>`</span><br><span class="line">`LAST_NAME <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>此条件语句<code>GeneratedCriteria</code>类方法是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addCriterion(String anyString)</span><br></pre></td></tr></table></figure>
<p>其中"anyString"是字符串替换where子句。该方法适合任何类型。</p>
<p>例如,您想使用SOUNDEX函数完成"类似"搜索功能。在MySQL中,条件语句应该是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SOUNDEX(FIRST_NAME) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;frod&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>此种查询太复杂，可以考虑使用另外一个方法,这种简单字符串替换必须插入到where条件中。在内部类<code>Criteria</code>中添加如下方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Criteria <span class="title">andFirstNameSoundsLike</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">  StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;SOUNDEX(FIRST_NAME) = SOUNDEX(&#x27;&quot;</span>);</span><br><span class="line">  sb.append(value);</span><br><span class="line">  sb.append(<span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  addCriterion(sb.toString());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面代码是在<code>selectByExample</code>方法中使用了刚才新增的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CustomerExample example = <span class="keyword">new</span> CustomerExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andFirstNameSoundsLike(<span class="string">&quot;frod&quot;</span>);</span><br><span class="line">List results = selectByExample(example);</span><br></pre></td></tr></table></figure>
<p>这种方法可以添加任何条件语句到where子句中。然而,由于需要保证不同数据类型的正确(最明显的日期、时间和时间戳),所以最好使用参数替换。同时, 这样操作暴露过多的方法会导致SQL注入问题。如果可能,我们建议使用下面列出的方法之一。</p>
<h4 id="单条件参数">2. 单条件参数</h4>
<p>使用这种类型作为条件语句,一个参数替换where条件。例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FIRST_NAME <span class="operator">=</span> ?`</span><br><span class="line">`LAST_NAME <span class="operator">&lt;&gt;</span> ?</span><br></pre></td></tr></table></figure>
<p>自动生成<code>Criteria</code>类条件方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addCriterion(String anyString,Object anyObject,String propertyName)</span><br></pre></td></tr></table></figure>
<p>Where:</p>
<p><strong>anyString</strong></p>
<p>替换where条件参数子句,如:upper(FIRST_NAME) like</p>
<p><strong>anyObject</strong></p>
<p>条件值</p>
<p><strong>propertyName</strong></p>
<p>条件列名,用于排除潜在错误。</p>
<p>该方法用于单一参数where条件。</p>
<p>例如,假设您想特定列不区分大小写查询,在MySQL中查询条件如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">upper</span>(FIRST_NAME) <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure>
<p>此方法适合单个参数功能-一个参数一个参数值。将下面方法添加到<code>ExtendedCriteria</code>中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExtendedCriteria <span class="title">andFirstNameLikeInsensitive</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">  addCriterion(<span class="string">&quot;upper(FIRST_NAME) like&quot;</span>,</span><br><span class="line">    value.toUpperCase(),<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面代码是在<code>selectByExample</code>方法中使用了刚才新增的功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExtendedExample example = <span class="keyword">new</span> ExtendedExample();</span><br><span class="line">ExtendedCriteria criteria = (ExtendedCriteria) example.createCriteria();</span><br><span class="line">criteria.andFirstNameLikeInsensitive(<span class="string">&quot;fred%&quot;</span>);</span><br><span class="line">List results = selectByExample(example);</span><br></pre></td></tr></table></figure>
<h4 id="列表条件">3. 列表条件</h4>
<p>列表条件适用于where条件中多个值的情况。例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FIRST_NAME <span class="keyword">IN</span> (?,?,?)`</span><br><span class="line">`LAST_NAME <span class="keyword">NOT</span> <span class="keyword">IN</span> (?,?,?,?)</span><br></pre></td></tr></table></figure>
<p>由于包含了"in" and "not in"这样的标准查询条件,因此使用起来不太灵活。然而在<code>Criteria</code>类中您会发现有相应的方法,如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addCriterion(String anyString,List listOfObjects,String propertyName)</span><br></pre></td></tr></table></figure>
<p>Where:</p>
<p><strong>anyString</strong></p>
<p>替换where条件参数,如:FIRST_NAME IN</p>
<p><strong>listOfObjects</strong></p>
<p>list对象值替换条件值(在list前有一个开始的括号，一个结束括号在list后)。</p>
<p><strong>propertyName</strong></p>
<p>条件列名,用户排除潜在错误。</p>
<h4 id="between条件">4. Between条件</h4>
<p>Between条件参数适用于where条件特定的格式。例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FIRST_NAME <span class="keyword">BETWEEN</span> ? <span class="keyword">AND</span> ?`</span><br><span class="line">`LAST_NAME <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> ? <span class="keyword">AND</span> ?</span><br></pre></td></tr></table></figure>
<p>由于包含了"between" and "not between"这样的标准查询条件,因此使用起来不太灵活。然而在<code>Criteria</code>类中您会发现有相应的方法,如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addCriterion(String anyString,Object object1,Object object2,String propertyName)</span><br></pre></td></tr></table></figure>
<p>Where:</p>
<p><strong>anyString</strong></p>
<p>替换where条件参数,如:FIRST_NAME BETWEEN</p>
<p><strong>object1</strong></p>
<p>替换where条件第一个参数值(object1后会自带一个"and"连接词)。</p>
<p><strong>object2</strong></p>
<p>替换where条件第二个参数值(object2前会自带一个"and"连接词)。</p>
<p><strong>propertyName</strong></p>
<p>条件列名,用户排除潜在错误。</p>
<h2 id="mysql-使用注意事项">MySql 使用注意事项</h2>
<h3 id="无符号类型">无符号类型</h3>
<p>MySql支持有符号，无符号，数字类型字段。这些不是JDBC类型，因此MyBatis 生成器不能自动转换这种类型的字段。JAVA数据类型都是有符号的， 当使用无符号类型时这就会导致缺失精度。可以使用 <code>&lt;columnOverride&gt;</code> 解决MySql无符号数值类型的字段。下面是一个如何处理无符号bigint字段类型例子:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;ALLTYPES&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;UNSIGNED_BIGINT_FIELD&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Object&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;LONG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>您还必须自己强制将返回值转换为适当的类型(在上面这种情况下，需要转换为 <code>java.math.BigInteger</code>)。</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>代码生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2021/10/24/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>SpringBoot 未完待续 无期限更新</p>
<span id="more"></span>
<h2 id="springboot">SpringBoot</h2>
<ul>
<li>是什么</li>
<li>配置如何编写 yaml</li>
<li>自动配置原理：重要 -&gt; 谈资</li>
<li>集成web开发：业务的核心</li>
<li>集成数据源：Druid</li>
<li>分布式开发：Dubbo + zookeeper</li>
<li>swagger：接口文档</li>
<li>任务调度</li>
<li>SpringSecurity：Shiro</li>
</ul>
<h2 id="springcloud">SpringCloud</h2>
<ul>
<li>微服务</li>
<li>springcloud入门</li>
<li>Restful</li>
<li>Eureka</li>
<li>Bibbon</li>
<li>Feign</li>
<li>HyStrix</li>
<li>Zuul 路由网关</li>
<li>SpringCloud config: git</li>
</ul>
<p>MVC三层架构 MVVM 微服务架构</p>
<p>业务：service：userService：===&gt; 模块！</p>
<p>##第一个SpringBoot程序</p>
<p>spring--boot--starter -&gt; 所有的模块都是springboot开头的</p>
<p>##原理初探</p>
<p>自动配置：</p>
<p>pom.xml</p>
<ul>
<li>spring-boot-dependencies:核心依赖在父工程中！</li>
<li>我们在写或者引入一些Springboot依赖的时候，不需要指定版本，就因为有父工程</li>
</ul>
<p>启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动器：说白了就是Springboot的启动场景；</li>
<li>比如spring-boot-starter-web,它就会帮我们自动导入web环境所有的依赖！</li>
<li>springboot会将所有的功能场景，变成一个个的启动器</li>
<li>我们要使用什么功能，就只需要找到对应的启动器就可以了 starter</li>
</ul>
<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将springboot应用启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span>: springboot的配置</span><br><span class="line"><span class="meta">@Configuration</span>: Spring配置类</span><br><span class="line"><span class="meta">@Indexed</span>: Spring组件，可以添加索引 优化性能</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>: 自动配置</span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span>: 自动配置包</span><br><span class="line">    <span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>: 自动配置<span class="string">&quot;包注册&quot;</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span>: 自动配置导入选择</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取候选的配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">        getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">        + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>META-INF/spring.factories:自动配置的核心文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Environment Post Processors</span></span><br><span class="line"><span class="meta">org.springframework.boot.env.EnvironmentPostProcessor</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Listeners</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Filters</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Failure analyzers</span></span><br><span class="line"><span class="meta">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Template availability providers</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># DataSource initializer detectors</span></span><br><span class="line"><span class="meta">org.springframework.boot.sql.init.dependency.DatabaseInitializerDetector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializerDatabaseInitializerDetector</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Depends on database initialization detectors</span></span><br><span class="line"><span class="meta">org.springframework.boot.sql.init.dependency.DependsOnDatabaseInitializationDetector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.JobRepositoryDependsOnDatabaseInitializationDetector,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.quartz.SchedulerDependsOnDatabaseInitializationDetector,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.JdbcIndexedSessionRepositoryDependsOnDatabaseInitializationDetector</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结论：SpringBoot所有自动配置都是在启动的时候扫描并加载：spring.factories所有的自动配置类都在这里面， 但是不一定生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了对应的启动器，我们的自动装配 就会生效，然后就配置成功！</p>
<ul>
<li>1.springboot在启动的时候，从类路径小/META-INF/spring.factories获取指定的值；</li>
<li>2.将这些自动装配的类导入容器，自动装配就会生效，帮我进行自动配置！</li>
<li>3.以前我们需要手动配置的东西，现在有了springboot帮我们做了！</li>
<li>4.整合javaEE，解决方案和自动配置的东西都在 spring-boot-autoconfigure:2.5.4 下</li>
<li>5.它会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器</li>
<li>6.容器中也会存在非常多的xxxAutoConfiguration的文件(<span class="citation" data-cites="Bean">@Bean</span>),就是这些类给容器中导入了这个场景需要的所有组件；并自动配置 -&gt; <span class="citation" data-cites="Configuration">@Configuration</span> JavaConfig</li>
<li>7.有了自动配置类，免去了我们手动编写配置文件的工作</li>
</ul>
<p>关于SpringBoot谈谈你的理解：</p>
<ul>
<li>自动装配</li>
<li>run()</li>
</ul>
<p>全面接管SpringMVC的配置！ 实现！</p>
<p>##SpringBoot配置</p>
<p>yaml可以直接给实体类赋值</p>
<p><strong>精髓：</strong></p>
<ul>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类中</li>
<li>我们再来看这个自动配置类中到底配置了哪些组件(只要我们的组件存在其中，我们就不需要再手动配置了)</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可</li>
</ul>
<p><strong>xxxAutoConfiguration: 自动配置类; 给容器中添加组件</strong></p>
<p><strong>xxxProperties:封装配置文件中的相关属性;</strong></p>
<p>##SpringBoot Web开发 jar: webapp!</p>
<p>自动装配</p>
<p>springboot到底帮我们配置了什么？我们能不能进行修改？能修改哪些东西？能不能扩展？</p>
<p>要解决的问题：</p>
<ul>
<li>导入静态资源,...</li>
<li>首页</li>
<li>jsp,模板引擎Thymeleaf</li>
<li>装配扩展SpringMVC</li>
<li>增删改查</li>
<li>拦截器</li>
<li>国际化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">        registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addResourceHandler</span><span class="params">(ResourceHandlerRegistry registry, String pattern, String... locations)</span> </span>&#123;</span><br><span class="line">    addResourceHandler(registry, pattern, (registration) -&gt; registration.addResourceLocations(locations));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addResourceHandler</span><span class="params">(ResourceHandlerRegistry registry, String pattern,</span></span></span><br><span class="line"><span class="params"><span class="function">        Consumer&lt;ResourceHandlerRegistration&gt; customizer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.hasMappingForPattern(pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ResourceHandlerRegistration registration = registry.addResourceHandler(pattern);</span><br><span class="line">    customizer.accept(registration);</span><br><span class="line">    registration.setCachePeriod(getSeconds(<span class="keyword">this</span>.resourceProperties.getCache().getPeriod()));</span><br><span class="line">    registration.setCacheControl(<span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());</span><br><span class="line">    registration.setUseLastModified(<span class="keyword">this</span>.resourceProperties.getCache().isUseLastModified());</span><br><span class="line">    customizeResourceHandlerRegistration(registration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结:</p>
<ol type="1">
<li>在springboot，我们可以使用以下方式处理静态资源
<ul>
<li>webjars localhost:8080/webjars/</li>
<li>public,static,/**,resources localhost:8080/</li>
</ul></li>
<li>优先级：resources&gt;static(默认)&gt;public</li>
</ol>
<h2 id="首页如何定制">首页如何定制</h2>
<h2 id="模板引擎">模板引擎</h2>
<p>结论：只需要使用Thymeleaf，只需要导入对应的依赖即可，我们将html放在我们的templates目录下即可</p>
<p>在springboot中，有非常多的xxx Configuration 帮助我们进行扩展配置，只要看见这个东西，我们就要注意了！</p>
<h3 id="首页配置">1.首页配置</h3>
<ul>
<li>1.首页配置：注意点，所有页面的静态资源都需要使用thymeleaf接管 -&gt; @{}</li>
<li>2.url@{}</li>
</ul>
<h3 id="页面国际化">2.页面国际化</h3>
<ul>
<li>1.配置i18n文件</li>
<li>2.需要在项目中进行按钮自动切换 -&gt; 自定义组件LocaleResolver</li>
<li>3.记得将自己写的组件配置到spring容器 <span class="citation" data-cites="Bean">@Bean</span></li>
<li>4.#{}</li>
</ul>
<h2 id="如何快速开发一个web">如何快速开发一个Web</h2>
<ul>
<li>1.前端搞定：页面长什么样子：数据</li>
<li>2.设计数据库(数据库设计难点！)</li>
<li>3.前端让他能够自动运行，独立化工程</li>
<li>4.数据接口如何对接：json 对象 all in one!</li>
<li>5.前后端联调测试！</li>
</ul>
<p>1.有一套自己熟悉的后台模板：x-admin</p>
<p>2.前端界面:至少自己能够通过前端框架，组合出来一个网站页面</p>
<ul>
<li>index</li>
<li>about</li>
<li>blog</li>
<li>post</li>
<li>user</li>
</ul>
<p>3.能让这个网站独立运行！</p>
<p>一个月！</p>
<h2 id="回顾">回顾</h2>
<ul>
<li>SpringBoot是什么？</li>
<li>微服务</li>
<li>HelloWorld~</li>
<li>探究源码<sub>自动装配原理</sub></li>
<li>配置 yaml</li>
<li>多文档环境切换</li>
<li>静态资源映射</li>
<li>Thymeleaf th:xxx</li>
<li>SpringBoot 如何扩展MVC javaconfig~</li>
<li>如何修改SpringBoot的默认配置~</li>
<li>CRUD</li>
<li>国际化</li>
<li>拦截器</li>
<li>定制首页、错误页~</li>
</ul>
<h3 id="next">Next</h3>
<ul>
<li>JDBC</li>
<li><strong>Mybatis:重点</strong></li>
<li><strong>Druid：重点</strong></li>
<li><strong>Shiro:安全 重点</strong></li>
<li><strong>Spring Security:安全 重点</strong></li>
<li>异步任务~，邮件发送.定时任务</li>
<li>Swagger</li>
<li>Dubbo + Zookeeper</li>
</ul>
<h3 id="data">Data</h3>
<h3 id="mybatis">Mybatis</h3>
<p>整合包</p>
<p>mybatis-spring-boot-starter</p>
<p>1.导入包</p>
<p>2.配置文件</p>
<p>3.mybatis配置</p>
<p>4.编写sql</p>
<p>5.service层调用dao层</p>
<p>6.controller层调用service层</p>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2021/10/09/Netty/</url>
    <content><![CDATA[<p>Netty 对java原生NIO进行了封装，提供了更加便捷的操作 降低了学习成本</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<ul>
<li>Java开源框架</li>
<li>异步、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络IO程序</li>
<li>主要针对TCP协议下，面向Client端的高并发应用，或者Peer-to-Peer场景下的大量数据持续传输应用</li>
<li>Netty本质是一个NIO框架,适用于服务器通讯相关的多种应用 场景</li>
<li>体系结构</li>
</ul>
<table>
<thead>
<tr class="header">
<th>Netty</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>NIO(io、网络)</td>
</tr>
<tr class="even">
<td>原生的JDK io/网络 -&gt; java的io编程 和 网络编程</td>
</tr>
<tr class="odd">
<td>TCP/IP</td>
</tr>
</tbody>
</table>
<h2 id="应用场景">应用场景</h2>
<ul>
<li>互联网行业
<ul>
<li>高性能RPC(远程过程调用)框架</li>
</ul></li>
<li>游戏行业
<ul>
<li>定制和开发私有协议栈</li>
</ul></li>
<li>大数据领域
<ul>
<li>(AVRO数据文件共享)RPC框架，默认采用Netty进行跨界点通信</li>
</ul></li>
</ul>
<h2 id="io模型">I/O模型</h2>
<ul>
<li>Java支持三种网络编程模型
<ul>
<li>BIO
<ul>
<li>同步阻塞：一个连接一个线程 如果连接不做任何事情会造成不必要的线程开销</li>
</ul></li>
<li>NIO
<ul>
<li>同步非阻塞：客户端的连接请求会注册到多路复用器(Selector) -&gt; 轮询 一个线程维护多个连接</li>
</ul></li>
<li>AIO
<ul>
<li>异步非阻塞：异步通道 对于有效的请求才启动线程，先由操作系统完成后才通知服务端启动线程处理</li>
</ul></li>
</ul></li>
<li>实用场景
<ul>
<li>BIO
<ul>
<li>连接数目较小且固定</li>
</ul></li>
<li>NIO
<ul>
<li>连接数目多且连接比较短(轻操作)的架构</li>
</ul></li>
<li>AIO
<ul>
<li>连接数目多且连接较长(重操作)的架构</li>
</ul></li>
</ul></li>
</ul>
<h2 id="bio">BIO</h2>
<ul>
<li>BIO变成简单流程
<ul>
<li>服务器启动一个ServerSocket</li>
<li>客户端启动Socket对服务器进行通信，默认情况下服务端需要对每个客户建立一个线程与之通信</li>
<li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝</li>
<li>如果有响应，客户端线程会等待请求结束后，再继续执行</li>
</ul></li>
<li>eg.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池机制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1.创建一个线程池</span></span><br><span class="line">        <span class="comment">//2.如果有客户端连接，就创建一个线程与之通信</span></span><br><span class="line"></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//监听 等待客户端连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待连接...&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个线程与之通信</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//可以和客户端通信</span></span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个Handler方法 和客户端通信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//通过socket 获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;read...&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, read));<span class="comment">//输出客户发送的数据</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭和client的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nio">NIO</h2>
<ul>
<li>同步非阻塞</li>
<li>三大核心组件
<ul>
<li>Channel</li>
<li>Buffer</li>
<li>Selector
<ul>
<li>Buffer -&gt; Channel -&gt; Selector</li>
</ul></li>
</ul></li>
<li>NIO使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变得可以读取之前，该线程可以继续做其他事情，非阻塞写也是如此，一个线程请求写入一些数据到某些通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</li>
</ul>
<h2 id="nio和bio比较">NIO和BIO比较</h2>
<ul>
<li>BIO以流的方式处理数据，而NIO以块的方式处理数据</li>
<li>BIO基于字符流进行操作，而NIO基于Channel和Buffer进行操作,数据总是从通道读取到缓冲区，或是从缓冲区写入到通道中。</li>
</ul>
<h2 id="nio三大核心组件关系">NIO三大核心组件关系</h2>
<p>Selector、Channel、BUffer的关系</p>
<ul>
<li>每一个channel都对应一个Buffer</li>
<li>Selector对应一个线程，一个线程对应多个channel(连接)</li>
<li>channel 注册到 selector</li>
<li>程序切换到哪个channel是由事件决定的 -&gt; Event</li>
<li>Selector会根据不同的事件，在各个通道上切换</li>
<li>Buffer就是一个内存块，底层有一个数组</li>
<li>数据的读取写入是通过Buffer，双向，需要flip方法切换</li>
<li>channel是双向的，可以返回底层操作系统的情况</li>
</ul>
<h3 id="缓冲区buffer">缓冲区(Buffer)</h3>
<ul>
<li><p>本质就是一个可以读写数据的内存块 -&gt; 容器对象(含数组)</p></li>
<li><p>Buffer及其子类</p></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110082258388.png" alt="Buffer子类" /><figcaption aria-hidden="true">Buffer子类</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>capacity</td>
<td>容量，即可容纳的最大数量，在缓冲区创建时被设定并且不能改变</td>
</tr>
<tr class="even">
<td>limit</td>
<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作。且极限是可以修改的</td>
</tr>
<tr class="odd">
<td>position</td>
<td>位置，下一个要被读或写的元素索引，每次读写缓冲区数据时都会改变改值，为下次读写作准备</td>
</tr>
<tr class="even">
<td>mark</td>
<td>标记</td>
</tr>
</tbody>
</table>
<ul>
<li>ByteBuffer</li>
</ul>
<h2 id="channel">Channel</h2>
<ul>
<li>NIO的通道类似于流
<ul>
<li>通道可以同时读写</li>
<li>可以异步读取数据</li>
<li>可以缓冲读数据，也可以写数据到缓冲</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110082336254.png" alt="channel子类" /><figcaption aria-hidden="true">channel子类</figcaption>
</figure>
<h3 id="channel写文件">Channel写文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;Hello whlll&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个输出流</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过输出流获取对应的 FileChannel</span></span><br><span class="line">        FileChannel channel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 str 放入到byteBuffer</span></span><br><span class="line">        byteBuffer.put(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">        channel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="channel读文件">Channel读文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFIleChannel02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate((<span class="keyword">int</span>) file.length());</span><br><span class="line"></span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字节转成字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="channel读写文件复制">Channel读写文件(复制)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;2.txt&quot;</span>);</span><br><span class="line">        FileChannel channel1 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里有一个重要的操作</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            <span class="keyword">int</span> read = channel.read(byteBuffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;read=&quot;</span>+read);</span><br><span class="line">            <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            channel1.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="channel-零拷贝慎用">Channel 零拷贝(慎用)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建相关的流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\a.gif&quot;</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\a2.gif&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel sourceCh = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileChannel destCh = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        destCh.transferFrom(sourceCh, <span class="number">0</span>, sourceCh.size());</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="bytebuffer">ByteBuffer</h2>
<h3 id="设为仅可读">设为仅可读</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            buffer.put((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">        System.out.println(readOnlyBuffer.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (readOnlyBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(readOnlyBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        readOnlyBuffer.put((byte) 100);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="put-get">Put &amp; Get</h3>
<ul>
<li>改变读取顺序 -&gt; 如果没有越界 只会得到非预期的结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOByteBufferPutGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        byteBuffer.putInt(<span class="number">100</span>);</span><br><span class="line">        byteBuffer.putLong(<span class="number">9L</span>);</span><br><span class="line">        byteBuffer.putChar(<span class="string">&#x27;威&#x27;</span>);</span><br><span class="line">        byteBuffer.putShort((<span class="keyword">short</span>) <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(byteBuffer.getInt());</span><br><span class="line">        System.out.println(byteBuffer.getLong());</span><br><span class="line">        System.out.println(byteBuffer.getChar());</span><br><span class="line">        System.out.println(byteBuffer.getShort());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆外内存修改">堆外内存修改</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数2：可以修改的起始位置</span></span><br><span class="line"><span class="comment">         * 参数3：映射到内存的大小，即将1，txt的多少个字节映射到内存</span></span><br><span class="line"><span class="comment">         * 可以直接修改的范围就是0-5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">3</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分散和聚合流操作">分散和聚合(流操作)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 ServerSocketChannel 和 ScoketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定端口到socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">//循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead);</span><br><span class="line">                <span class="comment">//使用流打印 当前的Buffer的position 和 limit</span></span><br><span class="line">                Arrays.asList(byteBuffers).stream().map(buffer -&gt; <span class="string">&quot;position=&quot;</span>+</span><br><span class="line">                        buffer.position()+<span class="string">&quot;,limit=&quot;</span>+ buffer.limit()).forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数据读出显示到客户端</span></span><br><span class="line">            <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (byteWrite &lt; messageLength) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.write(byteBuffers);</span><br><span class="line">                byteWrite += l;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将所有的buffer复位</span></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead+<span class="string">&quot;  byteWrite=&quot;</span>+byteWrite+<span class="string">&quot;  messageLength=&quot;</span>+</span><br><span class="line">                    messageLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="selector">Selector</h2>
<ul>
<li><p>Selector能够检测多个注册的通道上是否有时间发生(多个Channel以事件的方式可以注册到同一个Selector)</p></li>
<li><p>只有在 通道真正有读写事件发生时才会进行读写</p></li>
<li><p>相关方法说明</p>
<ul>
<li>selector.select()//阻塞</li>
<li>selector.select(1000)//阻塞1000毫秒</li>
<li>selector.wakeup()//唤醒selector</li>
<li>selector.selectNow()//不阻塞，立马返还</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/NIO非阻塞原理图.png" alt="NIO非阻塞原理图" /><figcaption aria-hidden="true">NIO非阻塞原理图</figcaption>
</figure>
<ul>
<li>1.当客户端连接时，会通过ServerSocketChannel得到SocketChannel</li>
<li>2.SocketChannel注册到Selector，register(Selector sel,int ops),一个selector上可以注册多个SocketChannel
<ul>
<li>ops值</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_READ = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_WRITE = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_CONNECT = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_ACCEPT = <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>3.注册后返回一个SelectionKey，会和该Selector关联(集合)</li>
<li>4.Selector 进行监听 select 方法 返回有事件发生的通道的个数</li>
<li>5.进一步得到各个SelectionKey(有事件发生的)</li>
<li>6.再通过Selectionkey 反向获取 SocketChannel channel()</li>
<li>7.可以通过得到的 channel 完成业务处理</li>
</ul>
<h3 id="nioserver">NIOServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ServerSocketChannel -&gt; ServerSocket</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">        <span class="comment">//设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把 serverSocketChannel 注册到 selector 关心事件为 OP_ACCEPT</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环等待客户端连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待 1s 如果没有事件发生 就返回</span></span><br><span class="line">            <span class="keyword">if</span> (selector.select(<span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//没有事件发生</span></span><br><span class="line">                System.out.println(<span class="string">&quot;服务器等待了一秒，无连接&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果返回的&gt;0 获取相关的 selectionKeys集合</span></span><br><span class="line">            <span class="comment">//1.如果返回的&gt;0,表示已经获取到相关的事件</span></span><br><span class="line">            <span class="comment">//2.selector.selectedKeys() 返回关注事件的集合</span></span><br><span class="line">            <span class="comment">//3.通过 selectionKeys 反向获取通道</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历 Set&lt;SelectionKeys&gt; 使用迭代器遍历</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">//有新的客户链接我 给该客户端生成一个SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端连接成功 生成了一个socketChannel &quot;</span> + socketChannel.hashCode());</span><br><span class="line">                    <span class="comment">//将socketChannel设置为非阻塞</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//将当前的socketChannel 注册到selector</span></span><br><span class="line">                    <span class="comment">//关联一个Buffer</span></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    <span class="comment">//发生了 OP_READ</span></span><br><span class="line">                    <span class="comment">//通过key反向获取对应的Channel</span></span><br><span class="line">                    SocketChannel channel = (SocketChannel)key.channel();</span><br><span class="line">                    <span class="comment">//获取到该channel 关联的buffer</span></span><br><span class="line">                    ByteBuffer buffer = (ByteBuffer)key.attachment();</span><br><span class="line">                    channel.read(buffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;from 客户端&quot;</span>+ <span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//手动从集合中移除selectionKey ,防止重复操作</span></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nioclient">NIOClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个网络通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提供服务器端的ip和端口</span></span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.connect(inetSocketAddress)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!socketChannel.finishConnect()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;因为连接需要时间，客户端不会阻塞，可以做其他工作...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;hello whlll&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包裹一个字节数组到Buffer中去</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line">        <span class="comment">//发送数据 将buffer 数据写入 channel</span></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="serversocketchannel与socketchannel">ServerSocketChannel与SocketChannel</h2>
<ul>
<li>ServerSocketChannel偏重于创建连接并生成一个SocketChannel</li>
<li>SocketChannel偏重于对数据的读写具体等操作</li>
</ul>
<p><strong>ServerSocketChannel</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108273.png" /></p>
<ul>
<li>structure</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108307.png" /></p>
<p><strong>SocketChannel</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108424.png" /></p>
<ul>
<li>structure</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108397.png" /></p>
<h2 id="群聊系统案例">群聊系统案例</h2>
<h3 id="服务端">服务端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//初始化工作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line"></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//有事件要处理</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="comment">//监听到accept</span></span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            SocketChannel socketChannel = listenChannel.accept();</span><br><span class="line">                            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">//将该socketChannel 注册到 selector</span></span><br><span class="line">                            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            <span class="comment">//提示</span></span><br><span class="line">                            System.out.println(socketChannel.getRemoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            <span class="comment">//通道发生read事件 即通道是可读的事件</span></span><br><span class="line">                            <span class="comment">//处理读(专门写方法..)</span></span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//当前的key 删除 防止重复处理</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个SocketChannel</span></span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = channel.read(buffer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//吧缓存区的数据转成字符串输出</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">//输出该消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;from 客户端：&quot;</span>+ msg.trim());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//向其他的客户端转发消息 专门写一个方法来处理</span></span><br><span class="line">                sendInfoToOtherClients(msg, channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress()+<span class="string">&quot;离线了...&quot;</span>);</span><br><span class="line">                <span class="comment">//取消注册</span></span><br><span class="line">                key.channel();</span><br><span class="line">                <span class="comment">//关闭通道</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息给其他的客户</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendInfoToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器转发消息中...&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历所有注册到selector 上的 SocketChannel 并排除 self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过key取出对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line"></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line"></span><br><span class="line">                dest.write(buffer);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端">客户端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//服务器的IP</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, PORT));</span><br><span class="line"></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(username + <span class="string">&quot; is OK...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        info = username + <span class="string">&quot;说：&quot;</span> + info;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取从服务器端回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">//得到相关的通道</span></span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                        socketChannel.read(buffer);</span><br><span class="line"></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有可以用的通道...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//启动客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readInfo();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送数据给服务器端</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="零拷贝原理">零拷贝原理</h2>
<ul>
<li>零拷贝（Zero-Copy）是一种 <code>I/O</code> 操作优化技术，可以快速高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间。其在 <code>FTP</code> 或者 <code>HTTP</code> 等协议中可以显著地提升性能。但是需要注意的是，并不是所有的操作系统都支持这一特性，目前只有在使用 <code>NIO</code> 和 <code>Epoll</code> 传输时才可使用该特性</li>
<li>关于零拷贝主要技术有 <code>mmap+write</code>、<code>sendfile</code>和<code>splice</code>等几种方式</li>
</ul>
<h3 id="dma">DMA</h3>
<ul>
<li>direct memory access 直接内存拷贝 不使用CPU</li>
</ul>
<h3 id="虚拟内存">虚拟内存</h3>
<p>所有现代操作系统都使用虚拟内存，使用虚拟地址取代物理地址，主要有以下几点好处：</p>
<ul>
<li>多个虚拟内存可以指向同一个物理地址。</li>
<li>虚拟内存空间可以远远大于物理内存空间。</li>
</ul>
<p>利用上述的第一条特性可以优化，可以把内核空间和用户空间的虚拟地址映射到同一个物理地址，这样在 I/O 操作时就不需要来回复制了。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111530343.awebp" alt="虚拟内存" /><figcaption aria-hidden="true">虚拟内存</figcaption>
</figure>
<h3 id="传统io">传统I/O</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">read(file, tmp_buf, len);</span><br><span class="line">write(socket, tmp_buf, len);</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111523886.awebp" alt="传统I/O" /><figcaption aria-hidden="true">传统I/O</figcaption>
</figure>
<p>首先，期间共<strong>发生了 4 次用户态与内核态的上下文切换</strong>，因为发生了两次系统调用，一次是 <code>read()</code> ，一次是 <code>write()</code>，每次系统调用都得先从用户态切换到内核态，等内核完成任务后，再从内核态切换回用户态。</p>
<p>上下文切换到成本并不小，一次切换需要耗时几十纳秒到几微秒，虽然时间看上去很短，但是在高并发的场景下，这类时间容易被累积和放大，从而影响系统的性能。</p>
<p>其次，还<strong>发生了 4 次数据拷贝</strong>，其中两次是 DMA 的拷贝，另外两次则是通过 CPU 拷贝的，下面说一下这个过程：</p>
<ul>
<li><code>第一次拷贝</code>，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过 DMA 搬运的。</li>
<li><code>第二次拷贝</code>，把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由 CPU 完成的。</li>
<li><code>第三次拷贝</code>，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。</li>
<li><code>第四次拷贝</code>，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。</li>
</ul>
<p>这种简单又传统的文件传输方式，存在冗余的上文切换和数据拷贝，在高并发系统里是非常糟糕的，多了很多不必要的开销，会严重影响系统性能。</p>
<p>所以，<strong>要想提高文件传输的性能，就需要减少「用户态与内核态的上下文切换」和「内存拷贝」的次数</strong>。</p>
<h3 id="mmapwrite-方式">mmap/write 方式</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111533532.awebp" alt="mmap" /><figcaption aria-hidden="true">mmap</figcaption>
</figure>
<p>整个流程的核心区别就是，把数据读取到内核缓冲区后，应用程序进行写入操作时，直接把内核的<code>Read Buffer</code>的数据复制到<code>Socket Buffer</code>以便写入，这次内核之间的复制也是需要CPU的参与的。</p>
<p>上述流程就是少了一个 CPU COPY，提升了 I/O 的速度。不过发现上下文的切换还是4次并没有减少，这是因为还是要应用程序发起<code>write</code>操作。</p>
<h3 id="sendfile-方式">sendfile 方式</h3>
<ul>
<li>从 Linux 2.1 版本开始，Linux 引入了 <code>sendfile</code>来简化操作。<code>sendfile</code>方式可以替换上面的<code>mmap/write</code>方式来进一步优化</li>
</ul>
<p><code>sendfile</code>将以下操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mmap();</span><br><span class="line">write();</span><br></pre></td></tr></table></figure>
<p>替换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sendfile();</span><br></pre></td></tr></table></figure>
<p>这样就减少了上下文切换，因为少了一个应用程序发起<code>write</code>操作，直接发起<code>sendfile</code>操作。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111537696.awebp" alt="sendfile" /><figcaption aria-hidden="true">sendfile</figcaption>
</figure>
<p><code>sendfile</code>方式只有三次数据复制（其中只有一次 CPU COPY）以及2次上下文切换。</p>
<h3 id="带有-scattergather-的-sendfile方式">带有 scatter/gather 的 sendfile方式</h3>
<ul>
<li>Linux 2.4 内核进行了优化，提供了带有 <code>scatter/gather</code> 的 sendfile 操作，这个操作可以把最后一次 <code>CPU COPY</code> 去除。其原理就是在内核空间 Read BUffer 和 Socket Buffer 不做数据复制，而是将 Read Buffer 的内存地址、偏移量记录到相应的 Socket Buffer 中，这样就不需要复制。其本质和虚拟内存的解决方法思路一致，就是内存地址的记录。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111540173.awebp" /></p>
<p>scatter/gather 的 sendfile 只有两次数据复制（都是 DMA COPY）及 2 次上下文切换。CUP COPY 已经完全没有。不过这一种收集复制功能是需要硬件及驱动程序支持的。</p>
<h3 id="splice-方式">splice 方式</h3>
<ul>
<li><p><code>splice</code> 调用和<code>sendfile</code> 非常相似，用户应用程序必须拥有两个已经打开的文件描述符，一个表示输入设备，一个表示输出设备。与<code>sendfile</code>不同的是，<code>splice</code>允许任意两个文件互相连接，而并不只是文件与<code>socket</code>进行数据传输。对于从一个文件描述符发送数据到<code>socket</code>这种特例来说，一直都是使用<code>sendfile</code>系统调用，而<code>splice</code>一直以来就只是一种机制，它并不仅限于<code>sendfile</code>的功能。也就是说 sendfile 是 splice 的一个子集。</p>
<p>在 Linux 2.6.17 版本引入了 splice，而在 Linux 2.6.23 版本中， sendfile 机制的实现已经没有了，但是其 API 及相应的功能还在，只不过 API 及相应的功能是利用了 splice 机制来实现的。</p>
<p>和 sendfile 不同的是，splice 不需要硬件支持。</p></li>
</ul>
<h3 id="小结">小结</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th>CPU拷贝</th>
<th>DMA拷贝</th>
<th>系统调用</th>
<th>上下文切换</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>传统方法</td>
<td>2</td>
<td>2</td>
<td>read/write</td>
<td>4</td>
</tr>
<tr class="even">
<td>内存映射</td>
<td>1</td>
<td>2</td>
<td>mmap/write</td>
<td>4</td>
</tr>
<tr class="odd">
<td>sendfile</td>
<td>1</td>
<td>2</td>
<td>sendfile</td>
<td>2</td>
</tr>
<tr class="even">
<td>scatter/gather copy</td>
<td>0</td>
<td>2</td>
<td>sendfile</td>
<td>2</td>
</tr>
<tr class="odd">
<td>splice</td>
<td>0</td>
<td>2</td>
<td>splice</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>(零拷贝这部分这篇文章非常不错 截取部分为笔记 链接：https://juejin.cn/post/6995519558475841550 来源：稀土掘金)</p>
<h2 id="零拷贝的应用">零拷贝的应用</h2>
<ul>
<li>NewIOServer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line"></span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != readCount) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    readCount = socketChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                byteBuffer.rewind();<span class="comment">//倒带 position =0 mark作废</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>NewIOClient</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">7001</span>));</span><br><span class="line">        String filename = <span class="string">&quot;23考研专业资料包.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(filename).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在linux下 一个transferTo 就可以完成传输</span></span><br><span class="line">        <span class="comment">//在windows下 一次调用 transferTo 只能发送8M ，需要分段传输文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//transferTo 底层使用零拷贝</span></span><br><span class="line">        <span class="keyword">long</span> transferCount = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;发送的总的字节数 = &quot;</span>+ transferCount +<span class="string">&quot; 耗时：&quot;</span>+</span><br><span class="line">                (System.currentTimeMillis()-startTime));</span><br><span class="line"></span><br><span class="line">        fileChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="netty-概述">Netty 概述</h2>
<ul>
<li>原生NIO存在的问题
<ul>
<li>NIO的类库和API复杂，使用麻烦</li>
<li>要熟悉Java多线程</li>
<li>开发难度和开发工作量都非常大</li>
<li>JDK NIO 的Bug：臭名昭著的 Epoll Bug，它会导致 Selector 空轮询 导致CPU 100%</li>
</ul></li>
</ul>
<h2 id="netty-线程模型">Netty 线程模型</h2>
<ul>
<li>传统阻塞I/O服务模型</li>
<li>Reactor模式(根据Reactor 的数量和处理资源线程池线程的数量不同分类)
<ul>
<li>单Reactor 单线程</li>
<li>单Reactor 多线程</li>
<li>主从 Reactor 多线程(Netty对它做了一定改进)</li>
</ul></li>
</ul>
<h2 id="主从-reactor-模型">主从 Reactor 模型</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110121103510.png" /></p>
<p><strong>事件处理过程:</strong></p>
<ul>
<li>Reactor主线程对象通过select监听连接事件，通过Acceptor处理连接事件，当Acceptor处理连接事件后，主reactor将连接分配给从Reactor</li>
<li>从Reactor将连接加入到连接队列进行监听，并创建handler进行各种事件处理， 当有新事件发生时，从reactor就会对用对应的handler处理， handler读取数据后，分发给后面的worker线程处理</li>
<li>worker线程池分配独立的worker线程进行处理并返回结果，handler收到结果后再讲结果返回给客户端</li>
</ul>
<h2 id="netty-快速入门案例">Netty 快速入门案例</h2>
<h3 id="nettyserver">NettyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 BossGroup &amp; WorkGroup</span></span><br><span class="line">        <span class="comment">//两个都是无线循环</span></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建服务器的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)<span class="comment">//设置为两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)<span class="comment">//设置线程队列的连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)<span class="comment">//设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class="comment">//创建一个通道测试对象(匿名对象)</span></span><br><span class="line">                        <span class="comment">//给pipeline 设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);<span class="comment">//为 workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;......服务器 is ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定一个端口并且同步，生成一个 ChannelFuture 对象</span></span><br><span class="line">            <span class="comment">//启动服务器并绑定端口</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>childHandler 对应 workerGroup</li>
<li>handler 对应 bossGroup</li>
</ul>
<h3 id="nettyserverhandler">NettyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们定义一个handler 需要继承 Netty 绑定好某一个HandlerAdaptor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取数据实例</span></span><br><span class="line">    <span class="comment">//ChannelHandlerContext ctx：上下文 含有 管道pipeline ，通道channel ，地址</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器读取线程：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx=&quot;</span> + ctx);</span><br><span class="line">        System.out.println(<span class="string">&quot;看看channel 和 pipeline的关系&quot;</span>);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        ChannelPipeline pipeline = ctx.pipeline();<span class="comment">//本质是一个双向链表</span></span><br><span class="line"></span><br><span class="line">        ByteBuf buffer = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息是：&quot;</span>+buffer.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据读取完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据写入到缓存并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nettyclient">NettyClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(group) <span class="comment">//设置线程组</span></span><br><span class="line">                    .channel(NioSocketChannel.class) <span class="comment">//设置客户端通道实现类(反射)</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());<span class="comment">//加入自己的处理器</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端 ok...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动客户端连接服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            <span class="comment">//关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nettyclienthandler">NettyClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, server：喵&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道有读取事件时 就触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息：&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址：&quot;</span>+ ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="taskqueue-任务队列">TaskQueue 任务队列</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵3&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<h2 id="future-listener机制">Future-Listener机制</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给 sf 注册监听器 监控我们关心的事件</span></span><br><span class="line">            channelFuture.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (channelFuture.isSuccess()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="http-实例">Http 实例</h2>
<h3 id="testserver">TestServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">6543</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="testserverhandler">TestServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HttpObject 客户端和服务端通信的数据被封装成 HttpObject</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;msg 类型=&quot;</span> + msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端地址&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line"></span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求了 favicon.ico 不作处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回复信息给浏览器</span></span><br><span class="line"></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello 我是服务器&quot;</span>, CharsetUtil.UTF_16);</span><br><span class="line"></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line"></span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将构建好的 response 返回</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="testserverinitializer">TestServerInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向管道加入处理器</span></span><br><span class="line">        <span class="comment">//得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入Netty 提供的httpServerCodec</span></span><br><span class="line">        <span class="comment">//Netty 提供处理http的编解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加一个自定义的Handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestHttpServerHandler&quot;</span>,<span class="keyword">new</span> TestServerHandler());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="netty-群聊系统">Netty 群聊系统</h2>
<h3 id="groupchatserver">GroupChatServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup boosGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            b.group(boosGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//向Pipeline 里加入解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Netty 服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听关闭事件</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            boosGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatserverhandler">GroupChatServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Channel&gt; channels = <span class="keyword">new</span> HashMap&lt;String, Channel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个channel组 管理所有的channel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将当前channel加入到 channelGroup</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//将该客户加入聊天的信息推送给其他在线的客户端</span></span><br><span class="line">        <span class="comment">//该方法会将 ChannelGroup 所有的channel 遍历 并发送消息</span></span><br><span class="line">        <span class="comment">//我们不需要自己遍历</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + simpleDateFormat.format(<span class="keyword">new</span> java.util.Date()) + <span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line"></span><br><span class="line">        channels.put(<span class="string">&quot;id100&quot;</span>,channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;上线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;下线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;离开了\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;channelGroup size&quot;</span> + channelGroup.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line"></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) &#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;发送消息了&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[自己]发送了消息&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatclient">GroupChatClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                    .group(group)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>+channel.localAddress()+<span class="string">&quot;------&quot;</span>);</span><br><span class="line">            <span class="comment">//客户端需要输入信息，创建一个扫描器</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">//通过channel发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatclienthandler">GroupChatClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="netty-心跳机制">Netty 心跳机制</h2>
<h3 id="myserver">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//增加一个Netty提供的IdleStateHandler -&gt; netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">//当 IdleStateEvent 触发后，就会传递给管道的下一Handler去处理 通过调用下一个 Handler的 userEventTriggered</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">13</span>, <span class="number">5</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverhandler">MyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">//将 evt 向下转型 IdleStateEvent</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line"></span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;---超时时间---&quot;</span>+eventType);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器做相应处理...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="websocket长链接">WebSocket长链接</h2>
<h3 id="myserver-1">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//因为是基于Http协议,使用http的编码和解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//是以块方式写，添加ChunkedWrite处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//http的数据在传输过程中，它是分段的 HttpObjectAggregator 可以将多个段聚合起来</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//将http协议 升级为 ws协议 -&gt; 保持长链接</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//自定义的Handler ，处理业务逻辑</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyTextWebSocketFrameHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="mytextwebsocketframehandler">MyTextWebSocketFrameHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示一个文本帧(frame)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端收到消息 &quot;</span>+ msg.text());</span><br><span class="line">        <span class="comment">//回复浏览器</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">&quot;服务器时间&quot;</span> + LocalDate.now() + <span class="string">&quot; &quot;</span> + msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdd 被调用&quot;</span>+ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdd 被调用&quot;</span>+ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常发生 &quot;</span>+cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hello.html">hello.html</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebSocket) &#123;</span></span><br><span class="line"><span class="javascript">        socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:7000/hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//收到服务器端回送的消息</span></span></span><br><span class="line"><span class="javascript">        socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + ev.data;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = <span class="string">&quot;连接开启了&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;连接关闭了...&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;当前浏览器不支持websocket编程&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">window</span>.socket) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//通过Socket 发送消息</span></span></span><br><span class="line"><span class="javascript">            socket.send(message);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;连接没有开启&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;responseText&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空内容&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="pipline-和-channelpipline">Pipline 和 ChannelPipline</h2>
<ul>
<li>addFirst: 把一个业务处理类添加到链中的第一个位置</li>
<li>addLast: 吧一个业务处理类添加到链中的最后一个位置</li>
</ul>
<h2 id="channelhandlercontext">ChannelHandlerContext</h2>
<ul>
<li>保存Channel 相关的所有上下文信息，同时关联一个ChannelHandler 对象</li>
<li>即ChannelHandlerContext 中包含一个具体的事件处理器 ChannelHandler，同时ChannelHandlerContext中也绑定了对应的pipeline和Channel的信息，方便对ChannelHandler进行调用</li>
<li>常用方法
<ul>
<li>close()</li>
<li>flush() 刷新</li>
<li>writeAndFlush(Object msg) 将数据写到 ChannelPipeline 中当前 ChannelHandler 的下一个 ChannelHandler 开始处理</li>
</ul></li>
</ul>
<h2 id="channeloption">ChannelOption</h2>
<ul>
<li>ChannelOption.SO_BACKLOG : 初始化可连接队列的大小</li>
<li>ChannelOption.SO_KEEPALIVE</li>
</ul>
<h2 id="eventloopgroup-和其实现类-nioeventloopgroup">EventLoopGroup 和其实现类 NioEventLoopGroup</h2>
<ul>
<li>EventLoopGroup是一组EventLoop的抽象，Netty为了更好的利用多核CPU的资源，一般会有多个EventLoop同时工作，每个EventLoop维护着一个Selector 实例</li>
<li>EventLoopGroup提供next接口，可以从组里面按照一定规则获取其中一个EventLoop来处理任务，在Netty服务器端编程中，我们一般都需要提供两个EventLoopGroup eg. BossEventGroup 和 WorkderEventLoopGroup</li>
</ul>
<h2 id="unpooled-类">Unpooled 类</h2>
<ul>
<li>Netty 提供一个专门用来操作缓冲区的工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个ByteBuf</span></span><br><span class="line">        <span class="comment">//创建一个对象 该对象包含一个数组</span></span><br><span class="line">        <span class="comment">//在Netty的buffer中不需要使用flip 进行反转</span></span><br><span class="line">        <span class="comment">//通过 readIndex 和 writeIndex 和 capacity 将buffer分成三个区域</span></span><br><span class="line">        <span class="comment">//0---readIndex 已经读取的区域</span></span><br><span class="line">        <span class="comment">//readIndex---writeIndex 可读的区域</span></span><br><span class="line">        <span class="comment">//writeIndex---capacity 可写的区域</span></span><br><span class="line">        ByteBuf buffer = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            buffer.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; buffer.capacity(); i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(buffer.getByte(i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            System.out.println(buffer.readByte());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello world&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (byteBuf.hasArray()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] array = byteBuf.array();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(array, CharsetUtil.UTF_8).trim());</span><br><span class="line">            System.out.println(<span class="string">&quot;byteBuf=&quot;</span>+byteBuf);</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.arrayOffset());</span><br><span class="line">            System.out.println(byteBuf.readerIndex());</span><br><span class="line">            System.out.println(byteBuf.writerIndex());</span><br><span class="line">            System.out.println(byteBuf.capacity());</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.getByte(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len = byteBuf.readableBytes();</span><br><span class="line">            System.out.println(<span class="string">&quot;Len=&quot;</span>+len);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                System.out.println(byteBuf.getByte(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">0</span>, <span class="number">4</span>, CharsetUtil.UTF_8));</span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">4</span>, <span class="number">6</span>, CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="channelhandler-调用机制">ChannelHandler 调用机制</h2>
<ul>
<li>ChannelPipeline 提供了ChannelHandler链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过pipeline中的一些列ChannelOutboundHandler 并被这些Handler处理，反之则称为入站的</li>
</ul>
<h3 id="myserver-2">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> MyServerInitializer());<span class="comment">//定义一个初试化类</span></span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverinitializer">MyServerInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverhandler-1">MyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端&quot;</span>+ctx.channel().remoteAddress()+<span class="string">&quot;读取到long&quot;</span>+msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给客户端回送一个long</span></span><br><span class="line">        ctx.writeAndFlush(<span class="number">98765L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="myclient">MyClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> MyClientInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">7000</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myclientinitializer">MyClientInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入一个出站的handler 对数据进行一个编码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line">        <span class="comment">//加入一个自定义的handler 处理业务</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myclienthandler">MyClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回送消息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的ip=&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">        System.out.println(<span class="string">&quot;收到的服务器消息=&quot;</span>+ msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class="line">        ctx.writeAndFlush(<span class="number">123456L</span>);<span class="comment">//发送的是一个Long</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//16个字节</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;abcdabcdabcdabcd&quot;,CharsetUtil.UTF_8));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mybytetolongdecoder">MyByteToLongDecoder</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyByteToLongDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 入站的ByteBuf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out List 集合，将解码的数据传给下一个Handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyByteLongDecoder 被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (in.readableBytes() &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">            out.add(in.readLong());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mylongtobyteencoder">MyLongToByteEncoder</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLongToByteEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Long msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyLongToByteEncoder encode&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;msg=&quot;</span>+msg);</span><br><span class="line">        out.writeLong(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq笔记</title>
    <url>/2021/10/07/RabbitMq%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>通信小能手 RabbitMq 多种模式 满足你的各种需求~</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>原始操作系统的TCP/IP协议满足不了项目需求</p>
<p>添加中间件 添加头 -&gt; 满足要求</p>
<h2 id="中间件">中间件</h2>
<ul>
<li>特点
<ul>
<li>高可用</li>
<li>可靠性</li>
</ul></li>
<li>分布式消息中间件
<ul>
<li>ActiveMQ：老派</li>
<li>RabbitMQ：spring同源 支持度高</li>
<li>Kafka：开源 性能最高 最接近底层</li>
<li>RocketMQ：慎选</li>
<li>场景
<ul>
<li>消息中间件监控数据</li>
<li>异步数据传输场景</li>
<li>削峰填谷场景</li>
<li>任务调度场景</li>
<li>海量数据同步场景</li>
<li>分布式事务场景</li>
<li>日记管理场景</li>
<li>大数据分析场景</li>
</ul></li>
<li>考量
<ul>
<li>AMQP</li>
<li>MQTT</li>
<li>持久化设计</li>
<li>Kafka协议</li>
<li>消息分发设计</li>
<li>高可用</li>
<li>可靠性</li>
<li>容错</li>
</ul></li>
</ul></li>
<li>负载均衡中间件
<ul>
<li>Nginx</li>
<li>LVS负载均衡软件</li>
<li>KeepAlive -&gt; 高可用</li>
<li>CDN -&gt; 加速</li>
</ul></li>
<li>缓存中间件
<ul>
<li>MemCache</li>
<li>Redis</li>
</ul></li>
<li>数据库中间件
<ul>
<li>Mycat</li>
<li>Shardingjdbc</li>
</ul></li>
<li>案例分析
<ul>
<li>异步数据保存</li>
<li>订单数据的消息分发</li>
<li>分布式事务</li>
<li>消息的容错</li>
<li>分布式锁</li>
<li>分布式会话</li>
<li>分库分表</li>
</ul></li>
</ul>
<h2 id="架构">架构</h2>
<ul>
<li>单体架构
<ul>
<li>耦合度太高</li>
<li>运维成本过高</li>
<li>不易维护</li>
<li>服务器的成本太高</li>
<li>升级架构的复杂度变高</li>
</ul></li>
<li>分布式架构:一个请求由多个系统来处理
<ul>
<li>学习成本高 技术栈过多</li>
<li>运维成本 服务器成本高</li>
<li>人员成本</li>
<li>项目的复杂度上升</li>
<li>错误和容错率</li>
<li>占用的端口和通讯的选择成本</li>
<li>安全性的考虑被迫得选择RMI/MQ服务端通讯</li>
</ul></li>
</ul>
<blockquote>
<p>MQ消息队列：负责消息的接受、存储和传递，它的性能要高于普通的服务和技术</p>
</blockquote>
<h2 id="消息队列协议">消息队列协议</h2>
<ul>
<li>AMQP:Erlang(底层C) 开发
<ul>
<li>1.分布式事务支持</li>
<li>2.消息的持久化支持</li>
<li>高性能和高可靠性的消息处理优势</li>
</ul></li>
<li>MQTT:
<ul>
<li>特点:
<ul>
<li>轻量</li>
<li>结构简单</li>
<li>传输块、不支持事务</li>
<li>没有持久化设计</li>
</ul></li>
<li>应用场景：适用于计算能力有限、低带宽、网络不稳定的场景</li>
</ul></li>
<li>OpenMessage:
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>支持事务和持久化设计</li>
</ul></li>
<li>KafKa:
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>无事务支持</li>
<li>有持久化设计</li>
</ul></li>
</ul>
<h2 id="消息队列的持久化">消息队列的持久化</h2>
<p>数据不存在内存中 -&gt; 写入磁盘中 持久化保存</p>
<h2 id="消息的分发策略">消息的分发策略</h2>
<p>角色:</p>
<ul>
<li>1.生产者</li>
<li>2.存储消息</li>
<li>3.消费者</li>
</ul>
<h2 id="rabbitmq的角色分类">RabbitMQ的角色分类</h2>
<blockquote>
<p>1:none</p>
</blockquote>
<ul>
<li>不能访问management plugin</li>
</ul>
<blockquote>
<p>2:management:查看自己相关节点信息</p>
</blockquote>
<ul>
<li>列出自己可以通过AMQP登入的虚拟机</li>
<li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li>
<li>查看和关闭自己的channels和connections</li>
<li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts 中的活动信息。</li>
</ul>
<blockquote>
<p>3:Policymaker</p>
</blockquote>
<ul>
<li>包含management所有权限</li>
<li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li>
</ul>
<blockquote>
<p>4:Monitoring</p>
</blockquote>
<ul>
<li>包含所有management所有权限</li>
<li>罗列出所有的virtual hosts 包括不能登录的virtual hosts</li>
<li>查看其他用户的connections和channel信息</li>
<li>查看节点级别的数据如clustering和memory使用情况</li>
<li>查看所有的virtual hosts的全局统计信息</li>
</ul>
<blockquote>
<p>5:Administrator</p>
</blockquote>
<ul>
<li>最高权限</li>
<li>可以创建和删除virtual hosts</li>
<li>可以查看，创建和删除users</li>
<li>查看创建permissions</li>
<li>关闭所有用户的connections</li>
</ul>
<h2 id="模式">模式</h2>
<ul>
<li>Simple:
<ul>
<li>1.创建连接工程</li>
<li>2.创建连接Connection</li>
<li>3.通过连接获取通道Channel</li>
<li>4.通过通道创建交换机、声明队列、绑定关系、路由key、发送消息和接受消息</li>
<li>5.准备消息内容</li>
<li>6.发送消息给队列queue</li>
<li>7.关闭连接</li>
<li>8.关闭通道</li>
</ul></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）yum 包更新到最新</span><br><span class="line">&gt; yum update</span><br><span class="line">（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">（3）设置yum源为阿里云</span><br><span class="line">&gt; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">（4）安装docker</span><br><span class="line">&gt; yum install docker-ce -y</span><br><span class="line">（5）安装后查看docker版本</span><br><span class="line">&gt; docker -v</span><br><span class="line"> (6) 安装加速镜像</span><br><span class="line"> sudo mkdir -p /etc/docker</span><br><span class="line"> sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"> &#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://0wrdwnn6.mirror.aliyuncs.com&quot;]</span><br><span class="line"> &#125;</span><br><span class="line"> EOF</span><br><span class="line"> sudo systemctl daemon-reload</span><br><span class="line"> sudo systemctl restart docker</span><br><span class="line"> (7) 获取rabbit镜像：</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"> (8)创建并运行容器</span><br><span class="line">&gt; docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e           RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</span><br><span class="line"> (9)查看日志</span><br><span class="line">&gt; docker logs -f myrabbit</span><br><span class="line"> (10)查看服务</span><br><span class="line">&gt; docker ps -a</span><br><span class="line"> (11)关闭容器</span><br><span class="line">&gt; docker 08d03ae27334 stop</span><br></pre></td></tr></table></figure>
<h3 id="为什么rabbitmq是基于通道而不是基于连接">为什么RabbitMq是基于通道而不是基于连接？</h3>
<ul>
<li>Connection表示到消息代理的真实TCP连接，而Channel是其中的虚拟连接(AMQP连接)。这样，您可以在应用程序内部使用任意数量的(虚拟)连接，而不会使TCP连接使代理过载</li>
<li>您可以为所有内容使用一个Channel。但是，如果您有多个线程，建议为每个线程使用不同的Channel</li>
</ul>
<h3 id="可以存在没有交换机的队列么">可以存在没有交换机的队列么？</h3>
<ul>
<li>不可以，没有为队列指定交换机时，同一指向默认交换机</li>
</ul>
<h2 id="rabbitmq核心组件">RabbitMq核心组件</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-structure.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>每一个virtual Host里还有routinkey -&gt; 条件 分发给不同的消费者 (对应非广播场景) -&gt; 过滤</li>
<li>RabbitMQ 消息传递模型的核心思想是生产者从不直接向队列发送任何消息 实际上，生产者经常甚至根本不知道消息是否会被传送到任何队列</li>
<li>生产者只能将消息发送到<em>交换</em>。交换是一件非常简单的事情。一方面它接收来自生产者的消息，另一方面将它们推送到队列中。交易所必须确切地知道如何处理它收到的消息。它应该附加到特定队列吗？它应该附加到许多队列中吗？或者它应该被丢弃。其规则由<em>交换类型</em>定义 。</li>
</ul>
<h2 id="工作模式">工作模式</h2>
<h3 id="简单模式">简单模式</h3>
<ul>
<li>simple
<ul>
<li>应用场景：手机短信、邮件单发</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-simple.png" alt="simple" /><figcaption aria-hidden="true">simple</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28 20:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明组件、交换机和队列、简单模板案例、交换机使用默认交换机，队列需要声明</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否持久化</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否专属</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否自动删除，从第一个消费端监听队列开始</span></span><br><span class="line">                <span class="comment">//计算，到最后一个消费端断开连接，队列就会自动删除</span></span><br><span class="line">                <span class="keyword">null</span>);<span class="comment">//map类型 key值固定一批属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息到队列 生产端 永远不会把消息直接发给队列，发给交换机</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;whlll你好啊&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//将消息发给(AMQP DEFAULT)交换机 名字&quot;&quot;</span></span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,<span class="comment">//发送给的交换机的名字，默认为空</span></span><br><span class="line">                <span class="string">&quot;simple&quot;</span>,<span class="comment">//设置路由key</span></span><br><span class="line">                <span class="keyword">null</span>,<span class="comment">//发送消息时携带的参数</span></span><br><span class="line">                msgByte<span class="comment">//消息体</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;simple&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 传递回调对象. 消息就在这个对象里</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> s        当前消费端id</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> delivery 封装了消息的对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="comment">//从消息对象中拿到信息</span></span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费玩消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 当连接对象channel 主动关闭消费端连接时 cancel 这个方法才会被调用</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@param</span> s 消费端id</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//使用while true 将线程卡死，否则看不到消息消费逻辑</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="work模式">Work模式</h3>
<ul>
<li>work queues
<ul>
<li>工作队列（又名：<em>任务队列</em>）背后的主要思想是避免立即执行资源密集型任务而不得不等待它完成。相反，我们安排任务稍后完成。我们将一个<em>任务</em>封装 成一条消息并发送到队列中。在后台运行的工作进程将弹出任务并最终执行作业。当您运行许多工人时，任务将在他们之间共享</li>
<li>应用场景：抢红包、资源分配</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-work.png" alt="work queues" /><figcaption aria-hidden="true">work queues</figcaption>
</figure>
<h4 id="轮询分发">轮询分发</h4>
<ul>
<li>轮询分发(均匀分给每一个消费者)：默认为轮询 可以不设置为手动应答</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="公平分发">公平分发</h4>
<ul>
<li>公平分发(谁新能好优先分给谁处理)：配置Qos并谁设置为手动应答</li>
<li>Qos：每次从队列读取的消息条数(根据具体的设备资源情况而定)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>+i;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者02：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="发布订阅模式">发布/订阅模式</h3>
<ul>
<li>publish/sbscribe(Fanout)
<ul>
<li>工作队列背后的假设是每个任务都被交付给一个工人。在这一部分，我们将做一些完全不同的事情——我们将向多个消费者传递一条消息。这种模式被称为“发布/订阅”</li>
<li>应用场景：邮件的群发、广告的群发</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/exchange.png" alt="excahnge" /><figcaption aria-hidden="true">excahnge</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutMode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初试化连接</span></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机，队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字,绑定默认交换机,暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME,TYPE);<span class="comment">//声明了一个名为 fanout_ex 类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系,由于发布订阅,绑定时需要提供自定义的路由key,随意</span></span><br><span class="line">        channel.queueBind(QUEUE01,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,发布订阅模式&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;北京&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="路由模式">路由模式</h3>
<ul>
<li>routing(direct)
<ul>
<li>应用场景：处理一些特殊的消息逻辑,可以经过路由的筛选</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050045110.png" alt="routing" /><figcaption aria-hidden="true">routing</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备交换机，队列名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01 = TYPE + <span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02 = TYPE + <span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字，绑定默认交换机，暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);<span class="comment">//声明一个名为fanout_ex类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系。由于发布订阅，绑定时需要提供自定义的路由key，随意</span></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;你好，路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;上海&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主题模式">主题模式</h3>
<ul>
<li>topics
<ul>
<li>虽然使用直接交换改进了我们的系统，但它仍然有局限性——它不能基于多个标准进行路由。</li>
<li>*（星号）可以正好代替一个词。</li>
<li># (hash) 可以代替零个或多个单词。</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046915.png" alt="eg_1" /><figcaption aria-hidden="true">eg_1</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046851.png" alt="eg_2" /><figcaption aria-hidden="true">eg_2</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChannelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机,队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//topic_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);</span><br><span class="line"></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.北京.#&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.*.*.*.*&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;*.上海.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;中国.上海.大兴.亦庄.你爹&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="header模式">Header模式</h3>
<ul>
<li>RPC(header)
<ul>
<li>如果我们需要在远程计算机上运行一个函数并等待结果呢？嗯，这是一个不同的故事。这种模式通常称为<em>远程过程调用</em>或<em>RPC</em></li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050056988.png" alt="header" /><figcaption aria-hidden="true">header</figcaption>
</figure>
<ul>
<li>第三个参数 -&gt; 附加参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes());</span><br></pre></td></tr></table></figure>
<h2 id="整合springboot-fanout模式">整合SpringBoot-Fanout模式</h2>
<h3 id="生产者">生产者</h3>
<h4 id="application.yml">application.yml</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.115</span><span class="number">.207</span><span class="number">.246</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>
<h4 id="service">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="config">config</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="test">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者">消费者</h3>
<h4 id="service.fanout">service.fanout</h4>
<ul>
<li>FanoutDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>FanoutEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>FanoutSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="整合springboot-direct模式">整合SpringBoot-Direct模式</h2>
<h3 id="生产者-1">生产者</h3>
<h4 id="service-1">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="config-1">config</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;direct_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(directExchange()).with(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(directExchange()).with(<span class="string">&quot;duanxin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(directExchange()).with(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="test-1">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Fanout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderFanout(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Direct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderDirect(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者-1">消费者</h3>
<h4 id="service.direct">service.direct</h4>
<ul>
<li>DirectDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>DirectEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>DirectSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="懒加载">懒加载</h2>
<p>配置类应该先在消费者配置启动，等待消息即可</p>
<h2 id="整合springboot-topic模式注解方式">整合SpringBoot-Topic模式(注解方式)</h2>
<h3 id="生产者-2">生产者</h3>
<h4 id="service-2">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTopic</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;topic_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;com.duanxin.&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="test-2">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    orderService.makeOrderTopic(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者-2">消费者</h3>
<h4 id="service.topic">service.Topic</h4>
<ul>
<li>TopicDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.duanxin.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TopicEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.email.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TopicSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;sms.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.sms.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ttl过期时间">TTL过期时间</h2>
<p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置。</p>
<ul>
<li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li>
<li>第二种方法是对消息进行单独设置，每条消息TTL可以不同。</li>
</ul>
<p>如果上述两种方法同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message被投递到死信队列， 消费者将无法再收到该消息。</p>
<p><strong>实现设置队列过期时间</strong></p>
<ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlRabbitmqConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>业务层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTtl</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;user:&quot;</span>+orderNumer);</span><br><span class="line">        String routeKey = <span class="string">&quot;ttl&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ fanout</span></span><br><span class="line">        rabbitTemplate.convertAndSend(ttlExchangeName, routeKey, orderNumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Testvoid</span> contextLoads2Ttl() <span class="keyword">throws</span> InterruptedException &#123;    orderService.makeOrderTtl(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>消费者监视类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;ttl.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">ttlRevice</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ttl --&gt;&gt;&gt;&gt;&gt;&gt;&gt;邮件发送消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现设置消息过期机制</strong></p>
<ul>
<li>producer代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">messageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;message.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">messageOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;message_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(messageQueue()).to(messageOrderExchange()).with(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>producer发送消息代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlOrder</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">&quot;message_order_exchange&quot;</span>;</span><br><span class="line">        String routeKey = <span class="string">&quot;message&quot;</span>;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot;,订单编号是：&quot;</span> + orderNumer);</span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey,userId, messagePostProcessor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>consumer消费者监听方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;message.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">messageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageRevice</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message-&gt;&gt;&gt;&gt;消费消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>生产者测试类发送消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.ttlOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot; 1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="死信队列">死信队列</h2>
<ul>
<li><p>概念</p></li>
<li><p>当一条消息在队列中出现以下三种情况的时候，该消息就会变成一条死信。</p>
<ul>
<li>消息被拒绝(basic.reject / basic.nack)，并且requeue = false</li>
<li>消息TTL过期</li>
<li>队列达到最大长度</li>
</ul></li>
<li><p>当消息在一个队列中变成一个死信之后，如果配置了死信队列，它将被重新publish到死信交换机，死信交换机将死信投递到一个队列上，这个队列就是死信队列</p></li>
<li><p>生产者配置类</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadRabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;dead_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadqueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadbinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadqueue()).to(deadExchange()).with(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改原TTL队列属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dead_direct_exchange&quot;</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;dead&quot;</span>);<span class="comment">//fanout不需要配置</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><strong>error：队列已存在 不会覆盖 (线上环境 -&gt; 新建一个属性一样的队列绑定死信队列来替换 危险 -&gt; 直接删除线上队列)</strong></p>
<h2 id="rabbitmq内存磁盘的监控">RabbitMq内存磁盘的监控</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-io.png" alt="rabbitmq-io" /><figcaption aria-hidden="true">rabbitmq-io</figcaption>
</figure>
<ul>
<li>内存</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">vm_memory_high_watermark.relative</span> = (<span class="number">0.4</span>~<span class="number">0.7</span>)</span><br><span class="line">&gt;<span class="attr">vm_memory_high_watermark.absolute</span> = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_vm_memory_high_watermark.absolute</span> = <span class="number">50</span>MB</span><br></pre></td></tr></table></figure>
<ul>
<li>磁盘</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">disk_free_limit.relative</span> = <span class="number">3.0</span>disk_free_limit.absolute = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_disk_free_limit.absolute</span> = <span class="number">100</span>GB</span><br></pre></td></tr></table></figure>
<h2 id="rabbitmq分布式事务">Rabbitmq分布式事务</h2>
<p>在不同的系统之间(JVM)如何保持数据的一致性 -&gt; 分布式事务</p>
<ul>
<li>本地消息表(异步确保)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110071434955.png" /></p>
<p>执行步骤如下:</p>
<ol type="1">
<li>MQ发送方发送远程事务消息到MQ Server;</li>
<li>MQ Server给予响应, 表明事务消息已成功到达MQ Server.</li>
<li>MQ发送方Commit本地事务.</li>
<li>若本地事务Commit成功, 则通知MQ Server允许对应事务消息被消费; 若本地事务失败, 则通知MQ Server对应事务消息应被丢弃.</li>
<li>若MQ发送方超时未对MQ Server作出本地事务执行状态的反馈, 那么需要MQ Servfer向MQ发送方主动回查事务状态, 以决定事务消息是否能被消费.</li>
<li>当得知本地事务执行成功时, MQ Server允许MQ订阅方消费本条事务消息</li>
</ol>
<p>需要额外说明的一点, 就是事务消息投递到MQ订阅方后, 并不一定能够成功执行. 需要MQ订阅方主动给予消费反馈(ack)</p>
<ul>
<li>如果MQ订阅方执行远程事务成功, 则给予消费成功的ack, 那么MQ Server可以安全将事务消息移除;</li>
<li>如果执行失败, MQ Server需要对消息重新投递, 直至消费成功.</li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>消息中间件在系统中扮演一个重要的角色, 所有的事务消息都需要通过它来传达, 所以消息中间件也需要支持 HAC 来确保事务消息不丢失.</li>
<li>根据业务逻辑的具体实现不同，还可能需要对消息中间件增加消息不重复, 不乱序等其它要求.</li>
</ul>
<h3 id="适用场景">适用场景</h3>
<ul>
<li>执行周期较长</li>
<li>实时性要求不高</li>
</ul>
<p>例如:</p>
<ul>
<li>跨行转账/汇款业务(两个服务分别在不同的银行中)</li>
<li>退货/退款业务</li>
<li>财务, 账单统计业务(先发送到消息中间件, 然后进行批量记账)</li>
</ul>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>RabbitMq</tag>
        <tag>消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/10/10/Mybatis/</url>
    <content><![CDATA[<p>首尾一部分是Spring的知识点,因为一开始是在Spring下整合Mybatis，然后在这基础上整合了Mybatis的一些知识点</p>
<span id="more"></span>
<h2 id="spring常用依赖">Spring常用依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用bean配置注解支持">常用Bean配置(注解支持)</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.whlll.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="作用域-scope">作用域 (Scope)</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;LHL&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>singleton</code>: 单例模式 -&gt; 装载的类始终为同一个</li>
<li><code>prototype</code>: 原型模式 -&gt; 装载的类不同(分别装载)</li>
</ul>
<h2 id="注释说明">注释说明</h2>
<ul>
<li><code>@Atuowired</code>：自动装配(先)类型(后)名字
<ul>
<li>如果Atuowired不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")来</li>
</ul></li>
<li><code>@Nullable</code>：字段标记这个注解 -&gt; 说明这个字段可以为null</li>
<li><code>@Resource</code>：自动装配(先)名字(后)类型</li>
<li><code>@Component</code>：组件 -&gt; 放在类上 将某个类注入到Spring容器 实现bean的自动装载</li>
<li><code>@Component</code>：的衍生注解(功能都一样)：</li>
<li><code>dao</code>：<span class="citation" data-cites="Repository">[@Repository]</span></li>
<li><code>service</code>：<span class="citation" data-cites="Service">[@Service]</span></li>
<li><code>controller</code>：<span class="citation" data-cites="Controller">[@Controller]</span></li>
<li><code>@value</code>：实例化赋值,放在对象或setter方法前，相当于</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.whlll.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Scope</code>：作用域 -&gt; <code>singleton</code> / <code>prototype</code></li>
</ul>
<h2 id="整合mybatis">整合Mybatis</h2>
<h3 id="导入相关jar包">1.导入相关jar包</h3>
<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的</li>
<li>aop织入</li>
<li>mybatis-spring</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Spring操作数据库的话 需要spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="mybatis">Mybatis</h1>
<h2 id="回忆mybatis">回忆mybatis</h2>
<p>​ 1.编写实体类 ​ 2.编写核心配置文件 ​ 3.编写接口 ​ 4.编写Mapper.xml ​ 5.测试</p>
<h2 id="简介">1.简介</h2>
<h3 id="什么是mybatis">1.1 什么是Mybatis?</h3>
<p>Mybatis -&gt; <em>优秀的持久化框架</em>(ibatis)</p>
<h3 id="持久层">1.2 持久层</h3>
<ul>
<li>数据持久化</li>
<li>持久化就是将程序的数据在持久状态和瞬时状态的转化过程</li>
<li>内存：断电即失</li>
<li>数据库(jdbc)，io文件持久化。</li>
<li>生活：冷藏、 罐头。</li>
</ul>
<h4 id="为什么需要持久化">为什么需要持久化？</h4>
<ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵了</li>
</ul>
<h3 id="持久层dao层service层controller层...">1.3 持久层(Dao层、Service层、Controller层...)</h3>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="为什么需要mybatis">1.4 为什么需要Mybatis?</h3>
<ul>
<li>帮助程序员将数据存入到数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂 -&gt; 简化 -&gt; 框架、自动化</li>
<li>不用Mybatis也可以，更容易上手 &lt;- 技术没有高低之分</li>
<li>优点
<ul>
<li>简单易学: 本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活: mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合: 通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul></li>
</ul>
<h4 id="最重要的一点使用的人多">最重要的一点：使用的人多</h4>
<p><code>Spring</code> <code>SpringMVC</code> <code>SpringBoot</code></p>
<h2 id="第一个mybatis程序">2.第一个Mybatis程序</h2>
<p><code>思路</code></p>
<ul>
<li>搭建环境</li>
<li>导入Mybatis</li>
<li>编写代码</li>
<li>测试</li>
</ul>
<h3 id="搭建环境">2.1 搭建环境</h3>
<ul>
<li>搭建数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">`id` INT(20) NOT NULL,</span><br><span class="line">`name`VARCHAR(30) DEFAULT NULL,</span><br><span class="line">`pwd`VARCHAR(30) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY(`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES</span><br><span class="line">(1,&#x27;whlll&#x27;,&#x27;123456&#x27;),</span><br><span class="line">(2,&#x27;张三&#x27;,&#x27;123456&#x27;),</span><br><span class="line">(3,&#x27;李四&#x27;,&#x27;123456&#x27;)</span><br></pre></td></tr></table></figure>
<ul>
<li>新建项目</li>
</ul>
<ol type="1">
<li>新建一个普通的Maven项目</li>
<li>删除src目录</li>
<li>导入maven依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建一个模块">2.2 创建一个模块</h3>
<ul>
<li>编写mybatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=ture<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写mybatis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步 --&gt; 获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">//SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写代码">2.3 编写代码</h3>
<ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接口实现类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.whlll.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;helloid&#125; and name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;userid&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user</span><br><span class="line">        set name = #&#123;name&#125;,</span><br><span class="line">            pwd=#&#123;pwd&#125;</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>UserMapper.xml中不要有中文注释</strong></p>
</blockquote>
<h3 id="测试">2.4 测试</h3>
<ul>
<li>junit测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;李&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可能遇到的问题</p>
</blockquote>
<ol type="1">
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
<li>Mapper.xml中不要使用中文注解</li>
</ol>
<h2 id="crud">3.CRUD</h2>
<h3 id="namespace">3.1 namespace</h3>
<p>namespace中的包名要和Dao/mapper中的包名一致</p>
<h3 id="select">3.2 select</h3>
<blockquote>
<p>选择，查询语句</p>
</blockquote>
<ul>
<li>id：就是对应的namesqace中的方法名;</li>
<li>resultType：Sql语句执行的返回值;</li>
<li>parameterType：参数类型！</li>
</ul>
<ol type="1">
<li>编写接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户    </span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>编写对应的mapper中的sql语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;helloid&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    mapper.getUserById2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="insert">3.3 insert</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="update">3.4 update</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user</span><br><span class="line">    set name = #&#123;name&#125;,</span><br><span class="line">        pwd=#&#123;pwd&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="delete">3.5 delete</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>增删改 -&gt; 要提交commit</strong></p>
<blockquote>
<p><strong>注意事项</strong></p>
</blockquote>
<ul>
<li>标签不要匹配错</li>
<li>resource 绑定 mapper 需要匹配路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointException,没有注册到资源</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出的问题！</li>
</ul>
<h3 id="万能的map">3.6 万能的Map</h3>
<blockquote>
<p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑Map！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;userid&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;helloid&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    mapper.getUserById2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Map传递参数，直接在sql中取出key即可！ <code>parameterType="map"</code></p></li>
<li><p>对象传递参数，直接在sql中取对象的属性即可！ <code>parameterType="Object"</code></p></li>
<li><p>只有一个基本类型的参数情况下，可以直接在sql中取到！</p></li>
<li><p>多个参数用Map，或者注解！</p></li>
</ul>
<h3 id="模糊查询">3.7 模糊查询</h3>
<ol type="1">
<li>java代码执行的时候，传递通配符 % %</li>
</ol>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure></p>
<ol start="2" type="1">
<li>在sql拼接中使用通配符！</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure>
<h2 id="配置解析">4.配置解析</h2>
<h3 id="配置">4.1 配置</h3>
<blockquote>
<p>mybatis-config.xml</p>
</blockquote>
<p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p>
<ul>
<li>configuration（配置）
<ul>
<li>properties（属性）</li>
<li>settings（设置）</li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境配置）
<ul>
<li>environment（环境变量）
<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul></li>
</ul></li>
<li>databaseIdProvider（数据库厂商标识）</li>
<li>mappers（映射器）</li>
</ul></li>
</ul>
<h3 id="环境配置environments">4.2 环境配置（environments）</h3>
<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：</p>
<ul>
<li><strong>每个数据库对应一个 SqlSessionFactory 实例</strong></li>
</ul>
<p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure>
<p>如果忽略了环境参数，那么将会加载默认环境，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, properties);</span><br></pre></td></tr></table></figure>
<p>environments 元素定义了如何配置环境。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意一些关键点:</p>
<ul>
<li>默认使用的环境 ID（比如：default="development"）。</li>
<li>每个 environment 元素定义的环境 ID（比如：id="development"）。</li>
<li>事务管理器的配置（比如：type="JDBC"）。</li>
<li>数据源的配置（比如：type="POOLED"）。</li>
</ul>
<p>默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。</p>
<p><strong>事务管理器（transactionManager）</strong></p>
<p>在 MyBatis 中有两种类型的事务管理器（也就是 type="[JDBC|MANAGED]"）：</p>
<ul>
<li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li>
<li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;closeConnection&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>提示</strong> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>
<p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span> </span>&#123; <span class="comment">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(DataSource dataSource, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function">Integer <span class="title">getTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p>
<p><strong>数据源（dataSource）</strong></p>
<p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>
<ul>
<li>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</li>
</ul>
<p>有三种内建的数据源类型（也就是 type="[UNPOOLED|POOLED|JNDI]"）：</p>
<p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p>
<ul>
<li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li>
<li><code>url</code> – 这是数据库的 JDBC URL 地址。</li>
<li><code>username</code> – 登录数据库的用户名。</li>
<li><code>password</code> – 登录数据库的密码。</li>
<li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li>
<li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 <code>java.sql.Connection#setNetworkTimeout()</code> 的 API 文档以获取更多信息。</li>
</ul>
<p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p>
<ul>
<li><code>driver.encoding=UTF8</code></li>
</ul>
<p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性给数据库驱动。</p>
<p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p>
<p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p>
<ul>
<li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li>
<li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li>
<li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li>
<li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li>
<li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 <code>poolMaximumIdleConnections</code> 与 <code>poolMaximumLocalBadConnectionTolerance</code> 之和。 默认值：3（新增于 3.4.5）</li>
<li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li>
<li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置 <code>poolPingQuery</code> 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li>
<li><code>poolPingConnectionsNotUsedFor</code> – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li>
</ul>
<p><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p>
<ul>
<li><code>initial_context</code> – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li>
<li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li>
</ul>
<p>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：</p>
<ul>
<li><code>env.encoding=UTF8</code></li>
</ul>
<p>这就会在 InitialContext 实例化时往它的构造方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性。</p>
<p>你可以通过实现接口 <code>org.apache.ibatis.datasource.DataSourceFactory</code> 来使用第三方数据源实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSourceFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span></span>;</span><br><span class="line">  <span class="function">DataSource <span class="title">getDataSource</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code> 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0DataSourceFactory</span> <span class="keyword">extends</span> <span class="title">UnpooledDataSourceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">C3P0DataSourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的 setter 方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;org.myproject.C3P0DataSourceFactory&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.postgresql.Driver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:postgresql:mydb&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;postgres&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="属性properties">4.3 属性（properties）</h3>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。</p>
<p>也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 或者 ...</span></span><br><span class="line"></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, props);</span><br></pre></td></tr></table></figure>
<p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p>
<ul>
<li>首先读取在 properties 元素体内指定的属性。</li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li>
<li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li>
</ul>
<p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p>
<p>从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username:ut_user&#125;&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 启用默认值特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong> 如果你在属性名中使用了 <code>":"</code> 字符（如：<code>db:username</code>），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： <code>$&#123;tableName != null ? tableName : 'global_constants'&#125;</code>），就需要设置特定的属性来修改分隔属性名和默认值的字符。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?:&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 修改默认值的分隔符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db:username?:ut_user&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类型别名typealiases">4.4 类型别名（typeAliases）</h3>
<p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">别名</th>
<th style="text-align: left;">映射的类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">_byte</td>
<td style="text-align: left;">byte</td>
</tr>
<tr class="even">
<td style="text-align: left;">_long</td>
<td style="text-align: left;">long</td>
</tr>
<tr class="odd">
<td style="text-align: left;">_short</td>
<td style="text-align: left;">short</td>
</tr>
<tr class="even">
<td style="text-align: left;">_int</td>
<td style="text-align: left;">int</td>
</tr>
<tr class="odd">
<td style="text-align: left;">_integer</td>
<td style="text-align: left;">int</td>
</tr>
<tr class="even">
<td style="text-align: left;">_double</td>
<td style="text-align: left;">double</td>
</tr>
<tr class="odd">
<td style="text-align: left;">_float</td>
<td style="text-align: left;">float</td>
</tr>
<tr class="even">
<td style="text-align: left;">_boolean</td>
<td style="text-align: left;">boolean</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string</td>
<td style="text-align: left;">String</td>
</tr>
<tr class="even">
<td style="text-align: left;">byte</td>
<td style="text-align: left;">Byte</td>
</tr>
<tr class="odd">
<td style="text-align: left;">long</td>
<td style="text-align: left;">Long</td>
</tr>
<tr class="even">
<td style="text-align: left;">short</td>
<td style="text-align: left;">Short</td>
</tr>
<tr class="odd">
<td style="text-align: left;">int</td>
<td style="text-align: left;">Integer</td>
</tr>
<tr class="even">
<td style="text-align: left;">integer</td>
<td style="text-align: left;">Integer</td>
</tr>
<tr class="odd">
<td style="text-align: left;">double</td>
<td style="text-align: left;">Double</td>
</tr>
<tr class="even">
<td style="text-align: left;">float</td>
<td style="text-align: left;">Float</td>
</tr>
<tr class="odd">
<td style="text-align: left;">boolean</td>
<td style="text-align: left;">Boolean</td>
</tr>
<tr class="even">
<td style="text-align: left;">date</td>
<td style="text-align: left;">Date</td>
</tr>
<tr class="odd">
<td style="text-align: left;">decimal</td>
<td style="text-align: left;">BigDecimal</td>
</tr>
<tr class="even">
<td style="text-align: left;">bigdecimal</td>
<td style="text-align: left;">BigDecimal</td>
</tr>
<tr class="odd">
<td style="text-align: left;">object</td>
<td style="text-align: left;">Object</td>
</tr>
<tr class="even">
<td style="text-align: left;">map</td>
<td style="text-align: left;">Map</td>
</tr>
<tr class="odd">
<td style="text-align: left;">hashmap</td>
<td style="text-align: left;">HashMap</td>
</tr>
<tr class="even">
<td style="text-align: left;">list</td>
<td style="text-align: left;">List</td>
</tr>
<tr class="odd">
<td style="text-align: left;">arraylist</td>
<td style="text-align: left;">ArrayList</td>
</tr>
<tr class="even">
<td style="text-align: left;">collection</td>
<td style="text-align: left;">Collection</td>
</tr>
<tr class="odd">
<td style="text-align: left;">iterator</td>
<td style="text-align: left;">Iterator</td>
</tr>
</tbody>
</table>
<h3 id="设置settings">4.5 设置（settings）</h3>
<p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 29%" />
<col style="width: 29%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">设置名</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">有效值</th>
<th style="text-align: left;">默认值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">cacheEnabled</td>
<td style="text-align: left;">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">true</td>
</tr>
<tr class="even">
<td style="text-align: left;">lazyLoadingEnabled</td>
<td style="text-align: left;">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">false</td>
</tr>
<tr class="odd">
<td style="text-align: left;">aggressiveLazyLoading</td>
<td style="text-align: left;">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">false （在 3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr class="even">
<td style="text-align: left;">multipleResultSetsEnabled</td>
<td style="text-align: left;">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">true</td>
</tr>
<tr class="odd">
<td style="text-align: left;">useColumnLabel</td>
<td style="text-align: left;">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">true</td>
</tr>
<tr class="even">
<td style="text-align: left;">useGeneratedKeys</td>
<td style="text-align: left;">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">False</td>
</tr>
<tr class="odd">
<td style="text-align: left;">autoMappingBehavior</td>
<td style="text-align: left;">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td style="text-align: left;">NONE, PARTIAL, FULL</td>
<td style="text-align: left;">PARTIAL</td>
</tr>
<tr class="even">
<td style="text-align: left;">autoMappingUnknownColumnBehavior</td>
<td style="text-align: left;">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td style="text-align: left;">NONE, WARNING, FAILING</td>
<td style="text-align: left;">NONE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">defaultExecutorType</td>
<td style="text-align: left;">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td style="text-align: left;">SIMPLE REUSE BATCH</td>
<td style="text-align: left;">SIMPLE</td>
</tr>
<tr class="even">
<td style="text-align: left;">defaultStatementTimeout</td>
<td style="text-align: left;">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td style="text-align: left;">任意正整数</td>
<td style="text-align: left;">未设置 (null)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">defaultFetchSize</td>
<td style="text-align: left;">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td style="text-align: left;">任意正整数</td>
<td style="text-align: left;">未设置 (null)</td>
</tr>
<tr class="even">
<td style="text-align: left;">defaultResultSetType</td>
<td style="text-align: left;">指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td style="text-align: left;">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td style="text-align: left;">未设置 (null)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">safeRowBoundsEnabled</td>
<td style="text-align: left;">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">False</td>
</tr>
<tr class="even">
<td style="text-align: left;">safeResultHandlerEnabled</td>
<td style="text-align: left;">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">True</td>
</tr>
<tr class="odd">
<td style="text-align: left;">mapUnderscoreToCamelCase</td>
<td style="text-align: left;">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">False</td>
</tr>
<tr class="even">
<td style="text-align: left;">localCacheScope</td>
<td style="text-align: left;">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td style="text-align: left;">SESSION | STATEMENT</td>
<td style="text-align: left;">SESSION</td>
</tr>
<tr class="odd">
<td style="text-align: left;">jdbcTypeForNull</td>
<td style="text-align: left;">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td style="text-align: left;">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td style="text-align: left;">OTHER</td>
</tr>
<tr class="even">
<td style="text-align: left;">lazyLoadTriggerMethods</td>
<td style="text-align: left;">指定对象的哪些方法触发一次延迟加载。</td>
<td style="text-align: left;">用逗号分隔的方法列表。</td>
<td style="text-align: left;">equals,clone,hashCode,toString</td>
</tr>
<tr class="odd">
<td style="text-align: left;">defaultScriptingLanguage</td>
<td style="text-align: left;">指定动态 SQL 生成使用的默认脚本语言。</td>
<td style="text-align: left;">一个类型别名或全限定类名。</td>
<td style="text-align: left;">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr class="even">
<td style="text-align: left;">defaultEnumTypeHandler</td>
<td style="text-align: left;">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td style="text-align: left;">一个类型别名或全限定类名。</td>
<td style="text-align: left;">org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr class="odd">
<td style="text-align: left;">callSettersOnNulls</td>
<td style="text-align: left;">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">false</td>
</tr>
<tr class="even">
<td style="text-align: left;">returnInstanceForEmptyRow</td>
<td style="text-align: left;">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">false</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logPrefix</td>
<td style="text-align: left;">指定 MyBatis 增加到日志名称的前缀。</td>
<td style="text-align: left;">任何字符串</td>
<td style="text-align: left;">未设置</td>
</tr>
<tr class="even">
<td style="text-align: left;">logImpl</td>
<td style="text-align: left;">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td style="text-align: left;">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td style="text-align: left;">未设置</td>
</tr>
<tr class="odd">
<td style="text-align: left;">proxyFactory</td>
<td style="text-align: left;">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td style="text-align: left;">CGLIB | JAVASSIST</td>
<td style="text-align: left;">JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr class="even">
<td style="text-align: left;">vfsImpl</td>
<td style="text-align: left;">指定 VFS 的实现</td>
<td style="text-align: left;">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td style="text-align: left;">未设置</td>
</tr>
<tr class="odd">
<td style="text-align: left;">useActualParamName</td>
<td style="text-align: left;">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">true</td>
</tr>
<tr class="even">
<td style="text-align: left;">configurationFactory</td>
<td style="text-align: left;">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td style="text-align: left;">一个类型别名或完全限定类名。</td>
<td style="text-align: left;">未设置</td>
</tr>
<tr class="odd">
<td style="text-align: left;">shrinkWhitespacesInSql</td>
<td style="text-align: left;">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td>
<td style="text-align: left;">true | false</td>
<td style="text-align: left;">false</td>
</tr>
<tr class="even">
<td style="text-align: left;">defaultSqlProviderType</td>
<td style="text-align: left;">Specifies an sql provider class that holds provider method (Since 3.5.6). This class apply to the <code>type</code>(or <code>value</code>) attribute on sql provider annotation(e.g. <code>@SelectProvider</code>), when these attribute was omitted.</td>
<td style="text-align: left;">A type alias or fully qualified class name</td>
<td style="text-align: left;">Not set</td>
</tr>
</tbody>
</table>
<p>一个配置完整的 settings 元素的示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类型处理器typehandlers">4.6 类型处理器（typeHandlers）</h3>
<p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p>
<p><strong>提示</strong> 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。</p>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 26%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">类型处理器</th>
<th style="text-align: left;">Java 类型</th>
<th style="text-align: left;">JDBC 类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>BooleanTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Boolean</code>, <code>boolean</code></td>
<td style="text-align: left;">数据库兼容的 <code>BOOLEAN</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ByteTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Byte</code>, <code>byte</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>BYTE</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ShortTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Short</code>, <code>short</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>SMALLINT</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>IntegerTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Integer</code>, <code>int</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>INTEGER</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>LongTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Long</code>, <code>long</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>BIGINT</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>FloatTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Float</code>, <code>float</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>FLOAT</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>DoubleTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.Double</code>, <code>double</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>BigDecimalTypeHandler</code></td>
<td style="text-align: left;"><code>java.math.BigDecimal</code></td>
<td style="text-align: left;">数据库兼容的 <code>NUMERIC</code> 或 <code>DECIMAL</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>StringTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.String</code></td>
<td style="text-align: left;"><code>CHAR</code>, <code>VARCHAR</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ClobReaderTypeHandler</code></td>
<td style="text-align: left;"><code>java.io.Reader</code></td>
<td style="text-align: left;">-</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ClobTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.String</code></td>
<td style="text-align: left;"><code>CLOB</code>, <code>LONGVARCHAR</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>NStringTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.String</code></td>
<td style="text-align: left;"><code>NVARCHAR</code>, <code>NCHAR</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>NClobTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.String</code></td>
<td style="text-align: left;"><code>NCLOB</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>BlobInputStreamTypeHandler</code></td>
<td style="text-align: left;"><code>java.io.InputStream</code></td>
<td style="text-align: left;">-</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ByteArrayTypeHandler</code></td>
<td style="text-align: left;"><code>byte[]</code></td>
<td style="text-align: left;">数据库兼容的字节流类型</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>BlobTypeHandler</code></td>
<td style="text-align: left;"><code>byte[]</code></td>
<td style="text-align: left;"><code>BLOB</code>, <code>LONGVARBINARY</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>DateTypeHandler</code></td>
<td style="text-align: left;"><code>java.util.Date</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>DateOnlyTypeHandler</code></td>
<td style="text-align: left;"><code>java.util.Date</code></td>
<td style="text-align: left;"><code>DATE</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>TimeOnlyTypeHandler</code></td>
<td style="text-align: left;"><code>java.util.Date</code></td>
<td style="text-align: left;"><code>TIME</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>SqlTimestampTypeHandler</code></td>
<td style="text-align: left;"><code>java.sql.Timestamp</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>SqlDateTypeHandler</code></td>
<td style="text-align: left;"><code>java.sql.Date</code></td>
<td style="text-align: left;"><code>DATE</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>SqlTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.sql.Time</code></td>
<td style="text-align: left;"><code>TIME</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ObjectTypeHandler</code></td>
<td style="text-align: left;">Any</td>
<td style="text-align: left;"><code>OTHER</code> 或未指定类型</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EnumTypeHandler</code></td>
<td style="text-align: left;">Enumeration Type</td>
<td style="text-align: left;">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EnumOrdinalTypeHandler</code></td>
<td style="text-align: left;">Enumeration Type</td>
<td style="text-align: left;">任何兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code> 类型，用来存储枚举的序数值（而不是名称）。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>SqlxmlTypeHandler</code></td>
<td style="text-align: left;"><code>java.lang.String</code></td>
<td style="text-align: left;"><code>SQLXML</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>InstantTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.Instant</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>LocalDateTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.LocalDateTime</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>LocalDateTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.LocalDate</code></td>
<td style="text-align: left;"><code>DATE</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>LocalTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.LocalTime</code></td>
<td style="text-align: left;"><code>TIME</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>OffsetDateTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.OffsetDateTime</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>OffsetTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.OffsetTime</code></td>
<td style="text-align: left;"><code>TIME</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ZonedDateTimeTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.ZonedDateTime</code></td>
<td style="text-align: left;"><code>TIMESTAMP</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>YearTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.Year</code></td>
<td style="text-align: left;"><code>INTEGER</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>MonthTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.Month</code></td>
<td style="text-align: left;"><code>INTEGER</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>YearMonthTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.YearMonth</code></td>
<td style="text-align: left;"><code>VARCHAR</code> 或 <code>LONGVARCHAR</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>JapaneseDateTypeHandler</code></td>
<td style="text-align: left;"><code>java.time.chrono.JapaneseDate</code></td>
<td style="text-align: left;"><code>DATE</code></td>
</tr>
</tbody>
</table>
<p>你可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口， 或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>， 并且可以（可选地）将它映射到一个 JDBC 类型。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleTypeHandler.java</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ps.setString(i, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">  &lt;typeHandler handler=<span class="string">&quot;org.mybatis.example.ExampleTypeHandler&quot;</span>/&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure>
<p>使用上述的类型处理器将会覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器。 要注意 MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p>
<p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p>
<ul>
<li>在类型处理器的配置元素（typeHandler 元素）上增加一个 <code>javaType</code> 属性（比如：<code>javaType="String"</code>）；</li>
<li>在类型处理器的类上增加一个 <code>@MappedTypes</code> 注解指定与其关联的 Java 类型列表。 如果在 <code>javaType</code> 属性中也同时指定，则注解上的配置将被忽略。</li>
</ul>
<p>可以通过两种方式来指定关联的 JDBC 类型：</p>
<ul>
<li>在类型处理器的配置元素上增加一个 <code>jdbcType</code> 属性（比如：<code>jdbcType="VARCHAR"</code>）；</li>
<li>在类型处理器的类上增加一个 <code>@MappedJdbcTypes</code> 注解指定与其关联的 JDBC 类型列表。 如果在 <code>jdbcType</code> 属性中也同时指定，则注解上的配置将被忽略。</li>
</ul>
<p>当在 <code>ResultMap</code> 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 <code>javaType=[Java 类型], jdbcType=null</code> 的组合来选择一个类型处理器。 这意味着使用 <code>@MappedJdbcTypes</code> 注解可以<em>限制</em>类型处理器的作用范围，并且可以确保，除非显式地设置，否则类型处理器在 <code>ResultMap</code> 中将不会生效。 如果希望能在 <code>ResultMap</code> 中隐式地使用类型处理器，那么设置 <code>@MappedJdbcTypes</code> 注解的 <code>includeNullJdbcType=true</code> 即可。 然而从 Mybatis 3.4.0 开始，如果某个 Java 类型<strong>只有一个</strong>注册的类型处理器，即使没有设置 <code>includeNullJdbcType=true</code>，那么这个类型处理器也会是 <code>ResultMap</code> 使用 Java 类型时的默认处理器。</p>
<p>最后，可以让 MyBatis 帮你查找类型处理器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.example&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。</p>
<p>你可以创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一个接受该类的 class 作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GenericTypeHandler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&gt; <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Class&lt;E&gt; type;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Type argument cannot be null&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><code>EnumTypeHandler</code> 和 <code>EnumOrdinalTypeHandler</code> 都是泛型类型处理器，我们将会在接下来的部分详细探讨。</p>
<h3 id="处理枚举类型">4.7 处理枚举类型</h3>
<p>若想映射枚举类型 <code>Enum</code>，则需要从 <code>EnumTypeHandler</code> 或者 <code>EnumOrdinalTypeHandler</code> 中选择一个来使用。</p>
<p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 <code>EnumTypeHandler</code> 来把 <code>Enum</code> 值转换成对应的名字。</p>
<p><strong>注意 <code>EnumTypeHandler</code> 在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了 <code>Enum</code> 的类。</strong></p>
<p>不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样简单：在配置文件中把 <code>EnumOrdinalTypeHandler</code> 加到 <code>typeHandlers</code> 中即可， 这样每个 <code>RoundingMode</code> 将通过他们的序数值来映射成对应的整形数值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.math.RoundingMode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但要是你想在一个地方将 <code>Enum</code> 映射成字符串，在另外一个地方映射成整形值呢？</p>
<p>自动映射器（auto-mapper）会自动地选用 <code>EnumOrdinalTypeHandler</code> 来处理枚举类型， 所以如果我们想用普通的 <code>EnumTypeHandler</code>，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。</p>
<p>（下一节才开始介绍映射器文件，如果你是首次阅读该文档，你可能需要先跳过这里，过会再来看。）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usermap&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;funkyNumber&quot;</span> <span class="attr">property</span>=<span class="string">&quot;funkyNumber&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roundingMode&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;usermap&quot;</span>&gt;</span></span><br><span class="line">		select * from users</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">	    insert into users (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">	    	#&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode&#125;</span><br><span class="line">	    )</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usermap2&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;funkyNumber&quot;</span> <span class="attr">property</span>=<span class="string">&quot;funkyNumber&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;usermap2&quot;</span>&gt;</span></span><br><span class="line">		select * from users2</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert2&quot;</span>&gt;</span></span><br><span class="line">	    insert into users2 (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">	    	#&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;</span><br><span class="line">	    )</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，这里的 select 语句必须指定 <code>resultMap</code> 而不是 <code>resultType</code>。</p>
<h3 id="对象工厂objectfactory">4.8 对象工厂（objectFactory）</h3>
<p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleObjectFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleObjectFactory</span> <span class="keyword">extends</span> <span class="title">DefaultObjectFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Class type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.create(type);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Class type, List&lt;Class&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.create(type, constructorArgTypes, constructorArgs);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setProperties(properties);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isCollection</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collection.class.isAssignableFrom(type);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;objectFactory type=<span class="string">&quot;org.mybatis.example.ExampleObjectFactory&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;someProperty&quot;</span> value=<span class="string">&quot;100&quot;</span>/&gt;</span><br><span class="line">&lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure>
<p>ObjectFactory 接口很简单，它包含两个创建实例用的方法，一个是处理默认无参构造方法的，另外一个是处理带参数的构造方法的。 另外，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。</p>
<h3 id="插件plugins">4.9 插件（plugins）</h3>
<p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>
<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>
<p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。</p>
<p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExamplePlugin.java</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;@Signature(</span></span><br><span class="line"><span class="meta">  type= Executor.class,</span></span><br><span class="line"><span class="meta">  method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">  args = &#123;MappedStatement.class,Object.class&#125;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// implement pre processing if need</span></span><br><span class="line">    Object returnObject = invocation.proceed();</span><br><span class="line">    <span class="comment">// implement post processing if need</span></span><br><span class="line">    <span class="keyword">return</span> returnObject;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.properties = properties;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">  &lt;plugin interceptor=<span class="string">&quot;org.mybatis.example.ExamplePlugin&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;someProperty&quot;</span> value=<span class="string">&quot;100&quot;</span>/&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>
<p>上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p>
<p><strong>提示</strong> <strong>覆盖配置类</strong></p>
<p>除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p>
<h3 id="数据库厂商标识databaseidprovider">4.10 数据库厂商标识（databaseIdProvider）</h3>
<p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 <code>databaseId</code> 属性。 MyBatis 会加载带有匹配当前数据库 <code>databaseId</code> 属性和所有不带 <code>databaseId</code> 属性的语句。 如果同时找到带有 <code>databaseId</code> 和不带 <code>databaseId</code> 的相同语句，则后者会被舍弃。 为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 <code>databaseIdProvider</code> 即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>databaseIdProvider 对应的 DB_VENDOR 实现会将 databaseId 设置为 <code>DatabaseMetaData#getDatabaseProductName()</code> 返回的字符串。 由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在提供了属性别名时，databaseIdProvider 的 DB_VENDOR 实现会将 databaseId 设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为 “null”。 在这个例子中，如果 <code>getDatabaseProductName()</code> 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。</p>
<p>你可以通过实现接口 <code>org.apache.ibatis.mapping.DatabaseIdProvider</code> 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DatabaseIdProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties p)</span> </span>&#123; <span class="comment">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">String <span class="title">getDatabaseId</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="映射器mappers">4.11 映射器（mappers）</h3>
<p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。</p>
<h2 id="动态-sql">5.动态 SQL</h2>
<blockquote>
<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性</p>
</blockquote>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="if">5.1 if</h3>
<p>使用动态 SQL 最常见情景是根据条件包含 where 子句的一部分。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这条语句提供了可选的查找文本功能。如果不传入 “title”，那么所有处于 “ACTIVE” 状态的 BLOG 都会返回；如果传入了 “title” 参数，那么就会对 “title” 一列进行模糊查找并返回对应的 BLOG 结果（细心的读者可能会发现，“title” 的参数值需要包含查找掩码或通配符字符）</p>
<p>如果希望通过 “title” 和 “author” 两个参数进行可选搜索该怎么办呢？首先，我想先将语句名称修改成更名副其实的名称；接下来，只需要加入另一个条件即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="choosewhenotherwise">5.2 choose、when、otherwise</h3>
<p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<p>还是上面的例子，但是策略变为：传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。若两者都没有传入，就返回标记为 featured 的 BLOG（这可能是管理员认为，与其返回大量的无意义随机 Blog，还不如返回一些由管理员精选的 Blog）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="trimwhereset">5.3 trim、where、set</h3>
<p>前面几个例子已经方便地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的 “if” 示例，这次我们将 “state = ‘ACTIVE’” 设置成动态条件，看看会发生什么。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOG</span><br><span class="line"><span class="keyword">WHERE</span></span><br></pre></td></tr></table></figure>
<p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOG</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">AND</span> title <span class="keyword">like</span> ‘someTitle’</span><br></pre></td></tr></table></figure>
<p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p>
<p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p>
<p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p>
<p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p>
<p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p>
<h3 id="foreach">5.4 foreach</h3>
<p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p>
<p><strong>提示</strong> 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 <em>foreach</em>。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p>
<h3 id="script">5.5 script</h3>
<p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Update(&#123;&quot;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;update Author&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;  <span class="tag">&lt;<span class="name">set</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;username != null&#x27;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;password != null&#x27;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;email != null&#x27;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;bio != null&#x27;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;  <span class="tag">&lt;/<span class="name">set</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;where id=#&#123;id&#125;&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&#125;)</span><br><span class="line">void updateAuthorValues(Author author);</span><br></pre></td></tr></table></figure>
<h3 id="bind">5.6 bind</h3>
<p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogsLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多数据库支持">5.7 多数据库支持</h3>
<p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;db2&#x27;&quot;</span>&gt;</span></span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="java-api">6.JAVA API</h2>
<p>既然你已经知道如何配置 MyBatis 以及如何创建映射，是时候来尝点甜头了。MyBatis 的 Java API 就是这个甜头。稍后你将看到，和 JDBC 相比，MyBatis 大幅简化你的代码并力图保持其简洁、容易理解和维护。为了使得 SQL 映射更加优秀，MyBatis 3 引入了许多重要的改进。</p>
<h3 id="目录结构">6.1 目录结构</h3>
<p>在我们深入 Java API 之前，理解关于目录结构的最佳实践是很重要的。MyBatis 非常灵活，你可以随意安排你的文件。但和其它框架一样，目录结构有一种最佳实践。</p>
<p>让我们看一下典型的应用目录结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/my_application</span><br><span class="line">  /bin</span><br><span class="line">  /devlib</span><br><span class="line">  /lib                &lt;-- MyBatis *.jar 文件在这里。</span><br><span class="line">  /src</span><br><span class="line">    /org/myapp/</span><br><span class="line">      /action</span><br><span class="line">      /data           &lt;-- MyBatis 配置文件在这里，包括映射器类、XML 配置、XML 映射文件。</span><br><span class="line">        /mybatis-config.xml</span><br><span class="line">        /BlogMapper.java</span><br><span class="line">        /BlogMapper.xml</span><br><span class="line">      /model</span><br><span class="line">      /service</span><br><span class="line">      /view</span><br><span class="line">    /properties       &lt;-- 在 XML 配置中出现的属性值在这里。</span><br><span class="line">  /test</span><br><span class="line">    /org/myapp/</span><br><span class="line">      /action</span><br><span class="line">      /data</span><br><span class="line">      /model</span><br><span class="line">      /service</span><br><span class="line">      /view</span><br><span class="line">    /properties</span><br><span class="line">  /web</span><br><span class="line">    /WEB-INF</span><br><span class="line">      /web.xml</span><br></pre></td></tr></table></figure>
<p>当然，这是推荐的目录结构，并非强制要求，但使用一个通用的目录结构将更有利于大家沟通。</p>
<p>本章接下来的示例将假定你遵循这种目录结构。</p>
<h3 id="sqlsession">6.2 SqlSession</h3>
<p>使用 MyBatis 的主要 Java 接口就是 SqlSession。你可以通过这个接口来执行命令，获取映射器实例和管理事务。在介绍 SqlSession 接口之前，我们先来了解如何获取一个 SqlSession 实例。SqlSessions 是由 SqlSessionFactory 实例创建的。SqlSessionFactory 对象包含创建 SqlSession 实例的各种方法。而 SqlSessionFactory 本身是由 SqlSessionFactoryBuilder 创建的，它可以从 XML、注解或 Java 配置代码来创建 SqlSessionFactory。</p>
<p><strong>提示</strong> 当 Mybatis 与一些依赖注入框架（如 Spring 或者 Guice）搭配使用时，SqlSession 将被依赖注入框架创建并注入，所以你不需要使用 SqlSessionFactoryBuilder 或者 SqlSessionFactory，可以直接阅读 SqlSession 这一节。请参考 Mybatis-Spring 或者 Mybatis-Guice 手册以了解更多信息。</p>
<h4 id="sqlsessionfactorybuilder">SqlSessionFactoryBuilder</h4>
<p>SqlSessionFactoryBuilder 有五个 build() 方法，每一种都允许你从不同的资源中创建一个 SqlSessionFactory 实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span></span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment)</span></span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, Properties properties)</span></span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String env, Properties props)</span></span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span></span></span><br></pre></td></tr></table></figure>
<p>第一种方法是最常用的，它接受一个指向 XML 文件（也就是之前讨论的 mybatis-config.xml 文件）的 InputStream 实例。可选的参数是 environment 和 properties。environment 决定加载哪种环境，包括数据源和事务管理器。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你调用了带 environment 参数的 build 方法，那么 MyBatis 将使用该环境对应的配置。当然，如果你指定了一个无效的环境，会收到错误。如果你调用了不带 environment 参数的 build 方法，那么就会使用默认的环境配置（在上面的示例中，通过 default="development" 指定了默认环境）。</p>
<p>如果你调用了接受 properties 实例的方法，那么 MyBatis 就会加载这些属性，并在配置中提供使用。绝大多数场合下，可以用 ${propName} 形式引用这些配置值。</p>
<p>回想一下，在 mybatis-config.xml 中，可以引用属性值，也可以直接指定属性值。因此，理解属性的优先级是很重要的。在之前的文档中，我们已经介绍过了相关内容，但为了方便查阅，这里再重新介绍一下：</p>
<hr />
<p>如果一个属性存在于下面的多个位置，那么 MyBatis 将按照以下顺序来加载它们：</p>
<ul>
<li>首先，读取在 properties 元素体中指定的属性；</li>
<li>其次，读取在 properties 元素的类路径 resource 或 url 指定的属性，且会覆盖已经指定了的重复属性；</li>
<li>最后，读取作为方法参数传递的属性，且会覆盖已经从 properties 元素体和 resource 或 url 属性中加载了的重复属性。</li>
</ul>
<p>因此，通过方法参数传递的属性的优先级最高，resource 或 url 指定的属性优先级中等，在 properties 元素体中指定的属性优先级最低。</p>
<hr />
<p>总结一下，前四个方法很大程度上是相同的，但提供了不同的覆盖选项，允许你可选地指定 environment 和/或 properties。以下给出一个从 mybatis-config.xml 文件创建 SqlSessionFactory 的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/builder/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br></pre></td></tr></table></figure>
<p>注意，这里我们使用了 Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类正如其名，会帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。在略读该类的源代码或用 IDE 查看该类信息后，你会发现一整套相当实用的方法。这里给出一个简表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">URL <span class="title">getResourceURL</span><span class="params">(String resource)</span></span></span><br><span class="line"><span class="function">URL <span class="title">getResourceURL</span><span class="params">(ClassLoader loader, String resource)</span></span></span><br><span class="line"><span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String resource)</span></span></span><br><span class="line"><span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(ClassLoader loader, String resource)</span></span></span><br><span class="line"><span class="function">Properties <span class="title">getResourceAsProperties</span><span class="params">(String resource)</span></span></span><br><span class="line"><span class="function">Properties <span class="title">getResourceAsProperties</span><span class="params">(ClassLoader loader, String resource)</span></span></span><br><span class="line"><span class="function">Reader <span class="title">getResourceAsReader</span><span class="params">(String resource)</span></span></span><br><span class="line"><span class="function">Reader <span class="title">getResourceAsReader</span><span class="params">(ClassLoader loader, String resource)</span></span></span><br><span class="line"><span class="function">File <span class="title">getResourceAsFile</span><span class="params">(String resource)</span></span></span><br><span class="line"><span class="function">File <span class="title">getResourceAsFile</span><span class="params">(ClassLoader loader, String resource)</span></span></span><br><span class="line"><span class="function">InputStream <span class="title">getUrlAsStream</span><span class="params">(String urlString)</span></span></span><br><span class="line"><span class="function">Reader <span class="title">getUrlAsReader</span><span class="params">(String urlString)</span></span></span><br><span class="line"><span class="function">Properties <span class="title">getUrlAsProperties</span><span class="params">(String urlString)</span></span></span><br><span class="line"><span class="function">Class <span class="title">classForName</span><span class="params">(String className)</span></span></span><br></pre></td></tr></table></figure>
<p>最后一个 build 方法接受一个 Configuration 实例。Configuration 类包含了对一个 SqlSessionFactory 实例你可能关心的所有内容。在检查配置时，Configuration 类很有用，它允许你查找和操纵 SQL 映射（但当应用开始接收请求时不推荐使用）。你之前学习过的所有配置开关都存在于 Configuration 类，只不过它们是以 Java API 形式暴露的。以下是一个简单的示例，演示如何手动配置 Configuration 实例，然后将它传递给 build() 方法来创建 SqlSessionFactory。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataSource dataSource = BaseDataTest.createBlogDataSource();</span><br><span class="line">TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line"></span><br><span class="line">Environment environment = <span class="keyword">new</span> Environment(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line"></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">configuration.setLazyLoadingEnabled(<span class="keyword">true</span>);</span><br><span class="line">configuration.setEnhancementEnabled(<span class="keyword">true</span>);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Blog.class);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Post.class);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Author.class);</span><br><span class="line">configuration.addMapper(BoundBlogMapper.class);</span><br><span class="line">configuration.addMapper(BoundAuthorMapper.class);</span><br><span class="line"></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(configuration);</span><br></pre></td></tr></table></figure>
<p>现在你就获得一个可以用来创建 SqlSession 实例的 SqlSessionFactory 了。</p>
<h4 id="sqlsessionfactory">SqlSessionFactory</h4>
<p>SqlSessionFactory 有六个方法创建 SqlSession 实例。通常来说，当你选择其中一个方法时，你需要考虑以下几点：</p>
<ul>
<li><strong>事务处理</strong>：你希望在 session 作用域中使用事务作用域，还是使用自动提交（auto-commit）？（对很多数据库和/或 JDBC 驱动来说，等同于关闭事务支持）</li>
<li><strong>数据库连接</strong>：你希望 MyBatis 帮你从已配置的数据源获取连接，还是使用自己提供的连接？</li>
<li><strong>语句执行</strong>：你希望 MyBatis 复用 PreparedStatement 和/或批量更新语句（包括插入语句和删除语句）吗？</li>
</ul>
<p>基于以上需求，有下列已重载的多个 openSession() 方法供使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(Connection connection)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(TransactionIsolationLevel level)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, <span class="keyword">boolean</span> autoCommit)</span></span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, Connection connection)</span></span></span><br><span class="line"><span class="function">Configuration <span class="title">getConfiguration</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>默认的 openSession() 方法没有参数，它会创建具备如下特性的 SqlSession：</p>
<ul>
<li>事务作用域将会开启（也就是不自动提交）。</li>
<li>将由当前环境配置的 DataSource 实例中获取 Connection 对象。</li>
<li>事务隔离级别将会使用驱动或数据源的默认设置。</li>
<li>预处理语句不会被复用，也不会批量处理更新。</li>
</ul>
<p>相信你已经能从方法签名中知道这些方法的区别。向 <code>autoCommit</code> 可选参数传递 <code>true</code> 值即可开启自动提交功能。若要使用自己的 <code>Connection</code> 实例，传递一个 <code>Connection</code> 实例给 <code>connection</code> 参数即可。注意，我们没有提供同时设置 <code>Connection</code> 和 <code>autoCommit</code> 的方法，这是因为 MyBatis 会依据传入的 Connection 来决定是否启用 autoCommit。对于事务隔离级别，MyBatis 使用了一个 Java 枚举包装器来表示，称为 <code>TransactionIsolationLevel</code>，事务隔离级别支持 JDBC 的五个隔离级别（<code>NONE</code>、<code>READ_UNCOMMITTED</code>、<code>READ_COMMITTED</code>、<code>REPEATABLE_READ</code> 和 <code>SERIALIZABLE</code>），并且与预期的行为一致。</p>
<p>你可能对 <code>ExecutorType</code> 参数感到陌生。这个枚举类型定义了三个值:</p>
<ul>
<li><code>ExecutorType.SIMPLE</code>：该类型的执行器没有特别的行为。它为每个语句的执行创建一个新的预处理语句。</li>
<li><code>ExecutorType.REUSE</code>：该类型的执行器会复用预处理语句。</li>
<li><code>ExecutorType.BATCH</code>：该类型的执行器会批量执行所有更新语句，如果 SELECT 在多个更新中间执行，将在必要时将多条更新语句分隔开来，以方便理解。</li>
</ul>
<p><strong>提示</strong> 在 SqlSessionFactory 中还有一个方法我们没有提及，就是 getConfiguration()。这个方法会返回一个 Configuration 实例，你可以在运行时使用它来检查 MyBatis 的配置。</p>
<p><strong>提示</strong> 如果你使用过 MyBatis 的旧版本，可能还记得 session、事务和批量操作是相互独立的。在新版本中则不是这样。上述三者都包含在 session 作用域内。你不必分别处理事务或批量操作就能得到想要的全部效果。</p>
<h4 id="sqlsession-1">SqlSession</h4>
<p>正如之前所提到的，SqlSession 在 MyBatis 中是非常强大的一个类。它包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。</p>
<p>SqlSession 类的方法超过了 20 个，为了方便理解，我们将它们分成几种组别。</p>
<h5 id="语句执行方法">语句执行方法</h5>
<p>这些方法被用来执行定义在 SQL 映射 XML 文件中的 SELECT、INSERT、UPDATE 和 DELETE 语句。你可以通过名字快速了解它们的作用，每一方法都接受语句的 ID 以及参数对象，参数可以是原始类型（支持自动装箱或包装类）、JavaBean、POJO 或 Map。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function">&lt;E&gt; List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function">&lt;T&gt; Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function">&lt;K,V&gt; Map&lt;K,V&gt; <span class="title">selectMap</span><span class="params">(String statement, Object parameter, String mapKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span></span><br></pre></td></tr></table></figure>
<p>selectOne 和 selectList 的不同仅仅是 selectOne 必须返回一个对象或 null 值。如果返回值多于一个，就会抛出异常。如果你不知道返回对象会有多少，请使用 selectList。如果需要查看某个对象是否存在，最好的办法是查询一个 count 值（0 或 1）。selectMap 稍微特殊一点，它会将返回对象的其中一个属性作为 key 值，将对象作为 value 值，从而将多个结果集转为 Map 类型值。由于并不是所有语句都需要参数，所以这些方法都具有一个不需要参数的重载形式。</p>
<p>游标（Cursor）与列表（List）返回的结果相同，不同的是，游标借助迭代器实现了数据的惰性加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Cursor&lt;MyEntity&gt; entities = session.selectCursor(statement, param)) &#123;</span><br><span class="line">   <span class="keyword">for</span> (MyEntity entity:entities) &#123;</span><br><span class="line">      <span class="comment">// 处理单个实体</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>insert、update 以及 delete 方法返回的值表示受该语句影响的行数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement)</span></span></span><br><span class="line"><span class="function">&lt;E&gt; List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span></span></span><br><span class="line"><span class="function">&lt;T&gt; Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String statement)</span></span></span><br><span class="line"><span class="function">&lt;K,V&gt; Map&lt;K,V&gt; <span class="title">selectMap</span><span class="params">(String statement, String mapKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement)</span></span></span><br></pre></td></tr></table></figure>
<p>最后，还有 select 方法的三个高级版本，它们允许你限制返回行数的范围，或是提供自定义结果处理逻辑，通常在数据集非常庞大的情形下使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span> <span class="params">(String statement, Object parameter, RowBounds rowBounds)</span></span></span><br><span class="line"><span class="function">&lt;T&gt; Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span></span></span><br><span class="line"><span class="function">&lt;K,V&gt; Map&lt;K,V&gt; <span class="title">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowbounds)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span> <span class="params">(String statement, Object parameter, ResultHandler&lt;T&gt; handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span> <span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler&lt;T&gt; handler)</span></span></span><br></pre></td></tr></table></figure>
<p>RowBounds 参数会告诉 MyBatis 略过指定数量的记录，并限制返回结果的数量。RowBounds 类的 offset 和 limit 值只有在构造函数时才能传入，其它时候是不能修改的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> offset = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> limit = <span class="number">25</span>;</span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(offset, limit);</span><br></pre></td></tr></table></figure>
<p>数据库驱动决定了略过记录时的查询效率。为了获得最佳的性能，建议将 ResultSet 类型设置为 SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE（换句话说：不要使用 FORWARD_ONLY）。</p>
<p>ResultHandler 参数允许自定义每行结果的处理过程。你可以将它添加到 List 中、创建 Map 和 Set，甚至丢弃每个返回值，只保留计算后的统计结果。你可以使用 ResultHandler 做很多事，这其实就是 MyBatis 构建 结果列表的内部实现办法。</p>
<p>从版本 3.4.6 开始，<code>ResultHandler</code> 会在存储过程的 REFCURSOR 输出参数中传递使用的 <code>CALLABLE</code> 语句。</p>
<p>它的接口很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext&lt;? extends T&gt; context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ResultContext 参数允许你访问结果对象和当前已被创建的对象数目，另外还提供了一个返回值为 Boolean 的 stop 方法，你可以使用此 stop 方法来停止 MyBatis 加载更多的结果。</p>
<p>使用 ResultHandler 的时候需要注意以下两个限制：</p>
<ul>
<li>使用带 ResultHandler 参数的方法时，收到的数据不会被缓存。</li>
<li>当使用高级的结果映射集（resultMap）时，MyBatis 很可能需要数行结果来构造一个对象。如果你使用了 ResultHandler，你可能会接收到关联（association）或者集合（collection）中尚未被完整填充的对象。</li>
</ul>
<h5 id="立即批量更新方法">立即批量更新方法</h5>
<p>当你将 <code>ExecutorType</code> 设置为 <code>ExecutorType.BATCH</code> 时，可以使用这个方法清除（执行）缓存在 JDBC 驱动类中的批量更新语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;BatchResult&gt; <span class="title">flushStatements</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h5 id="事务控制方法">事务控制方法</h5>
<p>有四个方法用来控制事务作用域。当然，如果你已经设置了自动提交或你使用了外部事务管理器，这些方法就没什么作用了。然而，如果你正在使用由 Connection 实例控制的 JDBC 事务管理器，那么这四个方法就会派上用场：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> force)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(<span class="keyword">boolean</span> force)</span></span></span><br></pre></td></tr></table></figure>
<p>默认情况下 MyBatis 不会自动提交事务，除非它侦测到调用了插入、更新或删除方法改变了数据库。如果你没有使用这些方法提交修改，那么你可以在 commit 和 rollback 方法参数中传入 true 值，来保证事务被正常提交（注意，在自动提交模式或者使用了外部事务管理器的情况下，设置 force 值对 session 无效）。大部分情况下你无需调用 rollback()，因为 MyBatis 会在你没有调用 commit 时替你完成回滚操作。不过，当你要在一个可能多次提交或回滚的 session 中详细控制事务，回滚操作就派上用场了。</p>
<p><strong>提示</strong> MyBatis-Spring 和 MyBatis-Guice 提供了声明式事务处理，所以如果你在使用 Mybatis 的同时使用了 Spring 或者 Guice，请参考它们的手册以获取更多的内容。</p>
<h5 id="本地缓存">本地缓存</h5>
<p>Mybatis 使用到了两种缓存：本地缓存（local cache）和二级缓存（second level cache）。</p>
<p>每当一个新 session 被创建，MyBatis 就会创建一个与之相关联的本地缓存。任何在 session 执行过的查询结果都会被保存在本地缓存中，所以，当再次执行参数相同的相同查询时，就不需要实际查询数据库了。本地缓存将会在做出修改、事务提交或回滚，以及关闭 session 时清空。</p>
<p>默认情况下，本地缓存数据的生命周期等同于整个 session 的周期。由于缓存会被用来解决循环引用问题和加快重复嵌套查询的速度，所以无法将其完全禁用。但是你可以通过设置 localCacheScope=STATEMENT 来只在语句执行时使用缓存。</p>
<p>注意，如果 localCacheScope 被设置为 SESSION，对于某个对象，MyBatis 将返回在本地缓存中唯一对象的引用。对返回的对象（例如 list）做出的任何修改将会影响本地缓存的内容，进而将会影响到在本次 session 中从缓存返回的值。因此，不要对 MyBatis 所返回的对象作出更改，以防后患。</p>
<p>你可以随时调用以下方法来清空本地缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h5 id="确保-sqlsession-被关闭">确保 SqlSession 被关闭</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>对于你打开的任何 session，你都要保证它们被妥善关闭，这很重要。保证妥善关闭的最佳代码模式是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">    <span class="comment">// 假设下面三行代码是你的业务逻辑</span></span><br><span class="line">    session.insert(...);</span><br><span class="line">    session.update(...);</span><br><span class="line">    session.delete(...);</span><br><span class="line">    session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong> 和 SqlSessionFactory 一样，你可以调用当前使用的 SqlSession 的 getConfiguration 方法来获得 Configuration 实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Configuration <span class="title">getConfiguration</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h5 id="使用映射器">使用映射器</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span></span></span><br></pre></td></tr></table></figure>
<p>上述的各个 insert、update、delete 和 select 方法都很强大，但也有些繁琐，它们并不符合类型安全，对你的 IDE 和单元测试也不是那么友好。因此，使用映射器类来执行映射语句是更常见的做法。</p>
<p>我们已经在之前的入门章节中见到过一个使用映射器的示例。一个映射器类就是一个仅需声明与 SqlSession 方法相匹配方法的接口。下面的示例展示了一些方法签名以及它们是如何映射到 SqlSession 上的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorMapper</span> </span>&#123;</span><br><span class="line">  <span class="comment">// (Author) selectOne(&quot;selectAuthor&quot;,5);</span></span><br><span class="line">  <span class="function">Author <span class="title">selectAuthor</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">  <span class="comment">// (List&lt;Author&gt;) selectList(“selectAuthors”)</span></span><br><span class="line">  <span class="function">List&lt;Author&gt; <span class="title">selectAuthors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// (Map&lt;Integer,Author&gt;) selectMap(&quot;selectAuthors&quot;, &quot;id&quot;)</span></span><br><span class="line">  <span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">  <span class="function">Map&lt;Integer, Author&gt; <span class="title">selectAuthors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// insert(&quot;insertAuthor&quot;, author)</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">insertAuthor</span><span class="params">(Author author)</span></span>;</span><br><span class="line">  <span class="comment">// updateAuthor(&quot;updateAuthor&quot;, author)</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">updateAuthor</span><span class="params">(Author author)</span></span>;</span><br><span class="line">  <span class="comment">// delete(&quot;deleteAuthor&quot;,5)</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">deleteAuthor</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总之，每个映射器方法签名应该匹配相关联的 SqlSession 方法，字符串参数 ID 无需匹配。而是由方法名匹配映射语句的 ID。</p>
<p>此外，返回类型必须匹配期望的结果类型，返回单个值时，返回类型应该是返回值的类，返回多个值时，则为数组或集合类，另外也可以是游标（Cursor）。所有常用的类型都是支持的，包括：原始类型、Map、POJO 和 JavaBean。</p>
<p><strong>提示</strong> 映射器接口不需要去实现任何接口或继承自任何类。只要方法签名可以被用来唯一识别对应的映射语句就可以了。</p>
<p><strong>提示</strong> 映射器接口可以继承自其他接口。在使用 XML 来绑定映射器接口时，保证语句处于合适的命名空间中即可。唯一的限制是，不能在两个具有继承关系的接口中拥有相同的方法签名（这是潜在的危险做法，不可取）。</p>
<p>你可以传递多个参数给一个映射器方法。在多个参数的情况下，默认它们将会以 param 加上它们在参数列表中的位置来命名，比如：#{param1}、#{param2}等。如果你想（在有多个参数时）自定义参数的名称，那么你可以在参数上使用 <span class="citation" data-cites="Param">@Param</span>("paramName") 注解。</p>
<p>你也可以给方法传递一个 RowBounds 实例来限制查询结果。</p>
<h5 id="映射器注解">映射器注解</h5>
<p>设计初期的 MyBatis 是一个 XML 驱动的框架。配置信息是基于 XML 的，映射语句也是定义在 XML 中的。而在 MyBatis 3 中，我们提供了其它的配置方式。MyBatis 3 构建在全面且强大的基于 Java 语言的配置 API 之上。它是 XML 和注解配置的基础。注解提供了一种简单且低成本的方式来实现简单的映射语句。</p>
<p><strong>提示</strong> 不幸的是，Java 注解的表达能力和灵活性十分有限。尽管我们花了很多时间在调查、设计和试验上，但最强大的 MyBatis 映射并不能用注解来构建——我们真没开玩笑。而 C# 属性就没有这些限制，因此 MyBatis.NET 的配置会比 XML 有更大的选择余地。虽说如此，基于 Java 注解的配置还是有它的好处的。</p>
<p><strong>注解如下表所示：</strong></p>
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 4%" />
<col style="width: 23%" />
<col style="width: 35%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">注解</th>
<th style="text-align: left;">使用对象</th>
<th style="text-align: left;">XML 等价形式</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>@CacheNamespace</code></td>
<td style="text-align: left;"><code>类</code></td>
<td style="text-align: left;"><code>&lt;cache&gt;</code></td>
<td style="text-align: left;">为给定的命名空间（比如类）配置缓存。属性：<code>implemetation</code>、<code>eviction</code>、<code>flushInterval</code>、<code>size</code>、<code>readWrite</code>、<code>blocking</code>、<code>properties</code>。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@Property</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;property&gt;</code></td>
<td style="text-align: left;">指定参数值或占位符（placeholder）（该占位符能被 <code>mybatis-config.xml</code> 内的配置属性替换）。属性：<code>name</code>、<code>value</code>。（仅在 MyBatis 3.4.2 以上可用）</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@CacheNamespaceRef</code></td>
<td style="text-align: left;"><code>类</code></td>
<td style="text-align: left;"><code>&lt;cacheRef&gt;</code></td>
<td style="text-align: left;">引用另外一个命名空间的缓存以供使用。注意，即使共享相同的全限定类名，在 XML 映射文件中声明的缓存仍被识别为一个独立的命名空间。属性：<code>value</code>、<code>name</code>。如果你使用了这个注解，你应设置 <code>value</code> 或者 <code>name</code> 属性的其中一个。<code>value</code> 属性用于指定能够表示该命名空间的 Java 类型（命名空间名就是该 Java 类型的全限定类名），<code>name</code> 属性（这个属性仅在 MyBatis 3.4.2 以上可用）则直接指定了命名空间的名字。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@ConstructorArgs</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;constructor&gt;</code></td>
<td style="text-align: left;">收集一组结果以传递给一个结果对象的构造方法。属性：<code>value</code>，它是一个 <code>Arg</code> 数组。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@Arg</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;arg&gt;``&lt;idArg&gt;</code></td>
<td style="text-align: left;">ConstructorArgs 集合的一部分，代表一个构造方法参数。属性：<code>id</code>、<code>column</code>、<code>javaType</code>、<code>jdbcType</code>、<code>typeHandler</code>、<code>select</code>、<code>resultMap</code>。id 属性和 XML 元素 <code>&lt;idArg&gt;</code> 相似，它是一个布尔值，表示该属性是否用于唯一标识和比较对象。从版本 3.5.4 开始，该注解变为可重复注解。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@TypeDiscriminator</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;discriminator&gt;</code></td>
<td style="text-align: left;">决定使用何种结果映射的一组取值（case）。属性：<code>column</code>、<code>javaType</code>、<code>jdbcType</code>、<code>typeHandler</code>、<code>cases</code>。cases 属性是一个 <code>Case</code> 的数组。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@Case</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;case&gt;</code></td>
<td style="text-align: left;">表示某个值的一个取值以及该取值对应的映射。属性：<code>value</code>、<code>type</code>、<code>results</code>。results 属性是一个 <code>Results</code> 的数组，因此这个注解实际上和 <code>ResultMap</code> 很相似，由下面的 <code>Results</code> 注解指定。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@Results</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;resultMap&gt;</code></td>
<td style="text-align: left;">一组结果映射，指定了对某个特定结果列，映射到某个属性或字段的方式。属性：<code>value</code>、<code>id</code>。value 属性是一个 <code>Result</code> 注解的数组。而 id 属性则是结果映射的名称。从版本 3.5.4 开始，该注解变为可重复注解。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@Result</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;result&gt;``&lt;id&gt;</code></td>
<td style="text-align: left;">在列和属性或字段之间的单个结果映射。属性：<code>id</code>、<code>column</code>、<code>javaType</code>、<code>jdbcType</code>、<code>typeHandler</code>、<code>one</code>、<code>many</code>。id 属性和 XML 元素 <code>&lt;id&gt;</code> 相似，它是一个布尔值，表示该属性是否用于唯一标识和比较对象。one 属性是一个关联，和 <code>&lt;association&gt;</code> 类似，而 many 属性则是集合关联，和 <code>&lt;collection&gt;</code> 类似。这样命名是为了避免产生名称冲突。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@One</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;association&gt;</code></td>
<td style="text-align: left;">复杂类型的单个属性映射。属性： <code>select</code>，指定可加载合适类型实例的映射语句（也就是映射器方法）全限定名； <code>fetchType</code>，指定在该映射中覆盖全局配置参数 <code>lazyLoadingEnabled</code>； <code>resultMap</code>(available since 3.5.5), which is the fully qualified name of a result map that map to a single container object from select result； <code>columnPrefix</code>(available since 3.5.5), which is column prefix for grouping select columns at nested result map. <strong>提示</strong> 注解 API 不支持联合映射。这是由于 Java 注解不允许产生循环引用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@Many</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><code>&lt;collection&gt;</code></td>
<td style="text-align: left;">复杂类型的集合属性映射。属性： <code>select</code>，指定可加载合适类型实例集合的映射语句（也就是映射器方法）全限定名； <code>fetchType</code>，指定在该映射中覆盖全局配置参数 <code>lazyLoadingEnabled</code> <code>resultMap</code>(available since 3.5.5), which is the fully qualified name of a result map that map to collection object from select result； <code>columnPrefix</code>(available since 3.5.5), which is column prefix for grouping select columns at nested result map. <strong>提示</strong> 注解 API 不支持联合映射。这是由于 Java 注解不允许产生循环引用。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@MapKey</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">供返回值为 Map 的方法使用的注解。它使用对象的某个属性作为 key，将对象 List 转化为 Map。属性：<code>value</code>，指定作为 Map 的 key 值的对象属性名。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@Options</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;">映射语句的属性</td>
<td style="text-align: left;">该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，<code>Options</code> 注解提供了一致、清晰的方式来指定选项。属性：<code>useCache=true</code>、<code>flushCache=FlushCachePolicy.DEFAULT</code>、<code>resultSetType=DEFAULT</code>、<code>statementType=PREPARED</code>、<code>fetchSize=-1</code>、<code>timeout=-1</code>、<code>useGeneratedKeys=false</code>、<code>keyProperty=""</code>、<code>keyColumn=""</code>、<code>resultSets=""</code>, <code>databaseId=""</code>。注意，Java 注解无法指定 <code>null</code> 值。因此，一旦你使用了 <code>Options</code> 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis use the <code>Options</code> with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded. 注意：<code>keyColumn</code> 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 <code>keyColumn</code> 和 <code>keyProperty</code> 可选值信息，请查看“insert, update 和 delete”一节。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@Insert``@Update``@Delete``@Select</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;insert&gt;``&lt;update&gt;``&lt;delete&gt;``&lt;select&gt;</code></td>
<td style="text-align: left;">每个注解分别代表将会被执行的 SQL 语句。它们用字符串数组（或单个字符串）作为参数。如果传递的是字符串数组，字符串数组会被连接成单个完整的字符串，每个字符串之间加入一个空格。这有效地避免了用 Java 代码构建 SQL 语句时产生的“丢失空格”问题。当然，你也可以提前手动连接好字符串。属性：<code>value</code>，指定用来组成单个 SQL 语句的字符串数组。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis use a statement with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@InsertProvider``@UpdateProvider``@DeleteProvider``@SelectProvider</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;insert&gt;``&lt;update&gt;``&lt;delete&gt;``&lt;select&gt;</code></td>
<td style="text-align: left;">允许构建动态 SQL。这些备选的 SQL 注解允许你指定返回 SQL 语句的类和方法，以供运行时执行。（从 MyBatis 3.4.6 开始，可以使用 <code>CharSequence</code> 代替 <code>String</code> 来作为返回类型）。当执行映射语句时，MyBatis 会实例化注解指定的类，并调用注解指定的方法。你可以通过 <code>ProviderContext</code> 传递映射方法接收到的参数、"Mapper interface type" 和 "Mapper method"（仅在 MyBatis 3.4.5 以上支持）作为参数。（MyBatis 3.4 以上支持传入多个参数） 属性：<code>value</code>、<code>type</code>、<code>method</code>、<code>databaseId</code>。 <code>value</code> and <code>type</code> 属性用于指定类名 (The <code>type</code> attribute is alias for <code>value</code>, you must be specify either one. But both attributes can be omit when specify the <code>defaultSqlProviderType</code> as global configuration)。 <code>method</code> 用于指定该类的方法名（从版本 3.5.1 开始，可以省略 <code>method</code> 属性，MyBatis 将会使用 <code>ProviderMethodResolver</code> 接口解析方法的具体实现。如果解析失败，MyBatis 将会使用名为 <code>provideSql</code> 的降级实现）。<strong>提示</strong> 接下来的“SQL 语句构建器”一章将会讨论该话题，以帮助你以更清晰、更便于阅读的方式构建动态 SQL。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis will use a provider method with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@Param</code></td>
<td style="text-align: left;"><code>参数</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">如果你的映射方法接受多个参数，就可以使用这个注解自定义每个参数的名字。否则在默认情况下，除 <code>RowBounds</code> 以外的参数会以 "param" 加参数位置被命名。例如 <code>#&#123;param1&#125;</code>, <code>#&#123;param2&#125;</code>。如果使用了 <code>@Param("person")</code>，参数就会被命名为 <code>#&#123;person&#125;</code>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@SelectKey</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;"><code>&lt;selectKey&gt;</code></td>
<td style="text-align: left;">这个注解的功能与 <code>&lt;selectKey&gt;</code> 标签完全一致。该注解只能在 <code>@Insert</code> 或 <code>@InsertProvider</code> 或 <code>@Update</code> 或 <code>@UpdateProvider</code> 标注的方法上使用，否则将会被忽略。如果标注了 <code>@SelectKey</code> 注解，MyBatis 将会忽略掉由 <code>@Options</code> 注解所设置的生成主键或设置（configuration）属性。属性：<code>statement</code> 以字符串数组形式指定将会被执行的 SQL 语句，<code>keyProperty</code> 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，<code>before</code> 可以指定为 <code>true</code> 或 <code>false</code> 以指明 SQL 语句应被在插入语句的之前还是之后执行。<code>resultType</code> 则指定 <code>keyProperty</code> 的 Java 类型。<code>statementType</code> 则用于选择语句类型，可以选择 <code>STATEMENT</code>、<code>PREPARED</code> 或 <code>CALLABLE</code> 之一，它们分别对应于 <code>Statement</code>、<code>PreparedStatement</code> 和 <code>CallableStatement</code>。默认值是 <code>PREPARED</code>。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis will use a statement with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@ResultMap</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">这个注解为 <code>@Select</code> 或者 <code>@SelectProvider</code> 注解指定 XML 映射中 <code>&lt;resultMap&gt;</code> 元素的 id。这使得注解的 select 可以复用已在 XML 中定义的 ResultMap。如果标注的 select 注解中存在 <code>@Results</code> 或者 <code>@ConstructorArgs</code> 注解，这两个注解将被此注解覆盖。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>@ResultType</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">在使用了结果处理器的情况下，需要使用此注解。由于此时的返回类型为 void，所以 Mybatis 需要有一种方法来判断每一行返回的对象类型。如果在 XML 有对应的结果映射，请使用 <code>@ResultMap</code> 注解。如果结果类型在 XML 的 <code>&lt;select&gt;</code> 元素中指定了，就不需要使用其它注解了。否则就需要使用此注解。比如，如果一个标注了 <span class="citation" data-cites="Select">@Select</span> 的方法想要使用结果处理器，那么它的返回类型必须是 void，并且必须使用这个注解（或者 <span class="citation" data-cites="ResultMap">@ResultMap</span>）。这个注解仅在方法返回类型是 void 的情况下生效。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>@Flush</code></td>
<td style="text-align: left;"><code>方法</code></td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">如果使用了这个注解，定义在 Mapper 接口中的方法就能够调用 <code>SqlSession#flushStatements()</code> 方法。（Mybatis 3.3 以上可用）</td>
</tr>
</tbody>
</table>
<h5 id="映射注解示例">映射注解示例</h5>
<p>这个例子展示了如何使用 <span class="citation" data-cites="SelectKey">@SelectKey</span> 注解来在插入前读取数据库序列的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into table3 (id, name) values(#&#123;nameId&#125;, #&#123;name&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(statement=&quot;call next value for TestSequence&quot;, keyProperty=&quot;nameId&quot;, before=true, resultType=int.class)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertTable3</span><span class="params">(Name name)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这个例子展示了如何使用 <span class="citation" data-cites="SelectKey">@SelectKey</span> 注解来在插入后读取数据库自增列的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into table2 (name) values(#&#123;name&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(statement=&quot;call identity()&quot;, keyProperty=&quot;nameId&quot;, before=false, resultType=int.class)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertTable2</span><span class="params">(Name name)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这个例子展示了如何使用 <code>@Flush</code> 注解来调用 <code>SqlSession#flushStatements()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Flush</span></span><br><span class="line"><span class="function">List&lt;BatchResult&gt; <span class="title">flush</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>这些例子展示了如何通过指定 <span class="citation" data-cites="Result">@Result</span> 的 id 属性来命名结果集：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(id = &quot;userResult&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">  @Result(property = &quot;id&quot;, column = &quot;uid&quot;, id = true),</span></span><br><span class="line"><span class="meta">  @Result(property = &quot;firstName&quot;, column = &quot;first_name&quot;),</span></span><br><span class="line"><span class="meta">  @Result(property = &quot;lastName&quot;, column = &quot;last_name&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from users where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Results(id = &quot;companyResults&quot;)</span></span><br><span class="line"><span class="meta">@ConstructorArgs(&#123;</span></span><br><span class="line"><span class="meta">  @Arg(column = &quot;cid&quot;, javaType = Integer.class, id = true),</span></span><br><span class="line"><span class="meta">  @Arg(column = &quot;name&quot;, javaType = String.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from company where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">Company <span class="title">getCompanyById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这个例子展示了如何使用单个参数的 <span class="citation" data-cites="SqlProvider">@SqlProvider</span> 注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(type = UserSqlBuilder.class, method = &quot;buildGetUsersByName&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSqlBuilder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildGetUsersByName</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        WHERE(<span class="string">&quot;name like #&#123;value&#125; || &#x27;%&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ORDER_BY(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子展示了如何使用多个参数的 <span class="citation" data-cites="SqlProvider">@SqlProvider</span> 注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(type = UserSqlBuilder.class, method = &quot;buildGetUsersByName&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;orderByColumn&quot;)</span> String orderByColumn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSqlBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果不使用 @Param，就应该定义与 mapper 方法相同的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildGetUsersByName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">final</span> String name, <span class="keyword">final</span> String orderByColumn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">      WHERE(<span class="string">&quot;name like #&#123;name&#125; || &#x27;%&#x27;&quot;</span>);</span><br><span class="line">      ORDER_BY(orderByColumn);</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果使用 @Param，就可以只定义需要使用的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildGetUsersByName</span><span class="params">(<span class="meta">@Param(&quot;orderByColumn&quot;)</span> <span class="keyword">final</span> String orderByColumn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">      WHERE(<span class="string">&quot;name like #&#123;name&#125; || &#x27;%&#x27;&quot;</span>);</span><br><span class="line">      ORDER_BY(orderByColumn);</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This example shows usage that share an sql provider class to all mapper methods using global configuration(Available since 3.5.6):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">configuration.setDefaultSqlProviderType(TemplateFilePathProvider.class); <span class="comment">// Specify an sql provider class for sharing on all mapper methods</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Can omit the type/value attribute on sql provider annotation</span></span><br><span class="line"><span class="comment">// If omit it, the MyBatis apply the class that specified on defaultSqlProviderType.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SelectProvider</span> <span class="comment">// Same with @SelectProvider(TemplateFilePathProvider.class)</span></span><br><span class="line">  <span class="function">User <span class="title">findUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@InsertProvider</span> <span class="comment">// Same with @InsertProvider(TemplateFilePathProvider.class)</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UpdateProvider</span> <span class="comment">// Same with @UpdateProvider(TemplateFilePathProvider.class)</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DeleteProvider</span> <span class="comment">// Same with @DeleteProvider(TemplateFilePathProvider.class)</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下例子展示了 <code>ProviderMethodResolver</code>（3.5.1 后可用）的默认实现使用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(UserSqlProvider.class)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在你的 provider 类中实现 ProviderMethodResolver 接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSqlProvider</span> <span class="keyword">implements</span> <span class="title">ProviderMethodResolver</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 默认实现中，会将映射器方法的调用解析到实现的同名方法上</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsersByName</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">      SELECT(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      FROM(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        WHERE(<span class="string">&quot;name like #&#123;value&#125; || &#x27;%&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ORDER_BY(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This example shows usage the <code>databaseId</code> attribute on the statement annotation(Available since 3.5.5):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(value = &quot;SELECT SYS_GUID() FROM dual&quot;, databaseId = &quot;oracle&quot;)</span> <span class="comment">// Use this statement if DatabaseIdProvider provide &quot;oracle&quot;</span></span><br><span class="line"><span class="meta">@Select(value = &quot;SELECT uuid_generate_v4()&quot;, databaseId = &quot;postgres&quot;)</span> <span class="comment">// Use this statement if DatabaseIdProvider provide &quot;postgres&quot;</span></span><br><span class="line"><span class="meta">@Select(&quot;SELECT RANDOM_UUID()&quot;)</span> <span class="comment">// Use this statement if the DatabaseIdProvider not configured or not matches databaseId</span></span><br><span class="line"><span class="function">String <span class="title">generateId</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="sql-语句构建器">7.SQL 语句构建器</h2>
<h3 id="问题">7.1 问题</h3>
<p>Java 程序员面对的最痛苦的事情之一就是在 Java 代码中嵌入 SQL 语句。这通常是因为需要动态生成 SQL 语句，不然我们可以将它们放到外部文件或者存储过程中。如你所见，MyBatis 在 XML 映射中具备强大的 SQL 动态生成能力。但有时，我们还是需要在 Java 代码里构建 SQL 语句。此时，MyBatis 有另外一个特性可以帮到你，让你从处理典型问题中解放出来，比如加号、引号、换行、格式化问题、嵌入条件的逗号管理及 AND 连接。确实，在 Java 代码中动态生成 SQL 代码真的就是一场噩梦。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, &quot;</span></span><br><span class="line"><span class="string">&quot;P.LAST_NAME,P.CREATED_ON, P.UPDATED_ON &quot;</span> +</span><br><span class="line"><span class="string">&quot;FROM PERSON P, ACCOUNT A &quot;</span> +</span><br><span class="line"><span class="string">&quot;INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID &quot;</span> +</span><br><span class="line"><span class="string">&quot;INNER JOIN COMPANY C on D.COMPANY_ID = C.ID &quot;</span> +</span><br><span class="line"><span class="string">&quot;WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) &quot;</span> +</span><br><span class="line"><span class="string">&quot;OR (P.LAST_NAME like ?) &quot;</span> +</span><br><span class="line"><span class="string">&quot;GROUP BY P.ID &quot;</span> +</span><br><span class="line"><span class="string">&quot;HAVING (P.LAST_NAME like ?) &quot;</span> +</span><br><span class="line"><span class="string">&quot;OR (P.FIRST_NAME like ?) &quot;</span> +</span><br><span class="line"><span class="string">&quot;ORDER BY P.ID, P.FULL_NAME&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="解决方案">7.2 解决方案</h3>
<p>MyBatis 3 提供了方便的工具类来帮助解决此问题。借助 SQL 类，我们只需要简单地创建一个实例，并调用它的方法即可生成 SQL 语句。让我们来用 SQL 类重写上面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    SELECT(<span class="string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME&quot;</span>);</span><br><span class="line">    SELECT(<span class="string">&quot;P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON&quot;</span>);</span><br><span class="line">    FROM(<span class="string">&quot;PERSON P&quot;</span>);</span><br><span class="line">    FROM(<span class="string">&quot;ACCOUNT A&quot;</span>);</span><br><span class="line">    INNER_JOIN(<span class="string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span>);</span><br><span class="line">    INNER_JOIN(<span class="string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span>);</span><br><span class="line">    WHERE(<span class="string">&quot;P.ID = A.ID&quot;</span>);</span><br><span class="line">    WHERE(<span class="string">&quot;P.FIRST_NAME like ?&quot;</span>);</span><br><span class="line">    OR();</span><br><span class="line">    WHERE(<span class="string">&quot;P.LAST_NAME like ?&quot;</span>);</span><br><span class="line">    GROUP_BY(<span class="string">&quot;P.ID&quot;</span>);</span><br><span class="line">    HAVING(<span class="string">&quot;P.LAST_NAME like ?&quot;</span>);</span><br><span class="line">    OR();</span><br><span class="line">    HAVING(<span class="string">&quot;P.FIRST_NAME like ?&quot;</span>);</span><br><span class="line">    ORDER_BY(<span class="string">&quot;P.ID&quot;</span>);</span><br><span class="line">    ORDER_BY(<span class="string">&quot;P.FULL_NAME&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子有什么特别之处吗？仔细看一下你会发现，你不用担心可能会重复出现的 "AND" 关键字，或者要做出用 "WHERE" 拼接还是 "AND" 拼接还是不用拼接的选择。SQL 类已经为你处理了哪里应该插入 "WHERE"、哪里应该使用 "AND" 的问题，并帮你完成所有的字符串拼接工作。</p>
<h3 id="sql-类">7.3 SQL 类</h3>
<p>这里有一些示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名内部类风格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deletePersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    DELETE_FROM(<span class="string">&quot;PERSON&quot;</span>);</span><br><span class="line">    WHERE(<span class="string">&quot;ID = #&#123;id&#125;&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Builder / Fluent 风格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String sql = <span class="keyword">new</span> SQL()</span><br><span class="line">    .INSERT_INTO(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .VALUES(<span class="string">&quot;ID, FIRST_NAME&quot;</span>, <span class="string">&quot;#&#123;id&#125;, #&#123;firstName&#125;&quot;</span>)</span><br><span class="line">    .VALUES(<span class="string">&quot;LAST_NAME&quot;</span>, <span class="string">&quot;#&#123;lastName&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">  <span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态条件（注意参数需要使用 final 修饰，以便匿名内部类对它们进行访问）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectPersonLike</span><span class="params">(<span class="keyword">final</span> String id, <span class="keyword">final</span> String firstName, <span class="keyword">final</span> String lastName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    SELECT(<span class="string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME&quot;</span>);</span><br><span class="line">    FROM(<span class="string">&quot;PERSON P&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line">      WHERE(<span class="string">&quot;P.ID like #&#123;id&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (firstName != <span class="keyword">null</span>) &#123;</span><br><span class="line">      WHERE(<span class="string">&quot;P.FIRST_NAME like #&#123;firstName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastName != <span class="keyword">null</span>) &#123;</span><br><span class="line">      WHERE(<span class="string">&quot;P.LAST_NAME like #&#123;lastName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ORDER_BY(<span class="string">&quot;P.LAST_NAME&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deletePersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    DELETE_FROM(<span class="string">&quot;PERSON&quot;</span>);</span><br><span class="line">    WHERE(<span class="string">&quot;ID = #&#123;id&#125;&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    INSERT_INTO(<span class="string">&quot;PERSON&quot;</span>);</span><br><span class="line">    VALUES(<span class="string">&quot;ID, FIRST_NAME&quot;</span>, <span class="string">&quot;#&#123;id&#125;, #&#123;firstName&#125;&quot;</span>);</span><br><span class="line">    VALUES(<span class="string">&quot;LAST_NAME&quot;</span>, <span class="string">&quot;#&#123;lastName&#125;&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updatePersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    UPDATE(<span class="string">&quot;PERSON&quot;</span>);</span><br><span class="line">    SET(<span class="string">&quot;FIRST_NAME = #&#123;firstName&#125;&quot;</span>);</span><br><span class="line">    WHERE(<span class="string">&quot;ID = #&#123;id&#125;&quot;</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">方法</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>SELECT(String)``SELECT(String...)</code></td>
<td style="text-align: left;">开始新的或追加到已有的 <code>SELECT</code>子句。可以被多次调用，参数会被追加到 <code>SELECT</code> 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>SELECT_DISTINCT(String)``SELECT_DISTINCT(String...)</code></td>
<td style="text-align: left;">开始新的或追加到已有的 <code>SELECT</code>子句，并添加 <code>DISTINCT</code> 关键字到生成的查询中。可以被多次调用，参数会被追加到 <code>SELECT</code> 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>FROM(String)``FROM(String...)</code></td>
<td style="text-align: left;">开始新的或追加到已有的 <code>FROM</code>子句。可以被多次调用，参数会被追加到 <code>FROM</code>子句。 参数通常是一个表名或别名，也可以是数据库驱动程序接受的任意参数。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>JOIN(String)``JOIN(String...)``INNER_JOIN(String)``INNER_JOIN(String...)``LEFT_OUTER_JOIN(String)``LEFT_OUTER_JOIN(String...)``RIGHT_OUTER_JOIN(String)``RIGHT_OUTER_JOIN(String...)</code></td>
<td style="text-align: left;">基于调用的方法，添加新的合适类型的 <code>JOIN</code> 子句。 参数可以包含一个由列和连接条件构成的标准连接。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>WHERE(String)``WHERE(String...)</code></td>
<td style="text-align: left;">插入新的 <code>WHERE</code> 子句条件，并使用 <code>AND</code> 拼接。可以被多次调用，对于每一次调用产生的新条件，会使用 <code>AND</code> 拼接起来。要使用 <code>OR</code> 分隔，请使用 <code>OR()</code>。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>OR()</code></td>
<td style="text-align: left;">使用 <code>OR</code> 来分隔当前的 <code>WHERE</code> 子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 <code>SQL</code>。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>AND()</code></td>
<td style="text-align: left;">使用 <code>AND</code> 来分隔当前的 <code>WHERE</code>子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 <code>SQL</code>。由于 <code>WHERE</code> 和 <code>HAVING</code>都会自动使用 <code>AND</code> 拼接, 因此这个方法并不常用，只是为了完整性才被定义出来。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>GROUP_BY(String)``GROUP_BY(String...)</code></td>
<td style="text-align: left;">追加新的 <code>GROUP BY</code> 子句，使用逗号拼接。可以被多次调用，每次调用都会使用逗号将新的条件拼接起来。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>HAVING(String)``HAVING(String...)</code></td>
<td style="text-align: left;">追加新的 <code>HAVING</code> 子句。使用 AND 拼接。可以被多次调用，每次调用都使用<code>AND</code>来拼接新的条件。要使用 <code>OR</code> 分隔，请使用 <code>OR()</code>。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ORDER_BY(String)``ORDER_BY(String...)</code></td>
<td style="text-align: left;">追加新的 <code>ORDER BY</code> 子句，使用逗号拼接。可以多次被调用，每次调用会使用逗号拼接新的条件。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>LIMIT(String)``LIMIT(int)</code></td>
<td style="text-align: left;">追加新的 <code>LIMIT</code> 子句。 仅在 SELECT()、UPDATE()、DELETE() 时有效。 当在 SELECT() 中使用时，应该配合 OFFSET() 使用。（于 3.5.2 引入）</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>OFFSET(String)``OFFSET(long)</code></td>
<td style="text-align: left;">追加新的 <code>OFFSET</code> 子句。 仅在 SELECT() 时有效。 当在 SELECT() 时使用时，应该配合 LIMIT() 使用。（于 3.5.2 引入）</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>OFFSET_ROWS(String)``OFFSET_ROWS(long)</code></td>
<td style="text-align: left;">追加新的 <code>OFFSET n ROWS</code> 子句。 仅在 SELECT() 时有效。 该方法应该配合 FETCH_FIRST_ROWS_ONLY() 使用。（于 3.5.2 加入）</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>FETCH_FIRST_ROWS_ONLY(String)``FETCH_FIRST_ROWS_ONLY(int)</code></td>
<td style="text-align: left;">追加新的 <code>FETCH FIRST n ROWS ONLY</code> 子句。 仅在 SELECT() 时有效。 该方法应该配合 OFFSET_ROWS() 使用。（于 3.5.2 加入）</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>DELETE_FROM(String)</code></td>
<td style="text-align: left;">开始新的 delete 语句，并指定删除表的表名。通常它后面都会跟着一个 WHERE 子句！</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>INSERT_INTO(String)</code></td>
<td style="text-align: left;">开始新的 insert 语句，并指定插入数据表的表名。后面应该会跟着一个或多个 VALUES() 调用，或 INTO_COLUMNS() 和 INTO_VALUES() 调用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>SET(String)``SET(String...)</code></td>
<td style="text-align: left;">对 update 语句追加 "set" 属性的列表</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>UPDATE(String)</code></td>
<td style="text-align: left;">开始新的 update 语句，并指定更新表的表名。后面都会跟着一个或多个 SET() 调用，通常也会有一个 WHERE() 调用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>VALUES(String, String)</code></td>
<td style="text-align: left;">追加数据值到 insert 语句中。第一个参数是数据插入的列名，第二个参数则是数据值。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>INTO_COLUMNS(String...)</code></td>
<td style="text-align: left;">追加插入列子句到 insert 语句中。应与 INTO_VALUES() 一同使用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>INTO_VALUES(String...)</code></td>
<td style="text-align: left;">追加插入值子句到 insert 语句中。应与 INTO_COLUMNS() 一同使用。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ADD_ROW()</code></td>
<td style="text-align: left;">添加新的一行数据，以便执行批量插入。（于 3.5.2 引入）</td>
</tr>
</tbody>
</table>
<p><strong>提示</strong> 注意，SQL 类将原样插入 <code>LIMIT</code>、<code>OFFSET</code>、<code>OFFSET n ROWS</code> 以及 <code>FETCH FIRST n ROWS ONLY</code> 子句。换句话说，类库不会为不支持这些子句的数据库执行任何转换。 因此，用户应该要了解目标数据库是否支持这些子句。如果目标数据库不支持这些子句，产生的 SQL 可能会引起运行错误。</p>
<p>从版本 3.4.2 开始，你可以像下面这样使用可变长度参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .SELECT(<span class="string">&quot;P.ID&quot;</span>, <span class="string">&quot;A.USERNAME&quot;</span>, <span class="string">&quot;A.PASSWORD&quot;</span>, <span class="string">&quot;P.FULL_NAME&quot;</span>, <span class="string">&quot;D.DEPARTMENT_NAME&quot;</span>, <span class="string">&quot;C.COMPANY_NAME&quot;</span>)</span><br><span class="line">    .FROM(<span class="string">&quot;PERSON P&quot;</span>, <span class="string">&quot;ACCOUNT A&quot;</span>)</span><br><span class="line">    .INNER_JOIN(<span class="string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span>, <span class="string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span>)</span><br><span class="line">    .WHERE(<span class="string">&quot;P.ID = A.ID&quot;</span>, <span class="string">&quot;P.FULL_NAME like #&#123;name&#125;&quot;</span>)</span><br><span class="line">    .ORDER_BY(<span class="string">&quot;P.ID&quot;</span>, <span class="string">&quot;P.FULL_NAME&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .INSERT_INTO(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .INTO_COLUMNS(<span class="string">&quot;ID&quot;</span>, <span class="string">&quot;FULL_NAME&quot;</span>)</span><br><span class="line">    .INTO_VALUES(<span class="string">&quot;#&#123;id&#125;&quot;</span>, <span class="string">&quot;#&#123;fullName&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updatePersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .UPDATE(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .SET(<span class="string">&quot;FULL_NAME = #&#123;fullName&#125;&quot;</span>, <span class="string">&quot;DATE_OF_BIRTH = #&#123;dateOfBirth&#125;&quot;</span>)</span><br><span class="line">    .WHERE(<span class="string">&quot;ID = #&#123;id&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从版本 3.5.2 开始，你可以像下面这样构建批量插入语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertPersonsSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// INSERT INTO PERSON (ID, FULL_NAME)</span></span><br><span class="line">  <span class="comment">//     VALUES (#&#123;mainPerson.id&#125;, #&#123;mainPerson.fullName&#125;) , (#&#123;subPerson.id&#125;, #&#123;subPerson.fullName&#125;)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .INSERT_INTO(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .INTO_COLUMNS(<span class="string">&quot;ID&quot;</span>, <span class="string">&quot;FULL_NAME&quot;</span>)</span><br><span class="line">    .INTO_VALUES(<span class="string">&quot;#&#123;mainPerson.id&#125;&quot;</span>, <span class="string">&quot;#&#123;mainPerson.fullName&#125;&quot;</span>)</span><br><span class="line">    .ADD_ROW()</span><br><span class="line">    .INTO_VALUES(<span class="string">&quot;#&#123;subPerson.id&#125;&quot;</span>, <span class="string">&quot;#&#123;subPerson.fullName&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从版本 3.5.2 开始，你可以像下面这样构建限制返回结果数的 SELECT 语句,：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectPersonsWithOffsetLimitSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// SELECT id, name FROM PERSON</span></span><br><span class="line">  <span class="comment">//     LIMIT #&#123;limit&#125; OFFSET #&#123;offset&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .SELECT(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>)</span><br><span class="line">    .FROM(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .LIMIT(<span class="string">&quot;#&#123;limit&#125;&quot;</span>)</span><br><span class="line">    .OFFSET(<span class="string">&quot;#&#123;offset&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectPersonsWithFetchFirstSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// SELECT id, name FROM PERSON</span></span><br><span class="line">  <span class="comment">//     OFFSET #&#123;offset&#125; ROWS FETCH FIRST #&#123;limit&#125; ROWS ONLY</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">    .SELECT(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>)</span><br><span class="line">    .FROM(<span class="string">&quot;PERSON&quot;</span>)</span><br><span class="line">    .OFFSET_ROWS(<span class="string">&quot;#&#123;offset&#125;&quot;</span>)</span><br><span class="line">    .FETCH_FIRST_ROWS_ONLY(<span class="string">&quot;#&#123;limit&#125;&quot;</span>)</span><br><span class="line">    .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sqlbuilder-和-selectbuilder-已经废弃">7.4 SqlBuilder 和 SelectBuilder (已经废弃)</h3>
<p>在版本 3.2 之前，我们的实现方式不太一样，我们利用 ThreadLocal 变量来掩盖一些对 Java DSL 不太友好的语言限制。现在，现代 SQL 构建框架使用的构建器和匿名内部类思想已被人们所熟知。因此，我们废弃了基于这种实现方式的 SelectBuilder 和 SqlBuilder 类。</p>
<p>下面的方法仅仅适用于废弃的 SqlBuilder 和 SelectBuilder 类。</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">方法</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>BEGIN()</code> / <code>RESET()</code></td>
<td style="text-align: left;">这些方法清空 SelectBuilder 类的 ThreadLocal 状态，并准备好构建一个新的语句。开始新的语句时，<code>BEGIN()</code> 是最名副其实的（可读性最好的）。但如果由于一些原因（比如程序逻辑在某些条件下需要一个完全不同的语句），在执行过程中要重置语句构建状态，就很适合使用 <code>RESET()</code>。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>SQL()</code></td>
<td style="text-align: left;">该方法返回生成的 <code>SQL()</code> 并重置 <code>SelectBuilder</code> 状态（等价于调用了 <code>BEGIN()</code> 或 <code>RESET()</code>）。因此，该方法只能被调用一次！</td>
</tr>
</tbody>
</table>
<p>SelectBuilder 和 SqlBuilder 类并不神奇，但最好还是知道它们的工作原理。 SelectBuilder 以及 SqlBuilder 借助静态导入和 ThreadLocal 变量实现了对插入条件友好的简洁语法。要使用它们，只需要静态导入这个类的方法即可，就像这样（只能使用其中的一条，不能同时使用）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.apache.ibatis.jdbc.SelectBuilder.*;</span><br><span class="line">import static org.apache.ibatis.jdbc.SqlBuilder.*;</span><br></pre></td></tr></table></figure>
<p>然后就可以像下面这样创建一些方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 已被废弃 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectBlogsSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BEGIN(); <span class="comment">// 重置 ThreadLocal 状态变量</span></span><br><span class="line">  SELECT(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  FROM(<span class="string">&quot;BLOG&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> SQL();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 已被废弃 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BEGIN(); <span class="comment">// 重置 ThreadLocal 状态变量</span></span><br><span class="line">  SELECT(<span class="string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME&quot;</span>);</span><br><span class="line">  SELECT(<span class="string">&quot;P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON&quot;</span>);</span><br><span class="line">  FROM(<span class="string">&quot;PERSON P&quot;</span>);</span><br><span class="line">  FROM(<span class="string">&quot;ACCOUNT A&quot;</span>);</span><br><span class="line">  INNER_JOIN(<span class="string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span>);</span><br><span class="line">  INNER_JOIN(<span class="string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span>);</span><br><span class="line">  WHERE(<span class="string">&quot;P.ID = A.ID&quot;</span>);</span><br><span class="line">  WHERE(<span class="string">&quot;P.FIRST_NAME like ?&quot;</span>);</span><br><span class="line">  OR();</span><br><span class="line">  WHERE(<span class="string">&quot;P.LAST_NAME like ?&quot;</span>);</span><br><span class="line">  GROUP_BY(<span class="string">&quot;P.ID&quot;</span>);</span><br><span class="line">  HAVING(<span class="string">&quot;P.LAST_NAME like ?&quot;</span>);</span><br><span class="line">  OR();</span><br><span class="line">  HAVING(<span class="string">&quot;P.FIRST_NAME like ?&quot;</span>);</span><br><span class="line">  ORDER_BY(<span class="string">&quot;P.ID&quot;</span>);</span><br><span class="line">  ORDER_BY(<span class="string">&quot;P.FULL_NAME&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> SQL();</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>
<h2 id="日志">8.日志</h2>
<p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p>
<ul>
<li>SLF4J</li>
<li>Apache Commons Logging</li>
<li>Log4j 2</li>
<li>Log4j</li>
<li>JDK logging</li>
</ul>
<p>MyBatis 内置日志工厂会基于运行时检测信息选择日志委托实现。它会（按上面罗列的顺序）使用第一个查找到的实现。当没有找到这些实现时，将会禁用日志功能。</p>
<p>不少应用服务器（如 Tomcat 和 WebShpere）的类路径中已经包含 Commons Logging。注意，在这种配置环境下，MyBatis 会把 Commons Logging 作为日志工具。这就意味着在诸如 WebSphere 的环境中，由于提供了 Commons Logging 的私有实现，你的 Log4J 配置将被忽略。这个时候你就会感觉很郁闷：看起来 MyBatis 将你的 Log4J 配置忽略掉了（其实是因为在这种配置环境下，MyBatis 使用了 Commons Logging 作为日志实现）。如果你的应用部署在一个类路径已经包含 Commons Logging 的环境中，而你又想使用其它日志实现，你可以通过在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择其它日志实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;settings&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
<p>可选的值有：SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING，或者是实现了 <code>org.apache.ibatis.logging.Log</code> 接口，且构造方法以字符串为参数的类完全限定名。</p>
<p>你也可以调用以下任一方法来选择日志实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.logging.LogFactory.useSlf4jLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useLog4JLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useJdkLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useCommonsLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useStdOutLogging();</span><br></pre></td></tr></table></figure>
<p>你应该在调用其它 MyBatis 方法之前调用以上的某个方法。另外，仅当运行时类路径中存在该日志实现时，日志实现的切换才会生效。如果你的环境中并不存在 Log4J，你却试图调用了相应的方法，MyBatis 就会忽略这一切换请求，并将以默认的查找顺序决定使用的日志实现。</p>
<p>关于 SLF4J、Apache Commons Logging、Apache Log4J 和 JDK Logging 的 API 介绍不在本文档介绍范围内。不过，下面的例子可以作为一个快速入门。有关这些日志框架的更多信息，可以参考以下链接：</p>
<ul>
<li><a href="http://www.slf4j.org/">SLF4J</a></li>
<li><a href="http://commons.apache.org/logging">Apache Commons Logging</a></li>
<li><a href="http://logging.apache.org/log4j/">Apache Log4j 1.x and 2.x</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/logging/overview.html">JDK Logging API</a></li>
</ul>
<h3 id="日志配置">日志配置</h3>
<p>你可以通过在包、映射类的全限定名、命名空间或全限定语句名上开启日志功能，来查看 MyBatis 的日志语句。</p>
<p>再次提醒，具体配置步骤取决于日志实现。接下来我们会以 Log4J 作为示范。配置日志功能非常简单：添加一个或多个配置文件（如 log4j.properties），有时还需要添加 jar 包（如 log4j.jar）。下面的例子将使用 Log4J 来配置完整的日志服务。一共两个步骤：</p>
<h4 id="步骤-1添加-log4j-的-jar-包">步骤 1：添加 Log4J 的 jar 包</h4>
<p>由于我们使用的是 Log4J，我们要确保它的 jar 包可以被应用使用。为此，需要将 jar 包添加到应用的类路径中。Log4J 的 jar 包可以在上面的链接中下载。</p>
<p>对于 web 应用或企业级应用，你可以将 <code>log4j.jar</code> 添加到 <code>WEB-INF/lib</code> 目录下；对于独立应用，可以将它添加到 JVM 的 <code>-classpath</code> 启动参数中。</p>
<h4 id="步骤-2配置-log4j">步骤 2：配置 Log4J</h4>
<p>配置 Log4J 比较简单。假设你需要记录这个映射器的日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在应用的类路径中创建一个名为 <code>log4j.properties</code> 的文件，文件的具体内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ERROR, stdout</span></span><br><span class="line"><span class="comment"># MyBatis 日志配置</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>
<p>上述配置将使 Log4J 详细打印 <code>org.mybatis.example.BlogMapper</code> 的日志，对于应用的其它部分，只打印错误信息。</p>
<p>为了实现更细粒度的日志输出，你也可以只打印特定语句的日志。以下配置将只打印语句 <code>selectBlog</code> 的日志：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper.selectBlog</span>=<span class="string">TRACE</span></span><br></pre></td></tr></table></figure>
<p>或者，你也可以打印一组映射器的日志，只需要打开映射器所在的包的日志功能即可：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.logger.org.mybatis.example</span>=<span class="string">TRACE</span></span><br></pre></td></tr></table></figure>
<p>某些查询可能会返回庞大的结果集。这时，你可能只想查看 SQL 语句，而忽略返回的结果集。为此，SQL 语句将会在 DEBUG 日志级别下记录（JDK 日志则为 FINE）。返回的结果集则会在 TRACE 日志级别下记录（JDK 日志则为 FINER)。因此，只要将日志级别调整为 DEBUG 即可：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.logger.org.mybatis.example</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>但如果你要为下面的映射器 XML 文件打印日志，又该怎么办呢？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时，你可以通过打开命名空间的日志功能来对整个 XML 记录日志：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br></pre></td></tr></table></figure>
<p>而要记录具体语句的日志，可以这样做：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper.selectBlog</span>=<span class="string">TRACE</span></span><br></pre></td></tr></table></figure>
<p>你应该会发现，为映射器和 XML 文件打开日志功能的语句毫无差别。</p>
<p><strong>提示</strong> 如果你使用的是 SLF4J 或 Log4j 2，MyBatis 会设置 tag 为 MYBATIS。</p>
<p>配置文件 <code>log4j.properties</code> 的余下内容用来配置输出器（appender），这一内容已经超出本文档的范围。关于 Log4J 的更多内容，可以参考上面的 Log4J 网站。或者，你也可以简单地做个实验，看看不同的配置会产生怎样的效果。</p>
<h2 id="mybatis---example用法">9.Mybatis---Example用法</h2>
<p>Example类可以用来生成一个几乎无限的where子句.</p>
<p>Example类包含一个内部静态类 Criteria 包含一个用 anded 组合在where子句中的条件列表. Example类包含一个 List 属性,所有内部类Criteria中的子句会用 ored组合在一起. 使用不同属性的 Criteria 类允许您生成无限类型的where子句.</p>
<p>创建 Criteria 对象 可以使用Example类中的 createCriteria() 或者 or() . 如果 Criteria 对象是用 createCriteria() 创建的，它会自动为 List 属性添加一个 Criteria 对象 - 这使得它更容易写一个简单的where子句， 如果您不需要 or 或者其他几个子句组合的话. 用 or(Criteria criteria) 方法创建 Criteria 对象, 方法里的 criteria 对象会被添加进 Criteria 对象的列表中.</p>
<p>重要 我们推荐您只使用 or() 方法创建 Criteria 对象. 我们相信这种方法使代码更有可读性.</p>
<h3 id="用法">9.1 用法</h3>
<ul>
<li>简单查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line">example.createCriteria().andField1EqualTo(<span class="number">5</span>); </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line">example.or().andField1EqualTo(<span class="number">5</span>); </span><br></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句是:</p>
<p>where field1 = 5</p>
<blockquote>
<p>下面的例子展示了如何用生成后的Example类去生成一个复杂的where子句 (用到了 JSE 5.0 的泛型)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</span><br><span class="line"></span><br><span class="line">example.or() </span><br><span class="line">.andField1EqualTo(<span class="number">5</span>) </span><br><span class="line">.andField2IsNull();</span><br><span class="line"></span><br><span class="line">example.or() </span><br><span class="line">.andField3NotEqualTo(<span class="number">9</span>) </span><br><span class="line">.andField4IsNotNull();</span><br><span class="line"></span><br><span class="line">List field5Values = <span class="keyword">new</span> ArrayList(); </span><br><span class="line">field5Values.add(<span class="number">8</span>); </span><br><span class="line">field5Values.add(<span class="number">11</span>); </span><br><span class="line">field5Values.add(<span class="number">14</span>); </span><br><span class="line">field5Values.add(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">example.or() </span><br><span class="line">.andField5In(field5Values);</span><br><span class="line"></span><br><span class="line">example.or() </span><br><span class="line">.andField6Between(<span class="number">3</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> (field1 <span class="operator">=</span> <span class="number">5</span> <span class="keyword">and</span> field2 <span class="keyword">is</span> <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">or</span> (field3 <span class="operator">&lt;&gt;</span> <span class="number">9</span> <span class="keyword">and</span> field4 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">or</span> (field5 <span class="keyword">in</span> (<span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">22</span>)) </span><br><span class="line"><span class="keyword">or</span> (field6 <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">7</span>) </span><br></pre></td></tr></table></figure>
<h3 id="去重复查询">9.2 去重复查询</h3>
<p>您可以在所有的Example类中调用 setDistinct(true) 方法进行强制去重复查询</p>
<h3 id="criteria类">9.3 Criteria类</h3>
<blockquote>
<p>Criteria 内部类的每个属性都包含 andXXX 方法，以及如下的标准的SQL查询方法</p>
</blockquote>
<p><code>Criteria</code> 内部类的每个属性都包含 <code>andXXX</code> 方法，以及如下的标准的SQL查询方法:</p>
<ul>
<li>IS NULL - 指相关的列必须为NULL</li>
<li>IS NOT NULL - 指相关的列必须不为NULL</li>
<li>= (equal) - 指相关的列必须等于方法参数中的值</li>
<li>&lt;&gt; (not equal) - 指相关的列必须不等于方法参数中的值</li>
<li>&gt; (greater than) - 指相关的列必须大于方法参数中的值</li>
<li>&gt;= (greater than or equal) - 指相关的列必须大于等于方法参数中的值</li>
<li>&lt; (less than) - 指相关的列必须小于于方法参数中的值</li>
<li>&lt;= (less than or equal) - 指相关的列必须小于等于方法参数中的值</li>
<li>LIKE - 指相关的列必须 "like" 方法参数中的值. 这个方法不用必须加入 '%', 您必须设置方法参数中的值.</li>
<li>NOT LIKE - 指相关的列必须 "not like" 方法参数中的值. 这个方法不用必须加入 '%', 您必须设置方法参数中的值.</li>
<li>BETWEEN - 指相关的列必须在 "between" 方法参数中的两个值之间.</li>
<li>NOT BETWEEN - 指相关的列必须不在 "not between" 方法参数中的两个值之间.</li>
<li>IN - 指相关的列必须在传入的方法参数的list中.</li>
<li>NOT IN - 指相关的列必须不在传入的方法参数的list中.</li>
</ul>
<h2 id="总结-mybatis-spring">总结 Mybatis-Spring</h2>
<p>1.编写数据源配置</p>
<p>2.sqlSessionFactory</p>
<p>3.sqlSessionTemplate</p>
<p>4.需要给接口加实现类</p>
<p>5.将自己写的实现类，注入到Spring中，测试使用即可</p>
<h2 id="声明式事务">声明式事务</h2>
<h3 id="回顾事务">1. 回顾事务</h3>
<ul>
<li>把一组业务当成一个业务来做：要么都成功，要么都失败！</li>
<li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎！</li>
<li>确保完整性和一致性</li>
</ul>
<h3 id="spring中七种propagation类的事务属性详解">2. Spring中七种Propagation类的事务属性详解：</h3>
<p><strong>REQUIRED</strong>：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</p>
<p><strong>SUPPORTS</strong>：支持当前事务，如果当前没有事务，就以非事务方式执行。</p>
<p><strong>MANDATORY</strong>：支持当前事务，如果当前没有事务，就抛出异常。</p>
<p><strong>REQUIRES_NEW</strong>：新建事务，如果当前存在事务，把当前事务挂起。</p>
<p><strong>NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p>
<p><strong>NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常。</p>
<p><strong>NESTED</strong>：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>数字集成电路期末考点</title>
    <url>/2021/12/24/%E6%95%B0%E5%AD%97%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E6%9C%9F%E6%9C%AB%E8%80%83%E7%82%B9/</url>
    <content><![CDATA[<p>考试时间 2022-1-11</p>
<span id="more"></span>
<h2 id="动态功耗">5.51 动态功耗</h2>
<h3 id="积分公式">积分公式</h3>
<h3 id="e_vddc_lv_dd2"><span class="math inline">\(E_{vdd}=C_L{V_{DD}}^2\)</span></h3>
<h3 id="e_cfracc_lv_dd22"><span class="math inline">\(E_{c}=\frac{C_L{V_{DD}}^2}{2}\)</span></h3>
<h3 id="他们的差">他们的差</h3>
<p>消耗在pmos上的功率</p>
<h2 id="有比逻辑">6.22 有比逻辑</h2>
<p>电路: p管网络替换为伪电阻</p>
<p>优点: 节省面积</p>
<p>缺点: 漏电 一直有静态功耗</p>
<h2 id="动态cmos">6.3 动态cmos</h2>
<blockquote>
<p>p管网络替换为伪电阻后 在伪电阻上加一个时钟 受时钟控制</p>
</blockquote>
<h2 id="动态锁存器和寄存器">7.3 动态锁存器和寄存器</h2>
<p>图7.26</p>
<h2 id="p管掺杂3价离子-n管掺杂5价离子">P管掺杂+3价离子 N管掺杂+5价离子</h2>
<h2 id="摩尔定律">摩尔定律</h2>
<p>集成电路上可容纳的晶体管数目，约每隔18个月增加一倍</p>
<h2 id="mos-管是谁发明的">mos 管是谁发明的</h2>
<p>1947年贝尔实验室</p>
<h2 id="同步电路与异步电路的区别">同步电路与异步电路的区别</h2>
<blockquote>
<p>同步电路共享一个时钟 异步电路各自有各自的时钟</p>
</blockquote>
<h2 id="专业名词解释">专业名词解释</h2>
<h3 id="mosfet">MOSFET</h3>
<p>金属氧化物半导体场效应管，一种可以广泛用于模拟电路与数字电路的场效应晶体管</p>
<h3 id="drc">DRC</h3>
<p>Design Rule Check 版图设计规则检查</p>
<h3 id="gdsⅱ">GDSⅡ</h3>
<p>一种数据库文件格式，用于集成电路版图的数据转换，并成为事实上的工业标准</p>
<h3 id="lvs">LVS</h3>
<p>Layout VS Schematic 验证版图和原理图电路是否一致</p>
<h3 id="pmos">PMOS</h3>
<p>P型金属-氧化物-半导体</p>
<h3 id="nmos">NMOS</h3>
<p>N型金属-氧化物-半导体</p>
<h3 id="ip">IP</h3>
<p>intellectual property 知识产权，集成电路中，某一方提供的，形式为逻辑单元、芯片设计的可重用模块</p>
<p>分类</p>
<ul>
<li>软核(与工艺无关、具有寄存器传输级硬件语言描述的设计代码，可以进行后续设计)</li>
<li>硬核(通过逻辑综合、布局布线之后一系列表征文件，具有特定的工艺形式、物理实现方式)</li>
<li>固核(介于软核和硬核之间，已经通过功能验证、时序分析等过程，可通过逻辑门级网表的形式获取)</li>
</ul>
<h2 id="数字电路中抽象层次">数字电路中抽象层次</h2>
<ul>
<li>器件 工艺</li>
<li>电路 原理</li>
<li>门 逻辑</li>
<li>模块 IP</li>
<li>系统 应用</li>
</ul>
<h2 id="时钟网络的源头">时钟网络的源头</h2>
<p>晶振<span class="math inline">\(\to\)</span>锁相环倍频<span class="math inline">\(\to\)</span>分频器<span class="math inline">\(\to\)</span>时钟网络分配</p>
<h2 id="反相器">反相器</h2>
<h3 id="阈值电压-v_t">阈值电压 <span class="math inline">\(V_T\)</span></h3>
<h3 id="功耗">功耗</h3>
<h3 id="开关特效">开关特效</h3>
<h3 id="动态特性-延迟-t0.69rc">动态特性 延迟 <span class="math inline">\(T=0.69RC\)</span></h3>
<h2 id="umc-联电-smic-台积电">UMC 联电 SMIC 台积电</h2>
<h2 id="寄存器与锁存器的区别">寄存器与锁存器的区别</h2>
<ol type="1">
<li>触发方式 clk 上升沿 下降沿 ： 电平</li>
<li>同步-寄存器 异步-锁存器</li>
<li>构成 寄存器是由锁存器构成的</li>
</ol>
<h2 id="芯片">芯片</h2>
<p>擅入: 一个端口能输入的数量</p>
<p>擅出: 一个端口能给出输出的数量</p>
<h2 id="传播时延表达式">传播时延表达式</h2>
<h3 id="充分条件">充分条件</h3>
<p><span class="math inline">\(T_{setup}+T{clk2q}+T_{max}&lt;T\)</span></p>
<h3 id="必要条件">必要条件</h3>
<p><span class="math inline">\(T_{clk2q}+T_{min}&gt;T_{hold}\)</span></p>
<h2 id="fpga">FPGA</h2>
<h3 id="现场可编程逻辑阵列">现场可编程逻辑阵列</h3>
<h3 id="结构重用">结构重用</h3>
<h3 id="宏单元-包括了数字电路系统的各个单元-如-alu-组合逻辑单元-寄存器-源-储存器">宏单元: 包括了数字电路系统的各个单元 如 ALU 组合逻辑单元 寄存器 源 储存器</h3>
<h2 id="基本概念">基本概念</h2>
<h3 id="验证与测试">1.验证与测试</h3>
<h4 id="验证">验证</h4>
<p>a.算法级验证</p>
<p>b.功能 时序</p>
<p>c.前仿真</p>
<p>d.后仿真</p>
<h4 id="测试">测试</h4>
<p>DFT综合</p>
<p>ATE(自动测试) 芯片制造出来以后</p>
<h3 id="综合">2.综合</h3>
<p>a.RTL-映射转换-某种工艺下的网表</p>
<p>b.优化(约束)</p>
<p>c.评估</p>
<h2 id="数字集成电路设计流程">数字集成电路设计流程</h2>
<h3 id="a.半定制基于标准单元设计">a.半定制(基于标准单元设计)</h3>
<p>系统设计(应用 竞品分析 软硬件划分)</p>
<p>RTL设计(建模 结构 RTLcoding 验证)</p>
<p>综合(DFT) Design For Test 设计为测试(在芯片原始设计阶段中插入各种用于提高测试性)</p>
<hr />
<p>版图规划</p>
<p>place</p>
<p>Routing(STA 静态时序分析 CTS 时钟树综合 优化时钟不确定性) cts<span class="math inline">\(\to\)</span>加反相器链</p>
<p>Static timing analysis</p>
<p>Clock tree synthesis</p>
<p>提取网表</p>
<p>后仿</p>
<p>DFM 设计为制造(DRC LVS)</p>
<p>生成GDSⅡ文件</p>
<p>ATE 自动测试</p>
<p>包含 细粒度的标准单元 和 大颗粒的宏单元</p>
<p>b.全定制</p>
<h2 id="数字电路相对于模拟电路">数字电路相对于模拟电路</h2>
<ol type="1">
<li>更易大规模</li>
<li>稳定</li>
<li>可重用</li>
</ol>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>专业课</category>
      </categories>
      <tags>
        <tag>期末破防</tag>
      </tags>
  </entry>
  <entry>
    <title>建站指南</title>
    <url>/2021/10/03/%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>终于把这小破站搭好了 你也想拥有一个么 零基础教学局</p>
<span id="more"></span>
<blockquote>
<p>说是指南也谈不上，因为作为一个菜鸟，也都是在网络上搜罗搜罗，东拼西凑，搭好了这个小破站，看到那些维护了5、6年的个人博客网站，顿时心生敬佩</p>
</blockquote>
<h2 id="概述">概述：</h2>
<ul>
<li>网站框架：Hexo
<ul>
<li>选择理由：
<ul>
<li>机缘巧合，一眼就被它简明大气的风格吸引了(Next)，难怪拥戴的人这么多</li>
<li>对我这种初出茅庐的小菜鸡比较友好</li>
<li>学生党福音，白嫖属性Max</li>
</ul></li>
</ul></li>
<li>部署：GitHub Pages
<ul>
<li>选择理由：
<ul>
<li>免费方便，可能之后如果要让更多的人看到，要迁移，好像是跟搜索优先级和服务器访问速度有关(不知道是不是给自己挖了一个坑)</li>
<li>上新一下Github,让自己的仓库充实一下 ，就当成一个开端吧</li>
</ul></li>
</ul></li>
<li>图床：PicGo + gitHub图床
<ul>
<li>选择理由：
<ul>
<li>免费！！！操作相对简单，虽然我也没有怎么体验过其他图床</li>
</ul></li>
</ul></li>
<li>环境版本：
<ul>
<li>Node.js:14.18.0 -&gt; npm:6.14.15(他俩现在是一起的绑定在一起的，就是防止出现版本不适配的问题)</li>
<li>git：2.31.1</li>
</ul></li>
</ul>
<hr />
<h2 id="当你也想搭建一个小破站玩一玩">当你也想搭建一个小破站玩一玩</h2>
<blockquote>
<p>我推荐你阅读官方的文档和作者的指南 当然 如果你是一个和我一样的freshman 你可以将这篇文章当做一个入门，一个new beginning</p>
</blockquote>
<ul>
<li>博主搭建时 参考的文档
<ul>
<li>你把Hexo下下来以后 Hexo init 以后 在博客文件的根目录里的 _config.yml里里面每一个功能模块 上方的注释里都有网址 复制到浏览器查看 然后将网站的语言设置为中文 就可以开启你奇妙的探索之旅了 (反正我是这么做的)</li>
</ul></li>
<li>跟着我这篇博客 走一遍流程</li>
</ul>
<h2 id="环境搭建">1.环境搭建</h2>
<h3 id="nodejs下载">1.1、nodejs下载</h3>
<blockquote>
<p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！(官网cv的，目前不太能理解，感觉有点像jre？)</p>
</blockquote>
<p><font size=6 color=red>坑</font>:如果你之前下载了node.js，是beta版(最、较新的版本) 请务必删了 然后重新下载LTS版本(稳定并且长期维护的版本)，不然你就会像我一样，在npm和node版本适配和vs C++环境的问题上兜兜转转十个小时，一筹莫展。记住一句话，遇到问题超过一小时还没办法解决 就删干净重装稳定版，remake</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p>一路next：<strong>最后这里一定要选择 它会检测当前环境是否完整，然后下载确实的环境 (Attention!)</strong></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location-1.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p>然后在PowerShell(windows)里 node -v 和 npm -v 一下 看看装好了没</p>
<h3 id="git下载和使用">1.2、Git下载和使用</h3>
<ul>
<li>这教程就比较多了 百度第一条 附一下</li>
</ul>
<blockquote>
<p>https://www.cnblogs.com/ximiaomiao/p/7140456.html</p>
</blockquote>
<ul>
<li>Git的原理和相关操作的熟练 来这个网站学习一下吧 比较有趣 动手性还强</li>
</ul>
<blockquote>
<p>https://oschina.gitee.io/learn-git-branching/</p>
</blockquote>
<h3 id="hexo安装">1.3、Hexo安装</h3>
<p>步骤：</p>
<ul>
<li>就安一个内核，至于其他的第三方插件，需要再装(注意这里推荐使用GIt bash 命令行总会出一下莫名其妙的错误)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>
<ul>
<li>查看一下hexo版本 看看安装是否成功了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>出现如下这种 证明安装好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.19042</span><br><span class="line">node: 14.18.0</span><br><span class="line">v8: 8.4.371.23-node.84</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 83</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1l</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>
<ul>
<li>自己找一个喜欢的位置，创建一个空的文件夹，右键git bash一下,输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>初始化，其实就是将GitHub上的核心库clone下来，如果没有科学上网，网速较慢的话，多试几次，总有一次会成功，或者按照网上说的，去查ip，设置本地的Host，不过博主自己实践过，效果真心一般，最快的ip 延时都是 100ms+</p>
<blockquote>
<p>博客文件结构如下</p>
</blockquote>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-structure.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p><strong>OK! 搞定了 简简单单~~~</strong></p>
<h3 id="hexo测试-hello-world">1.4、Hexo测试 Hello World</h3>
<ul>
<li>同样在博客根目录下 git bash 一下(就是你之前创建的那个文件夹下)，输入</li>
<li>清楚本地缓存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<ul>
<li>编译渲染(general)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<ul>
<li>将博客网站运行在本地(server) 加上--debug本地的改动可以实时的动态在本地的4000端口查看(推荐)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<ul>
<li>在浏览器上输入 localhost:4000查看界面如下</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-start.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>Congratulation! Everything well down~~~</li>
</ul>
<h2 id="个性化博客和deploy发布">2.个性化博客和deploy(发布)</h2>
<blockquote>
<p>在个性化博客之前，首先你需要选一个主题 可以在官网去逛一逛，如果你是被我这篇博客的风格吸引的 又或者 你不知道该怎么选择</p>
<p>那就选nexT 一定没错的 要相信大家的选择</p>
</blockquote>
<ul>
<li>下载主题(theme)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next --save</span><br></pre></td></tr></table></figure>
<ul>
<li>查看博客文件夹下的node_modules里有没有hexo-theme-next 有就下载成功了</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-location.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>进入这个文件夹 以后我们对next主题的配置都是对这里的_config.yml文件配置了</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-config.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<blockquote>
<p>在hexo-theme-next文件夹下 有一个_config.yml 这个主要是个性化主题的</p>
<p>在博客根目录我这里的Blog下，也有一个_config.yml这个主要是配置全局的一些东西</p>
<p>(由于主题配置的_config.yml里的东西太多，这篇博客就引一两个重要的说，然后根目录下的配置文件枚举说明)</p>
</blockquote>
<ul>
<li>Blog/_config.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">whlll-blog</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;whlll的小破站❥&#x27;</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">whlll</span> <span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment"># 网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27; # 设置GitHub pages 这个也可以在博客根目录下的_config.yml下配置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面都是一些规则设置 可以不用管</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format # 时间格式设置</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># 配置主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 配置远程仓库(我这配置的是GitHub的仓库和ali云ESC服务器上的git仓库)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">              <span class="attr">github:</span> <span class="string">https://github.com/whlll-coder/whlll-coder.github.io.git,main</span></span><br><span class="line">              <span class="comment">#hexo: git@47.115.207.246:/home/git/hexo.git,main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span> <span class="comment"># 第三方插件 hexo-word-counter的配置 可以统计每篇博客的阅读时间 字数之类的 感觉很细节很贴心</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span> <span class="comment"># 本地搜索在博客根目录_config.yml下的配置 还需要在主题_config.yml下enable：true一下就可以用了</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>hexo-theme-next/_config.yml(截取博主配置的)</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes # 主题样式 有四个 博主对比了一下 个人比较喜欢Mist</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode # 黑暗模式 网页端看不出来啥 但是移动端会变</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span> <span class="comment"># 网站logo设置(网上有很多免费的在线logo设计软件，虽然质量和可选择性不是那么的尽善尽美 直接改名字替换原来的就ok了 这里不知道能不能使用图床里的url地址 没有以后更新的时候把这个坑填一下)</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span> <span class="comment"># 设置菜单 直接取消注解就可以了 </span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span>	<span class="comment"># 设置社交连接和友情连接 依葫芦画瓢</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/whlll-coder</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:whlll0305lhl@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/u/7193773610</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">谁把钱丢了:</span> <span class="string">https://www.jmyblog.top/</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span> <span class="comment"># 设置是否开启博客的文章目录功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span> <span class="comment"># 开启文章的的打赏功能</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">Buy</span> <span class="string">me</span> <span class="string">a</span> <span class="string">coffee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span> <span class="comment"># 附上付款码</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/wechatpay.jpg</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span> <span class="comment"># 开启GitHub小标 博客右上角</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/whlll-coder</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span> <span class="comment"># 开启本地搜索功能 </span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Chat Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need to enable and configure the chat service.</span></span><br><span class="line"><span class="attr">chat:</span> <span class="comment"># 设置在线客服功能(客服当然是博主本人~~~)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set false to disable icon.</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">Chat</span> <span class="string">with</span> <span class="string">me</span> <span class="comment"># Button text, change it as you wish.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra Support</span></span><br><span class="line"><span class="comment"># For more information: https://chatra.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line"><span class="attr">chatra:</span> <span class="comment"># 先用的是这个软件 感觉还可以 只需要去下面的网站注册一下 然后把setting里的id复制过来就可以了</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">cHCGeJJx2x2CH2DDt</span></span><br><span class="line">  <span class="comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Canvas ribbon</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="string">彩带动画特效</span> <span class="string">个人觉得一般</span> <span class="string">喜欢可以开启看看</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">100</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>搞了这么多这么久 来发布一篇博客试一试吧</p>
</blockquote>
<h3 id="创建博文">2.1、创建博文</h3>
<ul>
<li>一样的，到博客的根目录下 git bash 一下 输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;你的博客标题&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>在根目录下的source/_post文件夹下，你就能找到你刚刚生成的博文的md文件了 用Typora打开皆可以开启你的创作之旅了</li>
<li>在md文件里，hexo会自动帮你生成一个前缀</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: MySql笔记</span><br><span class="line">date: 2021-10-02 19:55:12</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 工作学习</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> MySql</span><br><span class="line"><span class="section">- 数据库</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的categories和tags是什么 -&gt; 文章的分类和标签</p>
</blockquote>
<h3 id="文章分类创建">2.2、文章分类创建</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建成功后，在Blog.md文件 将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-10-02 19:30:09</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文章标签创建">2.3、文章标签创建</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建成功后，在Blog.mdwe文件，将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-03 14:50:12</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文章发布">2.4、文章发布</h3>
<ul>
<li>写好文章保存之后</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d (发布到远程仓库，通过GitHub page便可以访问)</span><br></pre></td></tr></table></figure>
<h2 id="第三方插件">3.第三方插件</h2>
<ul>
<li>在博客根目录下的 package.json 下 有你的当前使用的第三方插件和相关依赖 如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-next&quot;</span>: <span class="string">&quot;^8.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-word-counter&quot;</span>: <span class="string">&quot;0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;live2d-widget-model-tororo&quot;</span>: <span class="string">&quot;^1.0.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hexo-deployer-git">3.1、hexo-deployer-git</h3>
<blockquote>
<p>博客发布是与git适配的一个插件 第一次 hexo d 时 需要在 GitHub setting下生成一个 access token 可以参考b站Hexo教程最后一集3-5分钟搞定</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="hexo-helper-live2d">3.2、hexo-helper-live2d</h3>
<blockquote>
<p>一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>
<ul>
<li>本站的小tororo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-tororo</span><br></pre></td></tr></table></figure>
<p>在博客根目录下的_config.yml下配置一下，配置一下 开猫即用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br></pre></td></tr></table></figure>
<h3 id="hexo-word-counter">3.3、hexo-word-counter</h3>
<blockquote>
<p>字数统计 阅读时长统计</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-word-counter</span><br></pre></td></tr></table></figure>
<h3 id="hexo-tag-cloud">3.4、hexo-tag-cloud</h3>
<blockquote>
<p>标签云</p>
</blockquote>
<ul>
<li>使用</li>
</ul>
<blockquote>
<p>eg:D:_modules-theme-next_macro</p>
</blockquote>
<ul>
<li>修改</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/tags-cloud.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>自定义：根目录下添加</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">  <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">  <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">  <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">  <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">  <span class="attr">maxSpeed:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">pauseOnSelected:</span> <span class="literal">false</span> <span class="comment"># true 意味着当选中对应 tag 时,停止转动</span></span><br></pre></td></tr></table></figure>
<h2 id="迁移aliyun服务器">4.迁移aliyun服务器</h2>
<ul>
<li>站长服务器Linux版本 -&gt; Centos8</li>
</ul>
<h4 id="服务器安装nginx并启动">4.1、服务器安装nginx并启动</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yum install nginx</span><br><span class="line"></span><br><span class="line">&gt;nginx -v //检查是否安装成功</span><br></pre></td></tr></table></figure>
<ul>
<li>/usr/sbin/nginx: nginx 主程序</li>
<li>/etc/nginx: 存放 nginx 相关配置</li>
<li>/var/log/nginx: 存放 nginx 日志</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd /usr/sbin</span><br><span class="line"></span><br><span class="line">&gt;./nginx //启动nginx</span><br><span class="line"></span><br><span class="line">&gt;ps -ef|grep nginx //查看进程 是否启动成功</span><br></pre></td></tr></table></figure>
<h4 id="clone项目到服务器">4.2、Clone项目到服务器</h4>
<ul>
<li>没有 git？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yum install git</span><br><span class="line"></span><br><span class="line">&gt;git --version //检查一下</span><br><span class="line"></span><br><span class="line">&gt;git config --global user.name &quot;your name&quot;</span><br><span class="line">&gt;git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>nginx 默认的目录为 <code>/var/www/html</code>，我们将我们的博客的源代码 clone 至此，将 server 下的 root 字段值修改为 clone 后的博客目录路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd /var/www/html</span><br><span class="line"></span><br><span class="line">&gt;git clone https://github.com/whlll-coder/whlll-coder.github.io.git</span><br><span class="line"></span><br><span class="line">&gt;vim /etc/nginx/nginx.conf //修改为如下</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /var/www/html/whlll-coder.github.io;</span><br></pre></td></tr></table></figure>
<h4 id="创建远程仓库实现同步部署">4.3、创建远程仓库实现同步部署</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;adduser git</span><br><span class="line"></span><br><span class="line">&gt;cd /home/git</span><br><span class="line"></span><br><span class="line">&gt;git init --bare hexo.git //创建裸仓</span><br><span class="line"></span><br><span class="line">&gt;chown -R git:git hexo.git //修改仓库所有者和组的权限 不然 hexo d 会报没有权限修改</span><br><span class="line"></span><br><span class="line">将本机的id_rsa文件内容拷贝到阿里云服务器的 /home/git/.ssh/authorized_keys 中</span><br><span class="line"></span><br><span class="line">&gt;vim /home/git/hexo.git/hooks/post-receive //写入如下</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/html/whlll-coder.github.io --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure>
<ul>
<li>仓库名写GitHub上自己的</li>
</ul>
<h4 id="博客根目录配置deploy">4.2、博客根目录配置deploy</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">              <span class="attr">github:</span> <span class="string">https://github.com/whlll-coder/whlll-coder.github.io.git,main</span></span><br><span class="line">              <span class="attr">hexo:</span> <span class="string">git@47.115.207.246:/home/git/hexo.git,main</span></span><br></pre></td></tr></table></figure>
<ul>
<li>大功告成，现在来试试 hexo clean -&gt; hexo g -&gt; hexo d 吧</li>
</ul>
]]></content>
      <categories>
        <category>小破站</category>
      </categories>
      <tags>
        <tag>建站指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper</title>
    <url>/2021/11/06/Zookeeper/</url>
    <content><![CDATA[<p>ZooKeeper是一种分布式协调服务，用于管理大型主机。 在分布式环境中协调和管理服务是一个复杂的过程。</p>
<span id="more"></span>
<h2 id="zookeeper架构">ZooKeeper架构</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111062200401.jpg" /></p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">部分</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Client</td>
<td style="text-align: left;">客户端，我们的分布式应用程序集群中的一个节点，从服务器访问信息。 对于特定的时间间隔，每个客户端向服务器发送消息以使服务器知道客户端是活着的。类似地，当客户端连接时，服务器发送确认。 如果连接的服务器没有响应，客户端会自动将消息重定向到另一个服务器。</td>
</tr>
<tr class="even">
<td style="text-align: left;">Server</td>
<td style="text-align: left;">服务器，我们的ZooKeeper集合中的一个节点，为客户端提供所有的服务。 向客户端发送确认，通知服务器处于活动状态。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ensemble</td>
<td style="text-align: left;">ZooKeeper服务器组。 形成整体所需的最小节点数为3。</td>
</tr>
<tr class="even">
<td style="text-align: left;">Leader</td>
<td style="text-align: left;">服务器节点，如果任何连接的节点发生故障，则执行自动恢复。 领导者在服务启动时被选举。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Follower</td>
<td style="text-align: left;">服务器节点跟随引导指令。</td>
</tr>
</tbody>
</table>
<h2 id="分层命名空间">分层命名空间</h2>
<p>下图描述了用于内存表示的ZooKeeper文件系统的树结构。 ZooKeeper节点称为 <strong>znode</strong> 。 每个znode由一个名称标识，并用路径(/)序列分隔。</p>
<ul>
<li>在图中，首先有一个根 znode 以“/"分隔。 在根目录下，您有两个逻辑命名空间 <strong>config</strong> 和 <strong>workers</strong> 。</li>
<li><strong>config</strong> 命名空间用于集中配置管理， <strong>workers</strong> 命名空间用于命名。</li>
<li>在 <strong>config</strong> 命名空间下，每个znode最多可存储1MB的数据。 这类似于UNIX文件系统，除了父znode也可以存储数据。 这种结构的主要目的是存储同步数据并描述znode的元数据。 此结构称为 <strong>ZooKeeper数据模型</strong>。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111062204233.jpg" /></p>
<p>ZooKeeper数据模型中的每个znode都维护着一个 <strong>stat</strong> 结构。 A stat仅提供znode的<strong>元数据</strong>。 它由<em>版本号，操作控制列表(ACL)，时间戳和数据长度</em>组成</p>
<ul>
<li><strong>版本号</strong> - 每个znode都有版本号，这意味着每次与znode关联的数据发生更改时，其对应的版本号也会增加。 当多个zookeeper客户端尝试在同一znode上执行操作时，版本号的使用很重要。</li>
<li><strong>操作控制列表(ACL)</strong> - ACL基本上是访问znode的认证机制。 它管理所有znode读取和写入操作。</li>
<li><strong>时间戳</strong> - 时间戳表示创建和修改znode所经过的时间。 它通常表示为毫秒。 ZooKeeper标识“事务ID"(zxid)对znode的每个更改。 <strong>Zxid</strong> 是唯一的，并且为每个事务维护时间，以便您可以轻松地确定从一个请求到另一个请求的时间。</li>
<li><strong>数据长度</strong> - 存储在znode中的数据总量是数据长度。 您最多可以存储1MB的数据。</li>
</ul>
<h3 id="znodes的类型">Znodes的类型</h3>
<p>Znodes被分为持久性，连续性和短暂性。</p>
<ul>
<li><strong>Persistence znode</strong> - 即使在创建该特定znode的客户端断开连接后，Persistence znode仍然存在。 默认情况下，除非另有说明，否则所有znode都是持久的。</li>
<li><strong>临时znode</strong> - 临时znode有效，直到客户端活着。 当客户端从ZooKeeper集合断开连接时，临时znode会自动删除。 为此，只有临时znode不允许有孩子进一步。 如果删除临时znode，则下一个合适的节点将填充其位置。 临时znode在领导选举中发挥重要作用。</li>
<li><strong>顺序znode</strong> - 顺序znode可以是持久的或短暂的。 当一个新的znode被创建为一个连续的znode，然后ZooKeeper设置znode的路径，通过附加一个10位的序列号到原始名称。 例如，如果将具有路径 <strong>/ myapp</strong> 的znode创建为顺序znode，则ZooKeeper将将路径更改为 <strong>/ myapp0000000001</strong> ，并将下一个序列号设置为0000000002.如果两个 顺序znode是并发创建的，那么ZooKeeper从不对每个znode使用相同的数字。 顺序znode在锁定和同步中起重要作用。</li>
</ul>
<h3 id="会话">会话</h3>
<p>会话对于ZooKeeper的操作非常重要。 会话中的请求按FIFO顺序执行。 一旦客户端连接到服务器，将建立会话并向客户端分配<strong>会话ID</strong> 。</p>
<p>客户端以特定的时间间隔发送<strong>心跳</strong>以保持会话有效。 如果ZooKeeper集合没有从客户端接收到超过在服务启动时指定的时间段(会话超时)的心跳，则它决定客户端死亡。</p>
<p>会话超时通常用毫秒表示。 当会话由于任何原因结束时，在该会话期间创建的临时znode也会被删除。</p>
<h3 id="手表">手表</h3>
<p>手表是一种简单的机制，使客户端得到关于ZooKeeper集合中的更改的通知。 客户端可以在读取特定znode时设置手表。 手表会向注册的客户端发送任何znode(客户端注册表)更改的通知。</p>
<p>Znode更改是与znode的相关数据的修改或znode的孩子的更改。 只触发一次手表。 如果客户端想要再次通知，则必须通过另一个读取操作来完成。 当连接会话过期时，客户端将与服务器断开连接，相关联的手表也将被删除。</p>
<h2 id="zookeeper-工作流">Zookeeper 工作流</h2>
<p>一旦ZooKeeper集合启动，它将等待客户端连接。 客户端将连接到ZooKeeper集合中的一个节点。 它可以是领导者或跟随者节点。 一旦客户端被连接，该节点向该特定客户端分配会话ID并向该客户端发送确认。 如果客户端没有得到确认，它只是尝试连接ZooKeeper集合中的另一个节点。 一旦连接到节点，客户端将以定期间隔向节点发送心跳，以确保连接不会丢失。</p>
<ul>
<li><strong>如果客户端想要读取特定的znode，</strong>会向具有znode路径的节点发送<strong>读取请求</strong>，并且节点通过从其自己的<a href="http://www.dba.cn/">数据库</a>获取它来返回所请求的znode 。 为此，在ZooKeeper集合中读取速度快。</li>
<li><strong>如果客户端想要将数据存储在ZooKeeper集合</strong>中，它会将znode路径和数据发送到服务器。 连接的服务器将该请求转发给领导者，然后领导者将向所有的跟随者重新发出写入请求。 如果只有大多数节点成功响应，则写请求将成功，并且成功的返回码将被发送到客户端。 否则，写入请求将失败。 严格的大多数节点被称为 <strong>Quorum</strong> 。</li>
</ul>
<h2 id="zookeeper集合中的节点">ZooKeeper集合中的节点</h2>
<p>让我们分析在ZooKeeper集合中拥有不同数量的节点的效果。</p>
<ul>
<li>如果我们有<strong>单个节点</strong>，则当该节点失败时，ZooKeeper集合失败。 它有助于“单点故障"，并且不推荐在生产环境中使用。</li>
<li>如果我们有<strong>两个节点</strong>和一个节点失败，我们没有多数，因为两个中的一个不是多数。</li>
<li>如果我们有<strong>三个节点</strong>和一个节点失败，我们有大多数，所以，这是最低要求。 ZooKeeper集合在实际生产环境中必须至少有三个节点。</li>
<li>如果我们有<strong>四个节点</strong>和两个节点失败，它再次失败，它类似于有三个节点。 额外节点不用于任何目的，因此，最好添加奇数的节点，例如3,5,7。</li>
</ul>
<p>我们知道写入过程比ZooKeeper集合中的读取过程昂贵，因为所有节点都需要在其数据库中写入相同的数据。 因此，与具有用于平衡环境的大量节点相比，具有更少数量的节点(3,5或7)是更好的。</p>
<p>下图描述了ZooKeeper WorkFlow，后面的表解释了它的不同组件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111062216190.png" /></p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">零件</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Write</td>
<td style="text-align: left;">写过程由领导节点处理。 领导者将写请求转发到所有znode，并等待znode的答案。 如果znode的一半回复，则写入过程完成。</td>
</tr>
<tr class="even">
<td style="text-align: left;">Read</td>
<td style="text-align: left;">读取由特定连接的znode在内部执行，因此不需要与群集交互。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">复制数据库</td>
<td style="text-align: left;">它用于在zookeeper中存储数据。 每个znode都有自己的数据库，每个znode在一致性的帮助下每次都有相同的数据。</td>
</tr>
<tr class="even">
<td style="text-align: left;">Leader</td>
<td style="text-align: left;">Leader是负责处理写入请求的Znode。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Follower</td>
<td style="text-align: left;">关注者从客户端接收写请求并将它们转发到领导znode。</td>
</tr>
<tr class="even">
<td style="text-align: left;">请求处理器</td>
<td style="text-align: left;">只存在于领导节点。 它管理来自从节点的写请求。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">原子广播</td>
<td style="text-align: left;">负责将从领导节点到从节点的变化广播。</td>
</tr>
</tbody>
</table>
<h2 id="zookeeper-领导选举">Zookeeper 领导选举</h2>
<p>让我们分析如何在ZooKeeper集合中选择leader节点。考虑一个集群中有N个节点。leader 选举的过程如下:</p>
<p>所有节点创建具有相同路径/ app / leader_election / guid_的顺序，临时znode。</p>
<p>ZooKeeper集合将附加10位序列号到路径，创建的znode将是/ app / leader_election / guid_0000000001，/ app / leader_election / guid_0000000002等。</p>
<p>对于给定的实例，在znode中创建最小数量的节点成为leader ，而所有其他节点是followers。</p>
<p>每个从节点监视具有次最小编号的znode。例如，创建znode / app / leader_election / guid_0000000008的节点将观察znode / app / leader_election / guid_0000000007，创建znode / app / leader_election / guid_0000000007的节点将观察znode / app / leader_election / guid_0000000006。</p>
<p>如果领导断开，则其相应的znode / app / leader_electionN被删除。</p>
<p>下一个在线从节点将通过观察者获得关于leader移除的通知。</p>
<p>下一个在线跟随器节点将检查是否存在具有最小编号的其他znode。如果没有，那么它将承担领导者的角色。否则，它找到创建具有最小编号的znode的节点作为leader。</p>
<p>类似地，所有其他跟随节点选择创建具有最小编号的znode作为followers的节点。</p>
<p>领导选举是一个复杂的过程，但ZooKeeper服务使它非常简单。让我们在下一章中继续安装ZooKeeper以用于开发目的。</p>
<h2 id="zookeeper-cli">ZooKeeper CLI</h2>
<p>ZooKeeper命令行界面（CLI）用于与ZooKeeper集合进行交互以用于开发目的。它对于调试和使用不同的选项很有用。 要执行ZooKeeper CLI操作，首先打开你的ZooKeeper服务器（“bin / zkServer.sh start"），然后打开ZooKeeper客户端（“bin / zkCli.sh"）。一旦客户端启动，您可以执行以下操作: 1、创建znode 2、获取数据 3、观察znode的变化 4、设置数据 5、创建znode的子节点 6、列出znode的子节点 7、检查状态 8、删除/删除znode 现在让我们用一个例子逐个看看上面的命令。</p>
<h2 id="创建znodes">创建Znodes</h2>
<p>创建具有给定路径的znode。 flag参数指定创建的znode是短暂的，持久的还是顺序的。默认情况下，所有znode都是持久的。 当会话过期或客户端断开连接时，<strong>Ephemeral znodes</strong> (flag: e)将被自动删除。 <strong>Sequential znodes</strong>保证znode路径将是唯一的。 ZooKeeper集合将序列号和10位填充添加到znode路径。例如，znode路径 <em>/myapp</em> 将转换为/ myapp0000000001，下一个序列号将为/ myapp0000000002。如果没有指定标志，则znode被认为是持久的。</p>
<h3 id="语法"><strong>语法</strong></h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create /path /data</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create /FirstZnode “Myfirstzookeeper-app&quot;</span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] create /FirstZnode “Myfirstzookeeper-app&quot;</span><br><span class="line">Created /FirstZnode</span><br></pre></td></tr></table></figure>
<p>要创建<strong><em>*Sequential znode*</em></strong>，请添加<strong><em>*-s flag*</em></strong>，如下所示。</p>
<h3 id="语法-1">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create -s /path /data</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
<h3 id="示例-1">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create -s /FirstZnode second-data</span><br></pre></td></tr></table></figure>
<h3 id="输出-1">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] create -s /FirstZnode “second-data&quot;</span><br><span class="line">Created /FirstZnode0000000023</span><br></pre></td></tr></table></figure>
<p>要创建 <strong><em>*Ephemeral Znode*</em></strong>，请添加 <strong><em>*-e flag*</em></strong> ，如下所示。</p>
<h3 id="语法-2">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create -e /path /data</span><br></pre></td></tr></table></figure>
<h3 id="section-1"></h3>
<h3 id="示例-2">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create -e /SecondZnode “Ephemeral-data&quot;</span><br></pre></td></tr></table></figure>
<h3 id="输出-2">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /SecondZnode “Ephemeral-data&quot;</span><br><span class="line">Created /SecondZnode</span><br></pre></td></tr></table></figure>
<p>记住当客户端连接丢失时，临时znode将被删除。 您可以通过退出ZooKeeper CLI，然后重新打开CLI来尝试。</p>
<h2 id="获取数据">获取数据</h2>
<p>它返回znode的相关数据和指定znode的元数据。 您将获得信息，例如数据上次修改的时间，修改的位置以及数据的相关信息。 此CLI还用于分配手表以显示有关数据的通知。</p>
<h3 id="语法-3">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get /path </span><br></pre></td></tr></table></figure>
<h3 id="section-2"></h3>
<h3 id="示例-3">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get /FirstZnode</span><br></pre></td></tr></table></figure>
<h3 id="输出-3">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode</span><br><span class="line">“Myfirstzookeeper-app&quot;</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 22</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<p>要访问顺序znode，必须输入znode的完整路径。</p>
<h3 id="section-3"></h3>
<h3 id="示例-4">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get /FirstZnode0000000023</span><br></pre></td></tr></table></figure>
<h3 id="输出-4">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode0000000023</span><br><span class="line">“Second-data&quot;</span><br><span class="line">cZxid = 0x80</span><br><span class="line">ctime = Tue Sep 29 16:25:47 IST 2015</span><br><span class="line">mZxid = 0x80</span><br><span class="line">mtime = Tue Sep 29 16:25:47 IST 2015</span><br><span class="line">pZxid = 0x80</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 13</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<h2 id="观看">观看</h2>
<p>当指定的znode或znode的子数据更改时，手表会显示通知。 您只能在 <strong>get</strong> 命令中设置<strong>观看</strong>。</p>
<h3 id="句法">句法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get /path [watch] 1</span><br></pre></td></tr></table></figure>
<h3 id="section-4"></h3>
<h3 id="示例-5">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get /FirstZnode 1</span><br></pre></td></tr></table></figure>
<h3 id="输出-5">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode 1</span><br><span class="line">“Myfirstzookeeper-app&quot;</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 22</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<p>输出类似于正常的 <strong>get</strong> 命令，但它将在后台等待znode更改。 <从这里开始></p>
<h2 id="设置数据">设置数据</h2>
<p>设置指定znode的数据。 完成此设置操作后，您可以使用 <strong>get</strong> CLI命令检查数据。</p>
<h3 id="语法-4">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set /path /data</span><br></pre></td></tr></table></figure>
<h3 id="section-5"></h3>
<h3 id="示例-6">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set /SecondZnode Data-updated</span><br></pre></td></tr></table></figure>
<h3 id="输出-6">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /SecondZnode “Data-updated&quot;</span><br><span class="line">cZxid = 0x82</span><br><span class="line">ctime = Tue Sep 29 16:29:50 IST 2015</span><br><span class="line">mZxid = 0x83</span><br><span class="line">mtime = Tue Sep 29 16:29:50 IST 2015</span><br><span class="line">pZxid = 0x82</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x15018b47db00000</span><br><span class="line">dataLength = 14</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<p>如果您在 <strong>get</strong> 命令中指定了<strong>观察</strong>选项(如上一个命令中所示)，则输出将类似如下所示 -</p>
<h3 id="输出-7">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode “Mysecondzookeeper-app&quot;</span><br><span class="line"></span><br><span class="line">WATCHER: :</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/FirstZnode</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x84</span><br><span class="line">mtime = Tue Sep 29 17:14:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 23</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<h2 id="创建子项子节点">创建子项/子节点</h2>
<p>创建子节点类似于创建新的znode。 唯一的区别是子节点znode的路径也将具有父路径。</p>
<h3 id="语法-5">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create /parent/path/subnode/path /data</span><br></pre></td></tr></table></figure>
<h3 id="section-6"></h3>
<h3 id="示例-7">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create /FirstZnode/Child1 firstchildren</span><br></pre></td></tr></table></figure>
<h3 id="输出-8">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 16] create /FirstZnode/Child1 “firstchildren&quot;</span><br><span class="line">created /FirstZnode/Child1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] create /FirstZnode/Child2 “secondchildren&quot;</span><br><span class="line">created /FirstZnode/Child2</span><br></pre></td></tr></table></figure>
<h2 id="section-7"></h2>
<h2 id="children-列表">Children 列表</h2>
<p>此命令用于列出和显示znode的 <strong>children。</strong></p>
<h3 id="语法-6">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /path</span><br></pre></td></tr></table></figure>
<h3 id="section-8"></h3>
<h3 id="示例-8">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /MyFirstZnode</span><br></pre></td></tr></table></figure>
<h3 id="输出-9">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /MyFirstZnode</span><br><span class="line">[mysecondsubnode, myfirstsubnode]</span><br></pre></td></tr></table></figure>
<h2 id="检查状态">检查状态</h2>
<p><strong>状态</strong>描述指定znode的元数据。 它包含详细信息，如时间戳，版本号，ACL，数据长度和子节点znode。</p>
<h3 id="语法-7">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat /path</span><br></pre></td></tr></table></figure>
<h3 id="section-9"></h3>
<h3 id="示例-9">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat /FirstZnode</span><br></pre></td></tr></table></figure>
<h3 id="输出-10">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] stat /FirstZnode</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 17:14:24 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 23</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>
<h2 id="删除znode">删除Znode</h2>
<p>删除指定的znode并递归地删除其所有子节点。 这将发生只有这样的znode可用。</p>
<h3 id="语法-8">语法</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deleteall /path</span><br></pre></td></tr></table></figure>
<h3 id="section-10"></h3>
<h3 id="示例-10">示例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deleteall /FirstZnode</span><br></pre></td></tr></table></figure>
<h3 id="输出-11">输出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] rmr /FirstZnode</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] get /FirstZnode</span><br><span class="line">Node does not exist: /FirstZnode</span><br></pre></td></tr></table></figure>
<p>删除<strong>(delete / path)</strong>命令类似于 <strong>remove</strong> 命令，除了它只适用于没有子节点的znode。</p>
<h2 id="zookeeper-api">ZooKeeper API</h2>
<h3 id="zookeeper-api的基础知识">ZooKeeper API的基础知识</h3>
<p>与ZooKeeper集合的应用程序交互称为 <strong>ZooKeeper客户端</strong>或简称<strong>客户端</strong>。</p>
<p>Znode是ZooKeeper集合的核心组件，ZooKeeper API提供了一组小集合来使用ZooKeeper集合来操纵znode的所有细节。</p>
<p>客户端应该遵循以下给出的步骤来与ZooKeeper集合进行清晰和干净的交互。</p>
<ul>
<li>连接到ZooKeeper集合。 ZooKeeper集合为客户端分配会话ID。</li>
<li>定期向服务器发送心跳。 否则，ZooKeeper集合将过期会话ID，客户端需要重新连接。</li>
<li>只要会话ID处于活动状态，就可以获取/设置znode。</li>
<li>所有任务完成后，断开与ZooKeeper集成的连接。 如果客户端长时间不活动，则ZooKeeper集合将自动断开客户端。</li>
</ul>
<h3 id="java绑定">Java绑定</h3>
<p>让我们来了解本章中最重要的一组ZooKeeper API。 ZooKeeper API的中心部分是 <strong>ZooKeeper类</strong>。 它提供了在其构造函数中连接ZooKeeper集合的选项，并具有以下方法 -</p>
<ul>
<li><strong>connect</strong> - 连接到ZooKeeper集合</li>
<li><strong>create</strong>- 创建znode</li>
<li><strong>exists</strong>- 检查znode是否存在及其信息</li>
<li><strong>getData</strong> - 从特定znode获取数据</li>
<li><strong>setData</strong> - 在特定znode中设置数据</li>
<li><strong>getChildren</strong> - 获取特定znode中的所有子节点</li>
<li><strong>delete</strong> - 获取特定的znode及其所有子项</li>
<li><strong>close</strong> - 关闭连接</li>
</ul>
<h3 id="连接到zookeeper集合">连接到ZooKeeper集合</h3>
<p>ZooKeeper类通过其构造函数提供连接功能。 构造函数的签名如下 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZooKeeper(String connectionString, <span class="keyword">int</span> sessionTimeout, Watcher watcher)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>connectionString</strong> - ZooKeeper集成主机。</li>
<li><strong>sessionTimeout</strong> - 会话超时(以毫秒为单位)。</li>
<li><strong>watcher</strong> - 实现“观察者"界面的对象。 ZooKeeper集合通过观察者对象返回连接状态。</li>
</ul>
<p>让我们创建一个新的帮助类 <strong>ZooKeeperConnection</strong> ，并添加一个方法 <strong>connect</strong> 。 <strong>connect</strong> 方法创建一个ZooKeeper对象，连接到ZooKeeper集合，然后返回对象。</p>
<p>这里 <strong>CountDownLatch</strong> 用于停止(等待)主进程，直到客户端与ZooKeeper集合连接。...</p>
<p>这里是与ZooKeeper集合连接的完整代码。</p>
<h4 id="代码zookeeperconnection.java">代码:ZooKeeperConnection.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import java classes</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import zookeeper classes</span></span><br><span class="line"><span class="keyword">import</span> org.Apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback.StatCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException.Code;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// declare zookeeper instance to Access ZooKeeper ensemble</span></span><br><span class="line">   <span class="keyword">private</span> ZooKeeper zoo;</span><br><span class="line">   <span class="keyword">final</span> CountDownLatch connectedSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to connect zookeeper ensemble.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ZooKeeper <span class="title">connect</span><span class="params">(String host)</span> <span class="keyword">throws</span> IOException,InterruptedException </span>&#123;</span><br><span class="line">	</span><br><span class="line">      zoo = <span class="keyword">new</span> ZooKeeper(host,<span class="number">5000</span>,<span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">		</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent we)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (we.getState() == KeeperState.SyncConnected) &#123;</span><br><span class="line">               connectedSignal.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">		</span><br><span class="line">      connectedSignal.await();</span><br><span class="line">      <span class="keyword">return</span> zoo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to disconnect from zookeeper server</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      zoo.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存上面的代码，它将在下一节中用于连接ZooKeeper集合。</p>
<h3 id="创建znode">创建Znode</h3>
<p>ZooKeeper类提供<strong>创建方法</strong>在ZooKeeper集合中创建一个新的znode。 <strong>create</strong> 方法的签名如下 -</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create(String path, <span class="keyword">byte</span>[] data, List&lt;ACL&gt; acl, CreateMode createMode)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>路径</strong> - Znode路径。 例如，/ myapp1，/ myapp2，/ myapp1 / mydata1，myapp2 / mydata1 / myanothersubdata</li>
<li><strong>data</strong> - 要存储在指定znode路径中的数据</li>
<li><strong>acl</strong> - 要创建的节点的访问控制列表。 ZooKeeper API提供了一个静态接口 <strong>ZooDefs.Ids</strong> 来获取一些基本的acl列表。 例如，ZooDefs.Ids.OPEN_ACL_UNSAFE返回打开znode的acl列表。</li>
<li><strong>createMode</strong> - 节点的类型，短暂，顺序或两者。 这是一个<strong>枚举</strong>。</li>
</ul>
<p>让我们创建一个新的Java应用程序来检查ZooKeeper API的 <strong>create</strong> 功能。 创建文件 <strong>ZKCreate.java</strong> 。 在main方法中，创建一个类型为 <strong>ZooKeeperConnection</strong> 的对象，并调用 <strong>connect</strong> 方法连接到ZooKeeper集合。</p>
<p>connect方法将返回ZooKeeper对象 <strong>zk</strong> 。 现在，请使用自定义<strong>路径</strong>和<strong>数据</strong>调用 <strong>zk</strong> 对象的 <strong>create</strong> 方法。</p>
<p>创建znode的完整程序代码如下 -</p>
<h4 id="代码zkcreate.java">代码:ZKCreate.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCreate</span> </span>&#123;</span><br><span class="line">   <span class="comment">// create static instance for zookeeper class.</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// create static instance for ZooKeeperConnection class.</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to create znode in zookeeper ensemble</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String path, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">      KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      zk.create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">      CreateMode.PERSISTENT);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// znode path</span></span><br><span class="line">      String path = <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign path to znode</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// data in byte array</span></span><br><span class="line">      <span class="keyword">byte</span>[] data = <span class="string">&quot;My first zookeeper app&quot;</span>.getBytes(); <span class="comment">// Declare data</span></span><br><span class="line">		</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         create(path, data); <span class="comment">// Create the data to the specified path</span></span><br><span class="line">         conn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">//Catch error message</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦编译和执行应用程序，将在ZooKeeper集合中创建具有指定数据的znode。 您可以使用ZooKeeper CLI <strong>zkCli.sh</strong> 进行检查。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; get /MyFirstZnode</span></span><br></pre></td></tr></table></figure>
<h3 id="存在---检查znode的存在">存在 - 检查Znode的存在</h3>
<p>ZooKeeper类提供了 <strong>exists方法</strong>来检查znode的存在。 如果指定的znode存在，则返回znode的元数据。 <strong>存在</strong>方法的签名如下 -</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exists(String path, <span class="keyword">boolean</span> watcher)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>path</strong>- Znode路径</li>
<li><strong>watcher</strong> - 布尔值，用于指定是否观看指定的znode</li>
</ul>
<p>让我们创建一个新的Java应用程序来检查ZooKeeper API的“exists"功能。 创建文件<em>“ZKExists.java"</em>。 在main方法中，使用<em>“ZooKeeperConnection"</em>对象创建ZooKeeper对象<em>“zk"</em> 然后，使用自定义<em>“path"</em>调用<em>“zk"</em>对象的<em>“exists"</em> 完整的列表如下 -</p>
<h4 id="代码zkexists.java">代码:ZKExists.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKExists</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">      KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException </span>&#123;</span><br><span class="line">      String path = <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign znode to the specified path</span></span><br><span class="line">			</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         Stat stat = znode_exists(path); <span class="comment">// Stat checks the path of the znode</span></span><br><span class="line">				</span><br><span class="line">         <span class="keyword">if</span>(stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node exists and the node version is &quot;</span> +</span><br><span class="line">            stat.getVersion());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">				</span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">// Catches error messages</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦编译和执行应用程序，您将获得以下输出。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Node exists and the node version is 1.</span><br></pre></td></tr></table></figure>
<h3 id="getdata方法">getData方法</h3>
<p>ZooKeeper类提供 <strong>getData</strong> 方法来获取指定znode中附加的数据及其状态。 <strong>getData</strong> 方法的签名如下 -</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getData(String path, Watcher watcher, Stat stat)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>path</strong> - Znode路径。</li>
<li><strong>watcher</strong> - 类型<strong>观察者</strong>的回调函数。 当指定的znode的数据改变时，ZooKeeper集合将通过Watcher回调通知。 这是一次性通知。</li>
<li><strong>stat</strong> - 返回znode的元数据。</li>
</ul>
<p>让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>getData</strong> 功能。 创建文件 <strong>ZKGetData.java</strong> 。 在main方法中，使用他 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。 然后，使用自定义路径调用zk对象的 <strong>getData</strong> 方法。</p>
<p>下面是从指定节点获取数据的完整程序代码 -</p>
<h4 id="代码zkgetdata.java">代码:ZKGetData.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKGetData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">      KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path,<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, KeeperException </span>&#123;</span><br><span class="line">      String path = <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line">      <span class="keyword">final</span> CountDownLatch connectedSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         Stat stat = znode_exists(path);</span><br><span class="line">			</span><br><span class="line">         <span class="keyword">if</span>(stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] b = zk.getData(path, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">				</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent we)</span> </span>&#123;</span><br><span class="line">					</span><br><span class="line">                  <span class="keyword">if</span> (we.getType() == Event.EventType.None) &#123;</span><br><span class="line">                     <span class="keyword">switch</span>(we.getState()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> Expired:</span><br><span class="line">                        connectedSignal.countDown();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">							</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     String path = <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line">							</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] bn = zk.getData(path,</span><br><span class="line">                        <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                        String data = <span class="keyword">new</span> String(bn,</span><br><span class="line">                        <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                        System.out.println(data);</span><br><span class="line">                        connectedSignal.countDown();</span><br><span class="line">							</span><br><span class="line">                     &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">                        System.out.println(ex.getMessage());</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;, <span class="keyword">null</span>);</span><br><span class="line">				</span><br><span class="line">            String data = <span class="keyword">new</span> String(b, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(data);</span><br><span class="line">            connectedSignal.await();</span><br><span class="line">				</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦编译和执行应用程序，您将获得以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">My first zookeeper app</span><br></pre></td></tr></table></figure>
<p>应用程序将等待ZooKeeper集合的进一步通知。 使用ZooKeeper CLI <strong>zkCli.sh</strong> 更改指定znode的数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">set</span> /MyFirstZnode Hello</span></span><br></pre></td></tr></table></figure>
<p>现在，应用程序将打印以下输出并退出。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure>
<h3 id="setdata方法">setData方法</h3>
<p>ZooKeeper类提供 <strong>setData</strong> 方法来修改指定znode中附加的数据。 <strong>setData</strong> 方法的签名如下 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setData(String path, byte[] data, int version)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>path</strong>- Znode路径</li>
<li><strong>data</strong> - 要存储在指定znode路径中的数据。</li>
<li><strong>version</strong>- znode的当前版本。 每当数据更改时，ZooKeeper会更新znode的版本号。</li>
</ul>
<p>现在让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>setData</strong> 功能。 创建文件 <strong>ZKSetData.java</strong> 。 在main方法中，使用 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。 然后，使用指定的路径，新数据和节点版本调用 <strong>zk</strong> 对象的 <strong>setData</strong> 方法。</p>
<p>这里是完整的程序代码来修改附加在指定znode中的数据。</p>
<h4 id="代码zksetdata.java">代码:ZKSetData.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKSetData</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to update the data in a znode. Similar to getData but without watcher.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String path, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">      KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      zk.setData(path, data, zk.exists(path,<span class="keyword">true</span>).getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException </span>&#123;</span><br><span class="line">      String path= <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] data = <span class="string">&quot;Success&quot;</span>.getBytes(); <span class="comment">//Assign data which is to be updated.</span></span><br><span class="line">		</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         update(path, data); <span class="comment">// Update znode data to the specified path</span></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦应用程序被编译和执行，指定的znode的数据将被改变，并且可以使用ZooKeeper CLI， <strong>zkCli.sh</strong> 进行检查。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; get /MyFirstZnode</span></span><br></pre></td></tr></table></figure>
<h3 id="getchildren方法">getChildren方法</h3>
<p>ZooKeeper类提供 <strong>getChildren</strong> 方法来获取特定znode的所有子节点。 <strong>getChildren</strong> 方法的签名如下 -</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getChildren(String path, Watcher watcher)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>path</strong> - Znode路径。</li>
<li><strong>watcher</strong> - 类型为“Watcher"的回调函数。 当指定的znode被删除或znode下的子节点被创建/删除时，ZooKeeper集合将通知。 这是一次性通知。</li>
</ul>
<h4 id="代码zkgetchildren.java">代码:ZKGetChildren.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKGetChildren</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">      KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path,<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException </span>&#123;</span><br><span class="line">      String path = <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign path to the znode</span></span><br><span class="line">		</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         Stat stat = znode_exists(path); <span class="comment">// Stat checks the path</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(stat!= <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//“getChildren&quot; method- get all the children of znode.It has two</span></span><br><span class="line">            args, path and watch</span><br><span class="line">            List &lt;String&gt; children = zk.getChildren(path, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size(); i++)</span><br><span class="line">            System.out.println(children.get(i)); <span class="comment">//Print children&#x27;s</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在运行程序之前，让我们使用ZooKeeper CLI <strong>zkCli.sh</strong> 为 <strong>/ MyFirstZnode</strong> 创建两个子节点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; create /MyFirstZnode/myfirstsubnode Hi</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; create /MyFirstZnode/mysecondsubmode Hi</span></span><br></pre></td></tr></table></figure>
<p>现在，编译和运行程序将输出上面创建的znode。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">myfirstsubnode</span><br><span class="line">mysecondsubnode</span><br></pre></td></tr></table></figure>
<h3 id="删除znode-1">删除Znode</h3>
<p>ZooKeeper类提供了 <strong>delete</strong> 方法来删除指定的znode。 <strong>删除</strong>方法的签名如下 -</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete(String path, int version)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>path</strong> - Znode路径。</li>
<li><strong>version</strong> - znode的当前版本。</li>
</ul>
<p>让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>delete</strong> 功能。 创建文件 <strong>ZKDelete.java</strong> 。 在main方法中，使用 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。 然后，使用指定的<strong>路径</strong>和版本号调用 <strong>zk</strong> 对象的 <strong>delete</strong></p>
<p>删除znode的完整程序代码如下</p>
<h4 id="代码zkdelete.java">代码:ZKDelete.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKDelete</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String path)</span> <span class="keyword">throws</span> KeeperException,InterruptedException </span>&#123;</span><br><span class="line">      zk.delete(path,zk.exists(path,<span class="keyword">true</span>).getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException </span>&#123;</span><br><span class="line">      String path = <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">//Assign path to the znode</span></span><br><span class="line">		</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> ZooKeeperConnection();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         delete(path); <span class="comment">//delete the node with the specified path</span></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">// catches error messages</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/11/07/Vue/</url>
    <content><![CDATA[<p>Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong></p>
<span id="more"></span>
<h2 id="介绍">介绍</h2>
<h3 id="声明式渲染">声明式渲染</h3>
<p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Hello Vue!</p>
<p>除了绑定插入的文本内容，我们还可以采用这样的方式绑定 DOM 元素属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    Hover your mouse over me for a few seconds to see my dynamically bound title!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;You loaded this page on &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Hover your mouse over me for a few seconds to see my dynamically bound title!</p>
<p>这里我们遇到点新东西。你看到的 <code>v-bind</code> 属性被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue.js 提供的特殊属性。可能你已经猜到了，它们会在渲染过的 DOM 上应用特殊的响应式行为。这个指令的简单含义是说：将这个元素节点的 <code>title</code> 属性和 Vue 实例的 <code>message</code> 属性绑定到一起</p>
<h3 id="条件与循环">条件与循环</h3>
<p>控制切换一个元素的显示也相当简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">seen</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Now you see me</p>
<p>继续在控制台设置 <code>app3.seen = false</code>，你会发现 “Now you see me” 消失了。</p>
<p>这个例子演示了我们不仅可以绑定 DOM 文本到数据，也可以绑定 DOM <strong>结构</strong>到数据。而且，Vue.js 也提供一个强大的过渡效果系统，可以在 Vue 插入/删除元素时自动应用<a href="http://caibaojian.com/vue/guide/transitions.html">过渡效果</a>。</p>
<p>也有一些其它指令，每个都有特殊的功能。例如， <code>v-for</code> 指令可以绑定数据到数组来渲染一个列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>Learn JavaScript</li>
<li>Learn Vue</li>
<li>Build something awesome</li>
</ol>
<p>在控制台里，输入 <code>app4.todos.push(&#123; text: 'New item' &#125;)</code>。你会发现列表中多了一栏新内容。</p>
<h3 id="处理用户输入">处理用户输入</h3>
<p>为了让用户和你的应用进行互动，我们可以用 <code>v-on</code> 指令绑定一个监听事件用于调用我们 Vue 实例中定义的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-5&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">reverseMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 <code>reverseMessage</code> 方法中，我们在没有接触 DOM 的情况下更新了应用的状态 - 所有的 DOM 操作都由 Vue 来处理，你写的代码只需要关注基本逻辑。</p>
<p>Vue 也提供了 <code>v-model</code> 指令，它使得在表单输入和应用状态中做双向数据绑定变得非常轻巧。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Hello Vue!</p>
<h3 id="用组件构建应用">用组件构建（应用）</h3>
<p>组件系统是 Vue.js 另一个重要概念，因为它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111072106342.png" /></p>
<p>在 Vue 里，一个组件实质上是一个拥有预定义选项的一个 Vue 实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define a new component called todo-item</span></span><br><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;This is a todo&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在你可以另一个组件模板中写入它：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Create an instance of the todo-item component --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是这样会为每个 todo 渲染同样的文本，这看起来并不是很酷。我们应该将数据从父作用域传到子组件。让我们来修改一下组件的定义，使得它能够接受一个 <a href="http://caibaojian.com/vue/guide/components.html#Props"><code>prop</code></a> 字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// The todo-item component now accepts a</span></span><br><span class="line">  <span class="comment">// &quot;prop&quot;, which is like a custom attribute.</span></span><br><span class="line">  <span class="comment">// This prop is called todo.</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在，我们可以使用 <code>v-bind</code> 指令将 todo 传到每一个重复的组件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-7&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Now we provide each todo-item with the todo object    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- it&#x27;s representing, so that its content can be dynamic --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">groceryList</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Vegetables&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Cheese&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Whatever else humans are supposed to eat&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>Vegetables</li>
<li>Cheese</li>
<li>Whatever else humans are supposed to eat</li>
</ol>
<p>这只是一个假设的例子，但是我们已经将应用分割成了两个更小的单元，子元素通过 <code>props</code> 接口实现了与父亲元素很好的解耦。我们现在可以在不影响到父应用的基础上，进一步为我们的 <code>todo</code> 组件改进更多复杂的模板和逻辑。</p>
<p>在一个大型应用中，为了使得开发过程可控，有必要将应用整体分割成一个个的组件。在<a href="http://caibaojian.com/vue/guide/components.html">后面的教程</a>中我们将详述组件，不过这里有一个（假想）的例子，看看使用了组件的应用模板是什么样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-content</span>&gt;</span><span class="tag">&lt;/<span class="name">app-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">app-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="与自定义元素的关系">与自定义元素的关系</h3>
<p>你可能已经注意到 Vue.js 组件非常类似于<strong>自定义元素</strong>——它是 <a href="http://caibaojian.com/www.w3.org/wiki/WebComponents">Web 组件规范</a>的一部分。实际上 Vue.js 的组件语法参考了该规范。例如 Vue 组件实现了 <a href="http://caibaojian.com/github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Slot API</a> 与 <code>is</code> 特性。但是，有几个关键的不同：</p>
<ol type="1">
<li>Web 组件规范仍然远未完成，并且没有浏览器实现。相比之下，Vue.js 组件不需要任何补丁，并且在所有支持的浏览器（IE9 及更高版本）之下表现一致。必要时，Vue.js 组件也可以放在原生自定义元素之内。</li>
<li>Vue.js 组件提供了原生自定义元素所不具备的一些重要功能，比如组件间的数据流，自定义事件系统，以及动态的、带特效的组件替换。</li>
</ol>
<h2 id="安装">安装</h2>
<h3 id="独立构建-vs-运行时构建">独立构建 vs 运行时构建</h3>
<p>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含<strong>模板编译器</strong>而后者不包含。</p>
<p>模板编译用于编译 Vue 模板字符串成纯 JavaScript 渲染函数。如果你想用 <code>template</code> 选项， 你需要编译。</p>
<p>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 <code>template</code> 选项，你就需要编译器。</p>
<ul>
<li>独立构建包含模板编译器并支持 <code>template</code> 选项。 <strong>它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。</strong></li>
<li>运行时构建不包含模板编译器，因此不支持 <code>template</code> 选项，只能用 <code>render</code> 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 <code>render</code> 函数。运行时构建比独立构建要轻量30%，只有 Kb min+gzip大小。</li>
</ul>
<p>默认 NPM 包导出的是 <strong>运行时</strong> 构建。为了使用独立构建，在 webpack 配置中添加下面的别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于Browserify，可以添加一个别名到 package.json 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;browser&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;vue/dist/vue.common&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="vue实例">Vue实例</h2>
<h3 id="构造器">构造器</h3>
<p>每个 Vue.js 应用都是通过构造函数 <code>Vue</code> 创建一个 <strong>Vue 的根实例</strong> 启动的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>虽然没有完全遵循 <a href="https://en.wikipedia.org/wiki/Model_View_ViewModel">MVVM 模式</a>， Vue 的设计无疑受到了它的启发。因此在文档中经常会使用 <code>vm</code> 这个变量名表示 Vue 实例。</p>
<p>在实例化 Vue 时，需要传入一个<strong>选项对象</strong>，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 <a href="http://caibaojian.com/vue/api">API 文档</a>中查看。</p>
<p>可以扩展 <code>Vue</code> 构造器，从而用预定义选项创建可复用的<strong>组件构造器</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</span><br><span class="line">  <span class="comment">// 扩展选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建</span></span><br><span class="line"><span class="keyword">var</span> myComponentInstance = <span class="keyword">new</span> MyComponent()</span><br></pre></td></tr></table></figure>
<p>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面详细说明<a href="http://caibaojian.com/vue/guide/components.html">组件系统</a>。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。</p>
<h3 id="属性与方法">属性与方法</h3>
<p>每个 Vue 实例都会<strong>代理</strong>其 <code>data</code> 对象里所有的属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.a === data.a <span class="comment">// -&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// -&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>注意只有这些被代理的属性是<strong>响应的</strong>。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。</p>
<p>除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的 data 属性区分。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data <span class="comment">// -&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>) <span class="comment">// -&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个回调将在 `vm.a`  改变后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意，不要在实例属性或者回调函数中（如 <code>vm.$watch('a', newVal =&gt; this.myMethod())</code>）使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>。因为箭头函数绑定父上下文，所以 <code>this</code> 不会像预想的一样是 Vue 实例，而是 <code>this.myMethod</code> 未被定义。</p>
<p>实例属性和方法的完整列表中查阅 <a href="http://caibaojian.com/vue/api">API 参考</a>。</p>
<h3 id="实例生命周期">实例生命周期</h3>
<p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 <strong>生命周期钩子</strong> ，这就给我们提供了执行自定义逻辑的机会。例如，<code>created</code> 这个钩子在实例被创建之后被调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is: &#x27;</span> + <span class="built_in">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -&gt; &quot;a is: 1&quot;</span></span><br></pre></td></tr></table></figure>
<p>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 <code>mounted</code>、 <code>updated</code> 、<code>destroyed</code> 。钩子的 <code>this</code> 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。</p>
<h3 id="生命周期图示">生命周期图示</h3>
<p>下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111072126937.png" /></p>
<h2 id="模板语法">模板语法</h2>
<p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>
<p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="http://caibaojian.com/vue/guide/render-function.html">直接写渲染（render）函数</a>，使用可选的 JSX 语法。</p>
<h3 id="插值">插值</h3>
<h4 id="文本">文本</h4>
<p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code> 属性发生了改变，插值处的内容都会更新。</p>
<p>通过使用 <a href="http://caibaojian.com/vue/api#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="纯-html">纯 HTML</h4>
<p>双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 <code>v-html</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 <code>v-html</code> 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。</p>
<p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。请只对可信内容使用 HTML 插值，<strong>绝不要</strong>对用户提供的内容插值。</p>
<h4 id="属性">属性</h4>
<p>Mustache 不能在 HTML 属性中使用，应使用 <a href="http://caibaojian.com/vue/api#v-bind">v-bind 指令</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;someDynamicCondition&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用-javascript-表达式">使用 JavaScript 表达式</h4>
<p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p>
<h3 id="指令">指令</h3>
<p>指令（Directives）是带有 <code>v-</code> 前缀的特殊属性。指令属性的值预期是<strong>单一 JavaScript 表达式</strong>（除了 <code>v-for</code>，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里， <code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来移除/插入 <code>&lt;p&gt;</code> 元素。</p>
<h4 id="参数">参数</h4>
<p>一些指令能接受一个“参数”，在指令后以冒号指明。例如， <code>v-bind</code> 指令被用来响应地更新 HTML 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> 属性与表达式 <code>url</code> 的值绑定。</p>
<p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p>
<h4 id="修饰符">修饰符</h4>
<p>修饰符（Modifiers）是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后当我们更深入地了解 <code>v-on</code> 与 <code>v-model</code>时，会看到更多修饰符的使用。</p>
<h3 id="过滤器">过滤器</h3>
<p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在 <strong>mustache 插值</strong>的尾部，由“管道符”指示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- in mustaches --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- in v-bind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue 2.x 中，过滤器只能在 mustache 绑定和 <code>v-bind</code> 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用<a href="computed.html">计算属性</a>。</p>
<p>过滤器函数总接受表达式的值作为第一个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">capitalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      value = value.toString()</span><br><span class="line">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>过滤器可以串联：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>过滤器是 JavaScript 函数，因此可以接受参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这里，字符串 <code>'arg1'</code> 将传给过滤器作为第二个参数， <code>arg2</code> 表达式的值将被求值然后传给过滤器作为第三个参数。</p>
<h3 id="缩写">缩写</h3>
<p><code>v-</code> 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 <a href="https://en.wikipedia.org/wiki/Single-page_application">SPA</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：</p>
<h4 id="v-bind-缩写"><code>v-bind</code> 缩写</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-on-缩写"><code>v-on</code> 缩写</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>
<h2 id="计算属性">计算属性</h2>
<p>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，模板不再简单和清晰。在实现反向显示 <code>message</code> 之前，你应该确认它。这个问题在你不止一次反向显示 message 的时候变得更加糟糕。</p>
<p>这就是为什么任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
<h3 id="基础例子">基础例子</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;Hello&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // a computed getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` points to the vm instance</span><br><span class="line">      return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>Original message: "Hello"</p>
<p>Computed reversed message: "olleH"</p>
<p>这里我们声明了一个计算属性 <code>reversedMessage</code> 。我们提供的函数将用作属性 <code>vm.reversedMessage</code> 的 getter 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// -&gt; &#x27;olleH&#x27;</span></span><br><span class="line">vm.message = <span class="string">&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// -&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>
<p>你可以打开浏览器的控制台，修改 vm 。 <code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>
<p>你可以像绑定普通属性一样在模板中绑定计算属性。 Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code> ，因此当 <code>vm.message</code> 发生改变时，依赖于 <code>vm.reversedMessage</code> 的绑定也会更新。而且最妙的是我们是声明式地创建这种依赖关系：计算属性的 getter 是干净无副作用的，因此也是易于测试和理解的。</p>
<h3 id="计算缓存-vs-methods">计算缓存 vs Methods</h3>
<p>你可能已经注意到我们可以通过调用表达式中的method来达到同样的效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reverseMessage() &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// in component</span><br><span class="line">methods: &#123;</span><br><span class="line">  reverseMessage: function () &#123;</span><br><span class="line">    return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不经过计算属性，我们可以在 method 中定义一个相同的函数来替代它。对于最终的结果，两种方式确实是相同的。然而，不同的是<strong>计算属性是基于它的依赖缓存</strong>。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 <code>message</code> 没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>这也同样意味着如下计算属性将不会更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="attr">now</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比而言，每当重新渲染的时候，method 调用<strong>总会</strong>执行函数。</p>
<p>我们为什么需要缓存？假设我们有一个重要的计算属性 <strong>A</strong> ，这个计算属性需要一个巨大的数组遍历和做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong> 。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter ！如果你不希望有缓存，请用 method 替代。</p>
<h3 id="计算属性-vs-watched-property">计算属性 vs Watched Property</h3>
<p>Vue.js 提供了一个方法 <code>$watch</code> ，它用于观察 Vue 实例上的数据变动。当一些数据需要根据其它数据变化时， <code>$watch</code> 很诱人 —— 特别是如果你来自 AngularJS 。不过，通常更好的办法是使用计算属性而不是一个命令式的 <code>$watch</code> 回调。思考下面例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#demo&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Foo&#x27;,</span><br><span class="line">    lastName: &#x27;Bar&#x27;,</span><br><span class="line">    fullName: &#x27;Foo Bar&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &#x27; &#x27; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面代码是命令式的和重复的。跟计算属性对比：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样更好，不是吗？</p>
<h3 id="计算-setter">计算 setter</h3>
<p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>现在在运行 <code>vm.fullName = 'John Doe'</code> 时， setter 会被调用， <code>vm.firstName</code> 和 <code>vm.lastName</code> 也会被对应更新。</p>
<h3 id="观察-watchers">观察 Watchers</h3>
<p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的 watcher 。这是为什么 Vue 提供一个更通用的方法通过 <code>watch</code> 选项，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或昂贵操作时，这是很有用的。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Since there is already a rich ecosystem of ajax libraries    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- and collections of general-purpose utility methods, Vue core --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- is able to remain small by not reinventing them. This also   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- gives you the freedom to just use what you&#x27;re familiar with. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#watch-example&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">question</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">answer</span>: <span class="string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果 question 发生改变，这个函数就会运行</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">question</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.answer = <span class="string">&#x27;Waiting for you to stop typing...&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getAnswer()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// _.debounce 是一个通过 lodash 限制操作频率的函数。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在这个例子中，我们希望限制访问yesno.wtf/api的频率</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ajax请求直到用户输入完毕才会发出</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 学习更多关于 _.debounce function (and its cousin</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// _.throttle), 参考: https://lodash.com/docs#debounce</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">getAnswer</span>: _.debounce(</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.question.indexOf(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">          vm.answer = <span class="string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        vm.answer = <span class="string">&#x27;Thinking...&#x27;</span></span></span><br><span class="line"><span class="javascript">        axios.get(<span class="string">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            vm.answer = _.capitalize(response.data.answer)</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">          .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            vm.answer = <span class="string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这是我们为用户停止输入等待的毫秒数</span></span></span><br><span class="line"><span class="javascript">      <span class="number">500</span></span></span><br><span class="line"><span class="javascript">    )</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>Ask a yes/no question:</p>
<p>I cannot give you an answer until you ask a question!</p>
<p>在这个示例中，使用 <code>watch</code> 选项允许我们执行异步操作（访问一个 API），限制我们执行该操作的频率，并直到我们得到最终结果时，才设置中间状态。这是计算属性无法做到的。</p>
<p>除了 <code>watch</code> 选项之外，您还可以使用 <a href="http://caibaojian.com/vue/api#vm-watch">vm.$watch API</a> 命令。</p>
<p>数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用<code>v-bind</code> 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>
<h2 id="class与style绑定">Class与Style绑定</h2>
<h3 id="绑定-html-class">绑定 HTML Class</h3>
<h4 id="对象语法">对象语法</h4>
<p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的语法表示 class<code>active</code> 的更新将取决于数据属性 <code>isActive</code> 是否为<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">真值</a> 。</p>
<p>我们也可以在对象中传入更多属性用来动态切换多个 class 。此外， <code>v-bind:class</code> 指令可以与普通的 class 属性共存。如下模板:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如下 data:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">hasError</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渲染为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code> ， class列表将变为 <code>"static active text-danger"</code>。</p>
<p>你也可以直接绑定数据里的一个对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    &#x27;text-danger&#x27;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渲染的结果和上面一样。我们也可以在这里绑定返回对象的<a href="http://caibaojian.com/vue/guide/computed.html">计算属性</a>。这是一个常用且强大的模式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  error: null</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组语法">数组语法</h4>
<p>我们可以把一个数组传给 <code>v-bind:class</code> ，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  activeClass: &#x27;active&#x27;,</span><br><span class="line">  errorClass: &#x27;text-danger&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渲染为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你也想根据条件切换列表中的 class ，可以用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此例始终添加 <code>errorClass</code> ，但是只有在 <code>isActive</code> 是 true 时添加 <code>activeClass</code> 。</p>
<p>不过，当有多个条件 class 时这样写有些繁琐。可以在数组语法中使用对象语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件语法">组件语法</h4>
<blockquote>
<p>这部分内容是假定你已经了解了 <a href="http://caibaojian.com/vue/guide/components.html">Vue Components</a> 相关知识。你可以暂时跳过这里，随后再来阅读。</p>
</blockquote>
<p>当你在一个自定义组件上使用 <code>class</code> 属性时，那些添加的 class 值将会被添加至组件根元素上。根元素上已存在的 class 值将不会被覆盖。</p>
<p>例如，如果你声明一个这样的组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>随后在上面添加一些 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我们同样可以用 class 绑定的形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 <code>isActive</code> 是 true 时, 渲染的 HTML 将会是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="绑定内联样式">绑定内联样式</h3>
<h4 id="对象语法-1">对象语法</h4>
<p><code>v-bind:style</code> 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。 CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: &#x27;red&#x27;,</span><br><span class="line">  fontSize: 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接绑定到一个样式对象通常更好，让模板更清晰：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: &#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;13px&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，对象语法常常结合返回对象的计算属性使用。</p>
<h4 id="数组语法-1">数组语法</h4>
<p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自动添加前缀">自动添加前缀</h4>
<p>当 <code>v-bind:style</code> 使用需要特定前缀的 CSS 属性时，如 <code>transform</code> ，Vue.js 会自动侦测并添加相应的前缀。</p>
<h2 id="条件渲染">条件渲染</h2>
<h3 id="v-if"><code>v-if</code></h3>
<p>在字符串模板中，如 Handlebars ，我们得像这样写一个条件块：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Handlebars 模板 --&gt;</span></span><br><span class="line">&#123;&#123;#if ok&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在 Vue.js ，我们使用 <code>v-if</code> 指令实现同样的功能：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以用 <code>v-else</code> 添加一个 "else" 块：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="template-中-v-if-条件组"><code>&lt;template&gt;</code> 中 <code>v-if</code> 条件组</h4>
<p>因为 <code>v-if</code> 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 <code>v-if</code>，最终的渲染结果不会包含它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-else"><code>v-else</code></h3>
<p>可以用 <code>v-else</code> 指令给 <code>v-if</code> 添加一个 "else" 块：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Sorry</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not sorry</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>v-else</code> 元素必须紧跟在 <code>v-if</code> 元素或者 <code>v-else-if</code>的后面——否则它不能被识别。</p>
<h3 id="v-else-if"><code>v-else-if</code></h3>
<blockquote>
<p>2.1.0 新增</p>
</blockquote>
<p>The <code>v-else-if</code>, as the name suggests, serves as an "else if block" for <code>v-if</code>. It can also be chained multiple times:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Similar to <code>v-else</code>, a <code>v-else-if</code> element must immediately follow a <code>v-if</code> or a <code>v-else-if</code> element.</p>
<h4 id="controlling-reusable-elements-with-key">Controlling Reusable Elements with <code>key</code></h4>
<p>Vue tries to render elements as efficiently as possible, often re-using them instead of rendering from scratch. Beyond helping make Vue very fast, this can have some useful advantages. For example, if you allow users to toggle between multiple login types:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then switching the <code>loginType</code> in the code above will not erase what the user has already entered. Since both templates use the same elements, the <code>&lt;input&gt;</code> is not replaced - just its <code>placeholder</code>.</p>
<p>Check it out for yourself by entering some text in the input, then pressing the toggle button:</p>
<p>Username</p>
Toggle login type
</div>
<p>This isn't always desirable though, so Vue offers a way for you to say, "These two elements are completely separate - don't re-use them." Just add a <code>key</code> attribute with unique values:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now those inputs will be rendered from scratch each time you toggle. See for yourself:</p>
<p>Username</p>
Toggle login type
</div>
<p>Note that the <code>&lt;label&gt;</code> elements are still efficiently re-used, because they don't have <code>key</code> attributes.</p>
<h3 id="v-show"><code>v-show</code></h3>
<p>另一个根据条件展示元素的选项是 <code>v-show</code> 指令。用法大体上一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同的是有 <code>v-show</code> 的元素会始终渲染并保持在 DOM 中。<code>v-show</code> 是简单的切换元素的 CSS 属性 <code>display</code> 。</p>
<p>注意 <code>v-show</code> 不支持 `</p>
<h4 id="v-if-vs-v-show"><code>v-if</code> vs <code>v-show</code></h4>
<p><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p>
<p>相比之下， <code>v-show</code> 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p>
<p>一般来说， <code>v-if</code> 有更高的切换消耗而 <code>v-show</code> 有更高的初始渲染消耗。因此，如果需要频繁切换使用 <code>v-show</code> 较好，如果在运行时条件不大可能改变则使用 <code>v-if</code> 较好。</p>
<h2 id="列表渲染">列表渲染</h2>
<h3 id="v-for"><code>v-for</code></h3>
<p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以 <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>
<h4 id="基本用法">基本用法</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-1&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123;message: &#x27;foo&#x27; &#125;,</span><br><span class="line">      &#123;message: &#x27;Bar&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<ul>
<li>Foo</li>
<li>Bar</li>
</ul>
<p>在 <code>v-for</code> 块中，我们拥有对父作用域属性的完全访问权限。 <code>v-for</code> 还支持一个可选的第二个参数为当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-2&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &#x27;Parent&#x27;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="line">      &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<ul>
<li>Parent - 0 - Foo</li>
<li>Parent - 1 - Bar</li>
</ul>
<p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="template-v-for">Template v-for</h4>
<p>如同 <code>v-if</code> 模板，你也可以用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 标签来渲染多个元素块。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="对象迭代-v-for">对象迭代 v-for</h4>
<p>你也可以用 <code>v-for</code> 通过一个对象的属性来迭代。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;repeat-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#repeat-object&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      FirstName: &#x27;John&#x27;,</span><br><span class="line">      LastName: &#x27;Doe&#x27;,</span><br><span class="line">      Age: 30</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<ul>
<li>John</li>
<li>Doe</li>
<li>30</li>
</ul>
<p>你也可以提供第二个的参数为键名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三个参数为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。</p>
<h4 id="整数迭代-v-for">整数迭代 v-for</h4>
<p><code>v-for</code> 也可以取整数。在这种情况下，它将重复多次模板。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>1 2 3 4 5 6 7 8 9 10</p>
<h4 id="组件-和-v-for">组件 和 v-for</h4>
<blockquote>
<p>了解组件相关知识，查看 <a href="http://caibaojian.com/vue/guide/components.html">组件</a> 。完全可以先跳过它，以后再回来查看。</p>
</blockquote>
<p>在自定义组件里，你可以像任何普通元素一样用 <code>v-for</code> 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然而他不能自动传递数据到组件里，因为组件有自己独立的作用域。为了传递迭代数据到组件里，我们要用 <code>props</code> ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不自动注入 <code>item</code> 到组件里的原因是，因为这使得组件会紧密耦合到 <code>v-for</code> 如何运作。在一些情况下，明确数据的来源可以使组件可重用。</p>
<p>下面是一个简单的 todo list 完整的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todo-list-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;newTodoText&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;addNewTodo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;Add a todo&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">is</span>=<span class="string">&quot;todo-item&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(todo, index) in todos&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:title</span>=<span class="string">&quot;todo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:remove</span>=<span class="string">&quot;todos.splice(index, 1)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">Vue.component(&#x27;todo-item&#x27;, &#123;</span><br><span class="line">  template: &#x27;\</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>\</span><br><span class="line">      &#123;&#123; title &#125;&#125;\</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(\&#x27;remove\&#x27;)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">  &#x27;,</span><br><span class="line">  props: [&#x27;title&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#todo-list-example&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    newTodoText: &#x27;&#x27;,</span><br><span class="line">    todos: [</span><br><span class="line">      &#x27;Do the dishes&#x27;,</span><br><span class="line">      &#x27;Take out the trash&#x27;,</span><br><span class="line">      &#x27;Mow the lawn&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addNewTodo: function () &#123;</span><br><span class="line">      this.todos.push(this.newTodoText)</span><br><span class="line">      this.newTodoText = &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="key">key</h3>
<p>当 Vue.js 用 <code>v-for</code> 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，而不是移动 DOM 元素来匹配数据项的顺序， Vue 将简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 <code>track-by="$index"</code> 。</p>
<p>这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。</p>
<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> 属性。理想的 <code>key</code> 值是每项都有唯一 id。这个特殊的属性相当于 Vue 1.x 的 <code>track-by</code> ，但它的工作方式类似于一个属性，所以你需要用 <code>v-bind</code> 来绑定动态值（在这里使用简写）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>建议尽可能使用 <code>v-for</code> 来提供 <code>key</code> ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。</p>
<p>因为它是 Vue 识别节点的一个通用机制， <code>key</code> 并不特别与 <code>v-for</code> 关联，key 还具有其他用途，我们将在后面的指南中看到其他用途。</p>
<h3 id="数组更新检测">数组更新检测</h3>
<h4 id="变异方法">变异方法</h4>
<p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：</p>
<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
<p>你打开控制台，然后用前面例子的 <code>items</code> 数组调用突变方法：<code>example1.items.push(&#123; message: 'Baz' &#125;)</code> 。</p>
<h4 id="重塑数组">重塑数组</h4>
<p>变异方法(mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异(non-mutating method)方法，例如： <code>filter()</code>, <code>concat()</code>, <code>slice()</code> 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。 Vue 实现了一些智能启发式方法来最大化 DOM 元素重用，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>
<h4 id="注意事项">注意事项</h4>
<p>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</p>
<ol type="1">
<li>当你直接设置一个项的索引时，例如： <code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li>
</ol>
<p>为了避免第一种情况，以下两种方式将达到像 <code>vm.items[indexOfItem] = newValue</code> 的效果， 同时也将触发状态更新：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice`</span></span><br><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure>
<p>避免第二种情况，使用 <code>splice</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">example1.items.splice(newLength)</span><br></pre></td></tr></table></figure>
<h3 id="显示过滤排序结果">显示过滤/排序结果</h3>
<p>有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ 1, 2, 3, 4, 5 ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: function () &#123;</span><br><span class="line">    return this.numbers.filter(function (number) &#123;</span><br><span class="line">      return number % 2 === 0</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者，您也可以使用在计算属性是不可行的 method 方法 (例如，在嵌套 <code>v-for</code> 循环中)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;n in even(numbers)&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ 1, 2, 3, 4, 5 ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: function (numbers) &#123;</span><br><span class="line">    return numbers.filter(function (number) &#123;</span><br><span class="line">      return number % 2 === 0</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件处理器">事件处理器</h2>
<h3 id="监听事件">监听事件</h3>
<p>可以用 <code>v-on</code> 指令监听 DOM 事件来触发一些 JavaScript 代码。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-1&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>增加 1</p>
<p>这个按钮被点击了 0 次。</p>
<p>## 方法事件处理器 许多事件处理的逻辑都很复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 可以接收一个定义的方法来调用。 示例： ``` html</p>
<p>Greet</p>
<p>``<code>``` js var example2 = new Vue(&#123; el: '#example-2', data: &#123; name: 'Vue.js' &#125;, // 在</code>methods<code>对象中定义方法 methods: &#123; greet: function (event) &#123; //</code>this<code>在方法里指当前 Vue 实例 alert('Hello ' + this.name + '!') //</code>event` 是原生 DOM 事件 alert(event.target.tagName) } } }) // 也可以用 JavaScript 直接调用方法 example2.greet() // -&gt; 'Hello Vue.js!' ``` 结果：</p>
<p>Greet</p>
<p>## 内联处理器方法 除了直接绑定到一个方法，也可以用内联 JavaScript 语句： ``` html</p>
<p>Say hi Say what</p>
<p>``` <code>js new Vue(&#123; el: '#example-3', methods: &#123; say: function (message) &#123; alert(message) &#125; &#125; &#125;)</code> 结果：</p>
<p>Say hi Say what</p>
<p>有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法： <code>html Submit</code> <code>js // ... methods: &#123; warn: function (message, event) &#123; // 现在我们可以访问原生事件对象 if (event) event.preventDefault() alert(message) &#125; &#125;</code> ## 事件修饰符 在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。 为了解决这个问题， Vue.js 为 <code>v-on</code> 提供了 <strong>事件修饰符</strong>。通过由点(.)表示的指令后缀来调用修饰符。 - <code>.stop</code> - <code>.prevent</code> - <code>.capture</code> - <code>.self</code> ``` html</p>
<p>...</p>
<p>...</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 按键修饰符</span><br><span class="line"></span><br><span class="line">在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 `v-on` 在监听键盘事件时添加按键修饰符：</span><br><span class="line"></span><br><span class="line">``` html</span><br><span class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>全部的按键别名：</p>
<ul>
<li><code>.enter</code></li>
<li><code>.tab</code></li>
<li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<p>可以通过全局 <code>config.keyCodes</code> 对象<a href="http://caibaojian.com/vue/api#keyCodes">自定义按键修饰符别名</a>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用 v-on:keyup.f1</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></span><br></pre></td></tr></table></figure>
<h3 id="鼠标事件修饰符">鼠标事件修饰符</h3>
<blockquote>
<p>2.1.0 新增</p>
</blockquote>
<p>可以用如下修饰符在相应按键响应时进行鼠标事件监听</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<h3 id="为什么在-html-中监听事件">为什么在 HTML 中监听事件?</h3>
<p>你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 <code>v-on</code> 有几个好处：</p>
<ol type="1">
<li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li>
<li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li>
<li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。</li>
</ol>
<h2 id="表单控件绑定">表单控件绑定</h2>
<h3 id="基础用法">基础用法</h3>
<p>你可以用 <code>v-model</code> 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p>
<p><code>v-model</code> 并不关心表单控件初始化所生成的值。因为它会选择 Vue 实例数据来作为具体的值。</p>
<h3 id="文本-1">文本</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Message is:</p>
<h3 id="多行文本">多行文本</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Multiline message is:</p>
<p>在文本区域插值( `<code>) 并不会生效，应用</code>v-model` 来代替</p>
<h3 id="复选框">复选框</h3>
<p>单个勾选框，逻辑值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>false</p>
<p>多个勾选框，绑定到同一个数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;...&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Jack John Mike Checked names: []</p>
<h3 id="单选按钮">单选按钮</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>One Two Picked:</p>
<h3 id="选择列表">选择列表</h3>
<p>单选列表:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A B C Selected:</p>
<p>多选列表（绑定到一个数组）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A B C Selected: []</p>
<p>动态选项，用 <code>v-for</code> 渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;...&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: &#x27;A&#x27;,</span><br><span class="line">    options: [</span><br><span class="line">      &#123; text: &#x27;One&#x27;, value: &#x27;A&#x27; &#125;,</span><br><span class="line">      &#123; text: &#x27;Two&#x27;, value: &#x27;B&#x27; &#125;,</span><br><span class="line">      &#123; text: &#x27;Three&#x27;, value: &#x27;C&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>​ One Two Three Selected: A</p>
<h3 id="绑定-value">绑定 value</h3>
<p>对于单选按钮，勾选框及选择列表选项， <code>v-model</code> 绑定的 value 通常是静态字符串（对于勾选框是逻辑值）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中时，`selected` 为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是有时我们想绑定 value 到 Vue 实例的一个动态属性上，这时可以用 <code>v-bind</code> 实现，并且这个属性的值可以不是字符串。</p>
<h4 id="复选框-1">复选框</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:true-value</span>=<span class="string">&quot;a&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:false-value</span>=<span class="string">&quot;b&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">// 当选中时</span><br><span class="line">vm.toggle === vm.a</span><br><span class="line">// 当没有选中时</span><br><span class="line">vm.toggle === vm.b</span><br></pre></td></tr></table></figure>
<h4 id="单选按钮-1">单选按钮</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">// 当选中时</span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>
<h4 id="选择列表设置">选择列表设置</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">// 当选中时</span><br><span class="line">typeof vm.selected // -&gt; &#x27;object&#x27;</span><br><span class="line">vm.selected.number // -&gt; 123</span><br></pre></td></tr></table></figure>
<h3 id="修饰符-1">修饰符</h3>
<h4 id="lazy"><code>.lazy</code></h4>
<p>在默认情况下， <code>v-model</code> 在 <code>input</code> 事件中同步输入框的值与数据，但你可以添加一个修饰符 <code>lazy</code> ，从而转变为在 <code>change</code> 事件中同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="number"><code>.number</code></h4>
<p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 <code>number</code> 给 <code>v-model</code> 来处理输入值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这通常很有用，因为在 <code>type="number"</code> 时 HTML 中输入的值也总是会返回字符串类型。</p>
<h4 id="trim"><code>.trim</code></h4>
<p>如果要自动过滤用户输入的首尾空格，可以添加 <code>trim</code> 修饰符到 <code>v-model</code> 上过滤输入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在组件中使用-v-model">在组件中使用 <code>v-model</code></h3>
<blockquote>
<p>如果你还不熟悉 Vue 组件，现在先跳过此处。</p>
</blockquote>
<p>HTML 内置的输入框类型并不能满足需求。幸运的是，Vue 组件允许使用完全自定义的行为来构建可重用的输入框。这些输入框甚至可以使用 <code>v-model</code>！想要了解更多信息，请阅读组件指南中<a href="http://caibaojian.com/vue/guide/components.html#使用自定义事件的表单输入组件">自定义输入</a>。</p>
<h2 id="组件">组件</h2>
<h3 id="什么是组件">什么是组件？</h3>
<p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
<h3 id="使用组件">使用组件</h3>
<h4 id="注册">注册</h4>
<p>之前说过，我们可以通过以下方式创建一个 Vue 实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#some-element&#x27;</span>,</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>要注册一个全局组件，你可以使用 <code>Vue.component(tagName, options)</code>。 例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>对于自定义标签名，Vue.js 不强制要求遵循 <a href="https://www.w3.org/TR/custom-elements/#concepts">W3C规则</a> （小写，并且包含一个短杠），尽管遵循这个规则比较好。</p>
<p>组件在注册之后，便可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;&lt;/my-component&gt;</code> 的形式使用。要确保在初始化根实例 <strong>之前</strong> 注册了组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&#x27;my-component&#x27;, &#123;</span><br><span class="line">  template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A custom component!</p>
<h4 id="局部注册">局部注册</h4>
<p>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这种封装也适用于其它可注册的 Vue 功能，如指令。</p>
<h4 id="dom-模版解析说明">DOM 模版解析说明</h4>
<p>当使用 DOM 作为模版时（例如，将 <code>el</code> 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <code>&lt;ul&gt;</code> ， <code>&lt;ol&gt;</code>， <code>&lt;table&gt;</code> ， <code>&lt;select&gt;</code> 限制了能被它包裹的元素， <code>&lt;option&gt;</code> 只能出现在其它元素内部。</p>
<p>在自定义组件中使用这些受限制的元素时会导致一些问题，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义组件 <code>&lt;my-row&gt;</code> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 <code>is</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;my-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：</strong></p>
<ul>
<li><code>&lt;script type="text/x-template"&gt;</code></li>
<li>JavaScript内联模版字符串</li>
<li><code>.vue</code> 组件</li>
</ul>
<p>因此，有必要的话请使用字符串模版。</p>
<h4 id="data-必须是函数"><code>data</code> 必须是函数</h4>
<p>使用组件时，大多数选项可以被传入到 Vue 构造器中，有一个例外： <code>data</code> 必须是函数。 实际上，如果你这么做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>那么 Vue 会在控制台发出警告，告诉你在组件中 <code>data</code> 必须是一个函数。最好理解这种规则的存在意义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var data = &#123; counter: 0 &#125;</span><br><span class="line"></span><br><span class="line">Vue.component(&#x27;simple-counter&#x27;, &#123;</span><br><span class="line">  template: &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;,</span><br><span class="line">  // data 是一个函数，因此 Vue 不会警告，</span><br><span class="line">  // 但是我们为每一个组件返回了同一个对象引用</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-2&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>0 0 0</p>
<p>由于这三个组件共享了同一个 <code>data</code> ， 因此增加一个 counter 会影响所有组件！我们可以通过为每个组件返回新的 data 对象来解决这个问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在每个 counter 都有它自己内部的状态了：</p>
<p>0 0 0</p>
<h4 id="构成组件">构成组件</h4>
<p>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。</p>
<p>在 Vue.js 中，父子组件的关系可以总结为 <strong>props down, events up</strong> 。父组件通过 <strong>props</strong> 向下传递数据给子组件，子组件通过 <strong>events</strong> 给父组件发送消息。看看它们是怎么工作的。</p>
<figure>
<img src="http://caibaojian.com/vue/images/props-events.png" alt="props down, events up" /><figcaption aria-hidden="true">props down, events up</figcaption>
</figure>
<h3 id="prop">Prop</h3>
<h4 id="使用-prop-传递数据">使用 Prop 传递数据</h4>
<p>组件实例的作用域是<strong>孤立的</strong>。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p>
<p>prop 是父组件用来传递数据的一个自定义属性。子组件需要显式地用 <a href="http://caibaojian.com/vue/api#props"><code>props</code> 选项</a>声明 “prop”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 声明 props</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">  <span class="comment">// 就像 data 一样，prop 可以用在模板内</span></span><br><span class="line">  <span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后向它传入一个普通字符串：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">&quot;hello!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>hello!</p>
<h4 id="camelcase-vs.-kebab-case">camelCase vs. kebab-case</h4>
<p>HTML 特性不区分大小写。当使用非字符串模版时，prop的名字形式会从 camelCase 转为 kebab-case（短横线隔开）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// camelCase in JavaScript</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;myMessage&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;!-- kebab-<span class="keyword">case</span> <span class="keyword">in</span> HTML --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">my-message</span>=<span class="string">&quot;hello!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>再次说明，如果你使用字符串模版，不用在意这些限制。</p>
<h4 id="动态-prop">动态 Prop</h4>
<p>类似于用 <code>v-bind</code> 绑定 HTML 特性到一个表达式，也可以用 <code>v-bind</code> 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;parentMsg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:my-message</span>=<span class="string">&quot;parentMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>v-bind</code> 的缩写语法通常更简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:my-message</span>=<span class="string">&quot;parentMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>Message from parent</p>
<h4 id="字面量语法-vs-动态语法">字面量语法 vs 动态语法</h4>
<p>初学者常犯的一个错误是使用字面量语法传递数值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递了一个字符串&quot;1&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">some-prop</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为它是一个字面 prop ，它的值以字符串 <code>"1"</code> 而不是以实际的数字传下去。如果想传递一个实际的 JavaScript 数字，需要使用 <code>v-bind</code> ，从而让它的值被当作 JavaScript 表达式计算：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递实际的数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="单向数据流">单向数据流</h4>
<p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p>
<p>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你<strong>不应该</strong>在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。</p>
<p>通常有两种改变 prop 的情况：</p>
<ol type="1">
<li>prop 作为初始值传入，子组件之后只是将它的初始值作为本地数据的初始值使用；</li>
<li>prop 作为需要被转变的原始值传入。</li>
</ol>
<p>更确切的说这两种情况是：</p>
<ol type="1">
<li><p>定义一个局部 data 属性，并将 prop 的初始值作为局部数据的初始值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line"><span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="built_in">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义一个 computed 属性，此属性从 prop 的值计算得出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"> <span class="attr">normalizedSize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.size.trim().toLowerCase()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它<strong>会影响</strong>父组件的状态。</p>
<h4 id="prop-验证">Prop 验证</h4>
<p>组件可以为 props 指定验证要求。如果未指定验证要求，Vue 会发出警告。当组件给其他人使用时这很有用。</p>
<p>prop 是一个对象而不是字符串数组时，它包含验证要求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;example&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 （`null` 意思是任何类型都可以）</span></span><br><span class="line">    <span class="attr">propA</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    <span class="attr">propC</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组／对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    <span class="attr">propE</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>type</code> 可以是下面原生构造器：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Function</li>
<li>Object</li>
<li>Array</li>
</ul>
<p><code>type</code> 也可以是一个自定义构造器，使用 <code>instanceof</code> 检测。</p>
<p>当 prop 验证失败了， Vue 将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。</p>
<h3 id="自定义事件">自定义事件</h3>
<p>我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！</p>
<h4 id="使用-v-on-绑定自定义事件">使用 <code>v-on</code> 绑定自定义事件</h4>
<p>每个 Vue 实例都实现了<a href="http://caibaojian.com/vue/api#Instance-Methods-Events">事件接口(Events interface)</a>，即：</p>
<ul>
<li>使用 <code>$on(eventName)</code> 监听事件</li>
<li>使用 <code>$emit(eventName)</code> 触发事件</li>
</ul>
<p>Vue的事件系统分离自浏览器的<a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget">EventTarget API</a>。尽管它们的运行类似，但是<code>$on</code> 和 <code>$emit</code> <strong>不是</strong><code>addEventListener</code> 和 <code>dispatchEvent</code> 的别名。</p>
<p>另外，父组件可以在使用子组件的地方直接用 <code>v-on</code> 来监听子组件触发的事件。</p>
<p>下面是一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter-event-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  template: &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment: function () &#123;</span><br><span class="line">      this.counter += 1</span><br><span class="line">      this.$emit(&#x27;increment&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#counter-event-example&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: function () &#123;</span><br><span class="line">      this.total += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>0</p>
<p>0 0</p>
<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。</p>
<h5 id="给组件绑定原生事件">给组件绑定原生事件</h5>
<p>有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 <code>.native</code> 修饰 <code>v-on</code> 。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">&quot;doTheThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用自定义事件的表单输入组件">使用自定义事件的表单输入组件</h4>
<p>自定义事件也可以用来创建自定义的表单输入组件，使用 <code>v-model</code> 来进行数据双向绑定。牢记：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;something&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>仅仅是一个语法糖：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;something&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;something = $event.target.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以在组件中使用时，它相当于下面的简写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;something&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;something = arguments[0]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以要让组件的 <code>v-model</code> 生效，它必须：</p>
<ul>
<li>接受一个 <code>value</code> 属性</li>
<li>在有新的 value 时触发 <code>input</code> 事件</li>
</ul>
<p>一个非常简单的货币输入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">currency-input</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">currency-input</span>&gt;</span></span><br><span class="line">Vue.component(&#x27;currency-input&#x27;, &#123;</span><br><span class="line">  template: &#x27;\</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>\</span><br><span class="line">      $\</span><br><span class="line">      &lt;input\</span><br><span class="line">        ref=&quot;input&quot;\</span><br><span class="line">        v-bind:value=&quot;value&quot;\</span><br><span class="line">        v-on:input=&quot;updateValue($event.target.value)&quot;\</span><br><span class="line">      &gt;\</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span>\</span><br><span class="line">  &#x27;,</span><br><span class="line">  props: [&#x27;value&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span><br><span class="line">    updateValue: function (value) &#123;</span><br><span class="line">      var formattedValue = value</span><br><span class="line">        // 删除两侧的空格符</span><br><span class="line">        .trim()</span><br><span class="line">        // 保留 2 小数位</span><br><span class="line">        .slice(0, value.indexOf(&#x27;.&#x27;) + 3)</span><br><span class="line">      // 如果值不统一，手动覆盖以保持一致</span><br><span class="line">      if (formattedValue !== value) &#123;</span><br><span class="line">        this.$refs.input.value = formattedValue</span><br><span class="line">      &#125;</span><br><span class="line">      // 通过 input 事件发出数值</span><br><span class="line">      this.$emit(&#x27;input&#x27;, Number(formattedValue))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>$</p>
<p>上面的实现方式太过理想化了。 比如，用户甚至可以输入多个小数点或句号 - 哦哦！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：</p>
<iframe width="100%" height="300" src="https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/result,html,js" allowfullscreen="allowfullscreen" frameborder="0" style="box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(189, 202, 219); font-family: Georgia, serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: 0.2px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;">
</iframe>
<p>这个接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">voice-recognizer</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">voice-recognizer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webcam-gesture-reader</span> <span class="attr">v-model</span>=<span class="string">&quot;gesture&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">webcam-gesture-reader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webcam-retinal-scanner</span> <span class="attr">v-model</span>=<span class="string">&quot;retinalImage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">webcam-retinal-scanner</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="非父子组件通信">非父子组件通信</h4>
<p>有时候非父子关系的组件也需要通信。在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;id-selected&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;id-selected&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在更多复杂的情况下，你应该考虑使用专门的 <a href="http://caibaojian.com/vue/guide/state-management.html">状态管理模式</a>.</p>
<h3 id="使用-slot-分发内容">使用 Slot 分发内容</h3>
<p>在使用组件时，常常要像这样组合它们：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意两点：</p>
<ol type="1">
<li><code>&lt;app&gt;</code> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<code>&lt;app&gt;</code>的父组件决定的。</li>
<li><code>&lt;app&gt;</code> 组件很可能有它自己的模版。</li>
</ol>
<p>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 <strong>内容分发</strong> (或 "transclusion" 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Web 组件规范草案</a>，使用特殊的 <code>&lt;slot&gt;</code> 元素作为原始内容的插槽。</p>
<h4 id="编译作用域">编译作用域</h4>
<p>在深入内容分发 API 之前，我们先明确内容的编译作用域。假定模板为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>message</code> 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：</p>
<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>
<p>一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-show</span>=<span class="string">&quot;someChildProperty&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假定 <code>someChildProperty</code> 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。</p>
<p>如果要绑定子组件内的指令到一个组件的根节点，应当在它的模板内这么做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 有效，因为是在正确的作用域内</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div v-show=&quot;someChildProperty&quot;&gt;Child&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">someChildProperty</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>类似地，分发内容是在父组件作用域内编译。</p>
<h4 id="单个-slot">单个 Slot</h4>
<p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被<strong>丢弃</strong>。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</p>
<p>最初在 <code>&lt;slot&gt;</code> 标签中的任何内容都被视为<strong>备用内容</strong>。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。</p>
<p>假定 <code>my-component</code> 组件有下面模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件模版：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是更多的初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是更多的初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="具名-slot">具名 Slot</h4>
<p><code>&lt;slot&gt;</code> 元素可以用一个特殊的属性 <code>name</code> 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 <code>slot</code> 特性的元素。</p>
<p>仍然可以有一个匿名 slot ，它是<strong>默认 slot</strong> ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。</p>
<p>例如，假定我们有一个 <code>app-layout</code> 组件，它的模板为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件模版：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在组合组件时，内容分发 API 是非常有用的机制。</p>
<h4 id="作用域插槽">作用域插槽</h4>
<blockquote>
<p>2.1.0 新增</p>
</blockquote>
<p>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。</p>
<p>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">text</span>=<span class="string">&quot;hello from child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在父级中，具有特殊属性 <code>scope</code> 的 <code>&lt;template&gt;</code> 元素，表示它是作用域插槽的模板。<code>scope</code> 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from parent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果我们渲染以上结果，得到的输出会是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from parent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from child<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-awesome-list</span> <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 作用域插槽也可以在这里命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;my-fancy-item&quot;</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-awesome-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>列表组件的模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:text</span>=<span class="string">&quot;item.text&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fallback content here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态组件">动态组件</h3>
<p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">currentView</span>: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="attr">home</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    <span class="attr">posts</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    <span class="attr">archive</span>: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;component v-bind:is=<span class="string">&quot;currentView&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class="line">&lt;/component&gt;</span><br></pre></td></tr></table></figure>
<p>也可以直接绑定到组件对象上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Home = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;Welcome home!&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">currentView</span>: Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="keep-alive"><code>keep-alive</code></h4>
<p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<a href="http://caibaojian.com/vue/api#keep-alive">API 参考</a>查看更多 <code>&lt;keep-alive&gt;</code> 的细节。</p>
<h3 id="杂项">杂项</h3>
<h4 id="编写可复用组件">编写可复用组件</h4>
<p>在编写组件时，记住是否要复用组件有好处。一次性组件跟其它组件紧密耦合没关系，但是可复用组件应当定义一个清晰的公开接口。</p>
<p>Vue 组件的 API 来自三部分 - props, events 和 slots ：</p>
<ul>
<li><strong>Props</strong> 允许外部环境传递数据给组件</li>
<li><strong>Events</strong> 允许组件触发外部环境的副作用</li>
<li><strong>Slots</strong> 允许外部环境将额外的内容组合在组件中。</li>
</ul>
<p>使用 <code>v-bind</code> 和 <code>v-on</code> 的简写语法，模板的缩进清楚且简洁：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:foo</span>=<span class="string">&quot;baz&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:bar</span>=<span class="string">&quot;qux&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">event-a</span>=<span class="string">&quot;doThis&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">event-b</span>=<span class="string">&quot;doThat&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;main-text&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="子组件索引">子组件索引</h4>
<p>尽管有 props 和 events ，但是有时仍然需要在 JavaScript 中直接访问子组件。为此可以使用 <code>ref</code> 为子组件指定一个索引 ID 。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user-profile</span> <span class="attr">ref</span>=<span class="string">&quot;profile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var parent = new Vue(&#123; el: &#x27;#parent&#x27; &#125;)</span><br><span class="line">// 访问子组件</span><br><span class="line">var child = parent.$refs.profile</span><br></pre></td></tr></table></figure>
<p>当 <code>ref</code> 和 <code>v-for</code> 一起使用时， ref 是一个数组或对象，包含相应的子组件。</p>
<p><code>$refs</code> 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 <code>$refs</code> 。</p>
<h4 id="异步组件">异步组件</h4>
<p>在大型应用中，我们可能需要将应用拆分为多个小模块，按需从服务器下载。为了让事情更简单， Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。Vue.js 只在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;async-example&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Pass the component definition to the resolve callback</span></span><br><span class="line">    resolve(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>工厂函数接收一个 <code>resolve</code> 回调，在收到从服务器下载的组件定义时调用。也可以调用 <code>reject(reason)</code> 指示加载失败。这里 <code>setTimeout</code> 只是为了演示。怎么获取组件完全由你决定。推荐配合使用 ：<a href="http://webpack.github.io/docs/code-splitting.html">Webpack 的代码分割功能</a>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;async-webpack-example&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个特殊的 require 语法告诉 webpack</span></span><br><span class="line">  <span class="comment">// 自动将编译后的代码分割成不同的块，</span></span><br><span class="line">  <span class="comment">// 这些块将通过 Ajax 请求自动下载。</span></span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&#x27;./my-async-component&#x27;</span>], resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>你可以使用 Webpack 2 + ES2015 的语法返回一个 <code>Promise</code> resolve 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">  <span class="string">&#x27;async-webpack-example&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> System.import(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果你是 <strong>Browserify</strong> 用户,可能就无法使用异步组件了,它的作者已经<a href="https://github.com/substack/node-browserify/issues/58#issuecomment-21978224">表明</a> Browserify 是不支持异步加载的。如果这个功能对你很重要，请使用 Webpack。</p>
<h4 id="组件命名约定">组件命名约定</h4>
<p>当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase 。Vue 不关心这个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件定义中</span></span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  <span class="comment">// 使用 kebab-case 形式注册</span></span><br><span class="line">  <span class="string">&#x27;kebab-cased-component&#x27;</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// register using camelCase</span></span><br><span class="line">  <span class="string">&#x27;camelCasedComponent&#x27;</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// register using TitleCase</span></span><br><span class="line">  <span class="string">&#x27;TitleCasedComponent&#x27;</span>: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 HTML 模版中，请使用 kebab-case 形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在HTML模版中始终使用 kebab-case --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kebab-cased-component</span>&gt;</span><span class="tag">&lt;/<span class="name">kebab-cased-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">camel-cased-component</span>&gt;</span><span class="tag">&lt;/<span class="name">camel-cased-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title-cased-component</span>&gt;</span><span class="tag">&lt;/<span class="name">title-cased-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当使用字符串模式时，可以不受 HTML 的 case-insensitive 限制。这意味实际上在模版中，你可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在字符串模版中可以用任何你喜欢的方式! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">myComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">myComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果组件未经 <code>slot</code> 元素传递内容，你甚至可以在组件名后使用 <code>/</code> 使其自闭合：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，这只在字符串模版中有效。因为自闭的自定义元素是无效的 HTML ，浏览器原生的解析器也无法识别它。</p>
<h4 id="递归组件">递归组件</h4>
<p>组件在它的模板内可以递归地调用自己，不过，只有当它有 name 选项时才可以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&#x27;unique-name-of-my-component&#x27;</span></span><br></pre></td></tr></table></figure>
<p>当你利用<code>Vue.component</code>全局注册了一个组件, 全局的ID作为组件的 <code>name</code> 选项，被自动设置.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;unique-name-of-my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果你不谨慎, 递归组件可能导致死循环:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&#x27;stack-overflow&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面组件会导致一个错误 “max stack size exceeded” ，所以要确保递归调用有终止条件 (比如递归调用时使用 <code>v-if</code> 并让他最终返回 <code>false</code> )。</p>
<h4 id="circular-references-between-components">Circular References Between Components</h4>
<p>Let's say you're building a file directory tree, like in Finder or File Explorer. You might have a <code>tree-folder</code> component with this template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; folder.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tree-folder-contents</span> <span class="attr">:children</span>=<span class="string">&quot;folder.children&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then a <code>tree-folder-contents</code> component with this template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;child in children&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; child.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When you look closely, you'll see that these components will actually be each other's descendent <em>and</em> ancestor in the render tree - a paradox! When registering components globally with <code>Vue.component</code>, this paradox is resolved for you automatically. If that's you, you can stop reading here.</p>
<p>However, if you're requiring/importing components using a <strong>module system</strong>, e.g. via Webpack or Browserify, you'll get an error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to mount component: template or render function not defined.</span><br></pre></td></tr></table></figure>
<p>To explain what's happening, I'll call our components A and B. The module system sees that it needs A, but first A needs B, but B needs A, but A needs B, etc, etc. It's stuck in a loop, not knowing how to fully resolve either component without first resolving the other. To fix this, we need to give the module system a point at which it can say, "A needs B <em>eventually</em>, but there's no need to resolve B first."</p>
<p>In our case, I'll make that point the <code>tree-folder</code> component. We know the child that creates the paradox is the <code>tree-folder-contents</code> component, so we'll wait until the <code>beforeCreate</code> lifecycle hook to register it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$options.components.TreeFolderContents = <span class="built_in">require</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Problem solved!</p>
<h4 id="内联模版">内联模版</h4>
<p>如果子组件有 inline-template 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are compiled as the component&#x27;s own template.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Not parent&#x27;s transclusion content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是 inline-template 让模板的作用域难以理解。最佳实践是使用 template 选项在组件内定义模板或者在 <code>.vue</code> 文件中使用 <code>template</code> 元素。</p>
<h4 id="x-templates">X-Templates</h4>
<p>另一种定义模版的方式是在 JavaScript 标签里使用 <code>text/x-template</code> 类型，并且指定一个id。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hello-world-template&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello hello hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Vue.component(&#x27;hello-world&#x27;, &#123;</span><br><span class="line">  template: &#x27;#hello-world-template&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这在有很多模版或者小的应用中有用，否则应该避免使用，因为它将模版和组件的其他定义隔离了。</p>
<h4 id="使用-v-once-的低级静态组件cheap-static-component">使用 <code>v-once</code> 的低级静态组件(Cheap Static Component)</h4>
<p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含<strong>大量</strong>静态内容时，可以考虑使用 <code>v-once</code> 将渲染结果缓存起来，就像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;terms-of-service&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;\</span></span><br><span class="line"><span class="string">    &lt;div v-once&gt;\</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Terms of Service&lt;/h1&gt;\</span></span><br><span class="line"><span class="string">      ... a lot of static content ...\</span></span><br><span class="line"><span class="string">    &lt;/div&gt;\</span></span><br><span class="line"><span class="string">  &#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习Pytorch环境配置</title>
    <url>/2021/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>大三上创新实践 机器学习环境搭建</p>
<span id="more"></span>
<blockquote>
<p>本文主要介绍使用<strong>Pycharm</strong>(Python最好用的文本编辑器) + <strong>Anaconda</strong>(管理Python、conda科学包、和依赖项，以及本地<strong>切换不同的Python环境</strong>) + <strong>Pytorch</strong>(主流深度学习科学包)</p>
</blockquote>
<h2 id="下载-pycharm-anaconda">下载 Pycharm &amp; Anaconda</h2>
<ul>
<li>Pycharm</li>
</ul>
<blockquote>
<p>https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows</p>
</blockquote>
<ul>
<li>Anaconda(individual 个人版)</li>
</ul>
<blockquote>
<p>https://www.anaconda.com/products/individual</p>
</blockquote>
<p><strong>注意</strong>：<strong>使用管理员运行</strong> + 勾选<strong>将anaconda添加到系统环境变量</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262158954.png" /></p>
<h2 id="使用conda配置pytorch环境">使用conda配置Pytorch环境</h2>
<h3 id="运行-anaconda-prompt">运行 <strong>Anaconda Prompt</strong></h3>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262201696.png" /></p>
<p><strong>注意：</strong></p>
<blockquote>
<p>一个坑 ：使用 <strong>conda</strong> 更新或者下载依赖项或包的时候 记得关闭VPN代理 否者会报错 <strong>Unexpected Error</strong></p>
</blockquote>
<ul>
<li>出现下 证明安装成功</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262238855.png" /></p>
<h3 id="配置清华镜像源">配置清华镜像源</h3>
<blockquote>
<p>为什么博主配置以后比访问外网还慢 不理解 如果你也后悔了</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<h4 id="取消配置清华镜像源">取消配置清华镜像源</h4>
<ul>
<li>删除 <strong>C:* 下的 </strong>.condarc** 文件即可 (如果没有就用Everything搜一搜在哪)</li>
</ul>
<h4 id="查看镜像源是否配置成功">查看镜像源是否配置成功</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<h3 id="创建pytorch的环境">创建Pytorch的环境</h3>
<ul>
<li><strong>命名</strong>环境 并 指定 <strong>Python</strong> 版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n [名字] python=3.7</span><br></pre></td></tr></table></figure>
<ul>
<li>查看所有环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>
<ul>
<li>激活创建的环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate [名字]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行跳转到 <strong>([名字]) C:&gt;</strong> 则跳转成功</p>
</blockquote>
<ul>
<li>下载 <strong>Pytorch</strong>（官网CV下来的）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一路 y 或者 Enter</p>
<p>可多次运行次命令 查看是否漏包 如提示 <strong>All Done</strong> 证明 Pytorch 安装成功</p>
</blockquote>
<ul>
<li>下载 <strong>juypter notebook</strong>（可以分开运行你程序的每一个板块 验证阶段性的结果是否符合预期）</li>
</ul>
<blockquote>
<p>使用方法 参见 https://www.zhihu.com/question/46309360/answer/254638807</p>
<p>运行方法 -&gt; 在当前环境下 输入 <strong>juypter notebook</strong> 即可运行 当前环境下的 notebook</p>
</blockquote>
<h3 id="退出当前环境">退出当前环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda deactivate [名字]</span><br></pre></td></tr></table></figure>
<h3 id="删除存在的环境">删除存在的环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n [名字] --all</span><br></pre></td></tr></table></figure>
<h2 id="使用-pycharm-配置-创建好的-pytorch-环境">使用 PyCharm 配置 创建好的 Pytorch 环境</h2>
<ul>
<li><strong>文件</strong> -&gt; <strong>设置</strong> -&gt; <strong>Python解释器 设置按钮</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262310264.png" /></p>
<ul>
<li>配置本地环境(Anaconda安装目录 因人而异)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262310697.png" /></p>
<ul>
<li>创建 一个 5x3 的 随机初始化的 Tensor</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262316477.png" /></p>
<h3 id="conda-命令回顾">Conda 命令回顾</h3>
<ul>
<li>查看 conda 基本信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<ul>
<li>激活环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate [名字]</span><br></pre></td></tr></table></figure>
<ul>
<li>退出当前环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda deactivate [名字]</span><br></pre></td></tr></table></figure>
<ul>
<li>删除已创建的环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n [名字] --all</span><br></pre></td></tr></table></figure>
<ul>
<li>创建环境 指定Python版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n [名字] python=3.5</span><br></pre></td></tr></table></figure>
<ul>
<li>下载包和依赖...</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install juypter notebook</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Pytorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习算法优化</title>
    <url>/2021/11/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>机器学习中的算法涉及诸多的优化问题，典型的就是利用梯度下降法(gradient descent)求使损失函数<span class="math inline">\(J(\theta)\)</span>下降的模型参数 <span class="math inline">\(\theta\)</span>。</p>
<span id="more"></span>
<h2 id="bath-gradlient-descen-bgd">Bath Gradlient Descen (BGD)</h2>
<blockquote>
<p>采用整个训练集的数据来计算 cost function 对参数的梯度</p>
</blockquote>
<h3 id="梯度更新规则">梯度更新规则</h3>
<p><span class="math display">\[
\theta = \theta-\eta\nabla_\theta(\theta)
\]</span></p>
<h3 id="缺点">缺点</h3>
<p>计算慢，遇到大量数据集棘手，不能投入新数据实时更新模型</p>
<h3 id="代码">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nb_epochs):</span><br><span class="line">  params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">  params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nb_epochs -&gt; 事先定义的迭代次数</p>
<p>params_grad -&gt; 梯度向量</p>
<p>沿梯度方向更新参数 params</p>
<p>learning_rate -&gt; 学习速率</p>
</blockquote>
<h3 id="适用范围">适用范围</h3>
<p><font color=red><strong>Batch gradient descent 对于凸函数可以收敛到全局极小值，对于非凸函数可以收敛到局部极小值。</strong></font></p>
<h2 id="stochastic-gradient-descent-sgd">Stochastic Gradient Descent (SGD)</h2>
<blockquote>
<p>SGD 每次更新只对<strong>每个</strong>样本进行梯度更新</p>
</blockquote>
<p><font color=red>一次只进行一次更新 没有冗余 可以新增样本</font></p>
<h3 id="梯度更新规则-1">梯度更新规则</h3>
<p><span class="math display">\[
\theta=\theta-\eta\nabla_\theta{J}(\theta;x^i;y^i)
\]</span></p>
<h3 id="缺点-1">缺点</h3>
<p>噪音比BGD多，使得SGD并不是每次迭代都是向着整体最优方向，所以虽然训练速度快，但是准确度下降，并不是全局最优(cost function 震荡)</p>
<blockquote>
<p>稍微减小 learning rate SGD 和 BGD的收敛性是一样的</p>
</blockquote>
<h3 id="代码-1">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<blockquote>
<p>整体数据集加了一个对样本的循环</p>
</blockquote>
<h3 id="适用范围-1">适用范围</h3>
<p><font color=red><strong>BGD 可以收敛到局部极小值，当然 SGD 的震荡可能会跳到更好的局部极小值处。</strong></font></p>
<h2 id="mini-batch-gradient-descent-mbgd">Mini-Batch Gradient Descent (MBGD)</h2>
<blockquote>
<p>MBGD 每一次利用一小批样本，即<strong>n个</strong>样本进行计算</p>
</blockquote>
<ul>
<li><p><font color=red><strong>可以降低参数更新时的方差，收敛更稳定</strong></font></p></li>
<li><p><font color=red><strong>方便用库中高度优化的矩阵操作来进行梯度的计算</strong></font></p></li>
</ul>
<h3 id="梯度更新规则-2">梯度更新规则</h3>
<p><span class="math display">\[
\theta=\theta-\eta\nabla{J}(\theta;x^{i:i+n};y^{i:i+n})
\]</span></p>
<h3 id="缺点-2">缺点</h3>
<ul>
<li><strong>会在鞍点或者局部最小点震荡跳动，每次找到的梯度都是不同的，就会发生震荡，来回跳动。</strong></li>
<li>需要挑选一个合适的学习率</li>
</ul>
<h3 id="代码-2">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n 一般取值在 50~256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, batch, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<h3 id="适用范围-2">适用范围</h3>
<p>同SGD</p>
<h2 id="momentun">Momentun</h2>
<blockquote>
<p>动量算法积累了之前梯度指数级衰减的移动平均，并且继续沿该方向移动。从形式上看，动量算法引入了变量 <span class="math inline">\(v\)</span> 充当速度角色-代表参数在参数空间移动的方向和速率，速度被认为是负梯度的指数衰减平均</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111011808791.png" /></p>
<p><font color=red><strong>通过加入变量v 使梯度继续沿原方向移动</strong></font></p>
<h3 id="梯度更新规则-3">梯度更新规则</h3>
<p><span class="math display">\[
v_t=\gamma_{t-1}+\eta\nabla_\theta{J}(\theta)
\]</span></p>
<p><span class="math display">\[
\theta=\theta-v_t
\]</span></p>
<p><font color=red>一般取 <span class="math inline">\(\gamma=0.9\)</span></font></p>
<h3 id="缺点-3">缺点</h3>
<p>需要人工设定学习率</p>
<h3 id="代码-3">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vx = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dx = computed_gradient(x)</span><br><span class="line">    vx = rho * vx + dx</span><br><span class="line">    x += - learning_rate * vx</span><br></pre></td></tr></table></figure>
<h3 id="适用范围-3">适用范围</h3>
<blockquote>
<p>SGD只依赖于当前迭代的梯度，十分不稳定，加一个“动量”的话，相当于有了一个惯性在里面，梯度方向不仅与这次的迭代有关，还与之前一次的迭代结果有关。“当前一次效果好的话，就加快步伐；当前一次效果不好的话，就减慢步伐”；而且在局部最优值处，没有梯度但因为还存在一个动量，可以跳出局部最优值</p>
</blockquote>
<h2 id="nesterov-accelerated-gradient">Nesterov Accelerated Gradient</h2>
<blockquote>
<p>Nesterov动量和标准动量之间的区别在于梯度的计算上。Nesterov动量中，梯度计算在施加当前速度之后，可以理解为Nesterov 动量往标准动量方法中添加了一个校正因子</p>
</blockquote>
<h3 id="梯度更新规则-4">梯度更新规则</h3>
<p><span class="math display">\[
v_t = \gamma v_{t-1}+\eta \nabla_\theta J(\theta-\gamma v_t)
\]</span></p>
<p><span class="math display">\[
\theta = \theta-v_t
\]</span></p>
<p><font color=red>一般取 <span class="math inline">\(\gamma=0.9\)</span></font></p>
<h3 id="适用范围-4">适用范围</h3>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202111011835413.png" /></p>
<blockquote>
<p>蓝色是 Momentum 的过程，会先计算当前的梯度，然后在更新后的累积梯度后会有一个大的跳跃 而 NAG 会先在前一步的累积梯度上(brown vector)有一个大的跳跃，然后衡量一下梯度做一下修正(red vector)，这种预期的更新可以避免我们走的太快</p>
</blockquote>
<h3 id="代码-4">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	dx = compute_gradient(x)</span><br><span class="line">	old_v = v</span><br><span class="line">	v = rho * v - learning_rate * dx</span><br><span class="line">	x += - rho * old_v + (<span class="number">1</span>+rho) * v</span><br></pre></td></tr></table></figure>
<h3 id="适用范围-5">适用范围</h3>
<p>目前为止，我们可以做到，<strong>在更新梯度时顺应 loss function 的梯度来调整速度，并且对 SGD 进行加速</strong>。</p>
<h2 id="adagradadaptive-gradient-algorithm">Adagrad(Adaptive gradient algorithm)</h2>
<blockquote>
<p>独立地适应所有模型参数的学习率，缩放每个参数反比于其所有梯度历史平方值总和和平方根，具有损失最大偏导的参数相应有一个快速下降的学习率，而具有小偏导的参数在学习率上有相对较小的下降。总的效果是在参数空间中更为平缓的倾斜方向会取得更大的进步</p>
</blockquote>
<h3 id="梯度更新规则-5">梯度更新规则</h3>
<p><span class="math display">\[
\theta_{t+1} = \theta_{t,i} - \frac \eta {\sqrt{G_{t,ii}+\epsilon}}g_{t,i}
\]</span></p>
<p>其中g为 t时刻 参数 <span class="math inline">\(\theta_i\)</span> 的梯度 <span class="math display">\[
g_{t,i}=\nabla_\theta J(\theta_i)
\]</span> 其中<span class="math inline">\(G_t\)</span>是个对角矩阵，(i,i)元素就是t时刻参数<span class="math inline">\(\theta _i\)</span>的梯度平方和</p>
<p>一般 <span class="math inline">\(\eta\)</span> 选取 0.01</p>
<h3 id="缺点-4">缺点</h3>
<p>分母会不断积累，这样学习率就会收缩并最终变得非常小</p>
<h3 id="代码-5">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grad_squared = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dx = compute_gradient(x)</span><br><span class="line">    grad_squared += dx * dx</span><br><span class="line">    x -= learning_rate * dx / (np.sqrt(grad_squared) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
<h3 id="使用范围">使用范围</h3>
<blockquote>
<p>总的效果是在参数空间中更为平缓的倾斜方向会取得更大的进步。对于训练深度神经网络而言，从训练开始积累梯度平方会导致有效学习率过早和过量的减小</p>
</blockquote>
<h2 id="adadelta-rmsprop">Adadelta (RMSProp)</h2>
<blockquote>
<p>对 Adagrad 的改进</p>
</blockquote>
<p>和 Adagrad 相比，分母的G换成了过去的梯度平方的衰减平均值 <font color=red>指数衰减平均值</font> <span class="math display">\[
\Delta\theta_t=-\frac \eta {E[g^2]_t+\epsilon}g_t
\]</span> 这个分母相当于<strong>梯度的均方根 root mean squared (RMS)</strong>，在数据统计分析中，将所有值平方求和，求其均值，再开平方，就得到均方根值 ，所以可以用 RMS 简写 <span class="math display">\[
\Delta\theta_t=-\frac \eta {RMS[g]_t}g_t
\]</span> 其中 E 的计算公式如下，t 时刻的依赖于前一时刻的平均和当前的梯度 <span class="math display">\[
E[g^2]_t=\gamma E[g^2]_{t-1}+(1-\gamma){g_t}^2
\]</span></p>
<h3 id="梯度更新规则-6">梯度更新规则</h3>
<p>将学习率 <span class="math inline">\(\eta\)</span> 换成 <span class="math inline">\(RMS[\Delta \theta]\)</span> <span class="math display">\[
\Delta\theta_t=-\frac {RMS[\Delta \theta]_{t-1}} {RMS[g]_t}g_t
\]</span></p>
<p><span class="math display">\[
\theta_{t+1}=\theta_t+\Delta\theta_t
\]</span></p>
<p><font color=red><span class="math inline">\(\gamma\)</span> 一般设定为 0.9</font></p>
<h3 id="缺点-5">缺点</h3>
<p>解决了 AdaGrad 的缺点</p>
<h3 id="代码-6">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grad_squared = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dx = compute_gradient(x)</span><br><span class="line">    grad_squared = decay_rate * grad_squared + (<span class="number">1</span>-decay_rate) * dx * dx</span><br><span class="line">    x -= learning_rate * dx / (np.sqrt(grad_squared) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
<h3 id="适用范围-6">适用范围</h3>
<blockquote>
<p>RMSProp由Hinton于2012年提出，用于修改AdaGrad以在非凸设定下效果更好，将梯度积累改变为指数加权的移动平均。AdaGrad设计以让凸问题能够快速的收敛。当应用于非凸函数训练神经网络时，学习轨迹可能穿过了很多不同的结构，最终到达一个局部是凸碗的结构。AdaGrad根据平方梯度的整个历史来收缩学习率，学习率很可能在到达这样的凸碗结构之前就变得太小。而RMSProp使用指数衰减平均，丢弃遥远过去的历史，使其能够在找到凸碗结构后快速收敛，该算法等效于一个初始化与该碗状结构的AdaGrad算法。实践中和经验上，RMSProp已经被证明是是一种有效而且实用的深度神经网络优化算法，目前是深度学习从业者经常采用的优化方法之一</p>
</blockquote>
<h2 id="adam">Adam</h2>
<blockquote>
<p>Adam (adaptive moments)，在早期算法的背景下，最好被看成结合RMSProp和具有一些重要区别的动量的变种</p>
</blockquote>
<p><strong>相当于 RMSprop + Momentum</strong></p>
<h3 id="梯度更新规则-7">梯度更新规则</h3>
<p>除了像 Adadelta 和 RMSprop 一样存储了过去梯度的平方 vt 的指数衰减平均值 ，也像 momentum 一样保持了过去梯度 mt 的<strong>指数衰减平均值</strong> <span class="math display">\[
m_t=\beta_1m_{t-1}+(1-\beta_1)g_t
\]</span></p>
<p><span class="math display">\[
v_t=\beta_2v_{t-1}+(1-\beta_2){g_t}^2
\]</span></p>
<p>如果 mt 和 vt 被初始化为 0 向量，那它们就会向 0 偏置，所以做了<strong>偏差校正</strong>，通过计算偏差校正后的 mt 和 vt 来抵消这些偏差 <span class="math display">\[
\hat{m_t}=\frac {m_t} {1-{\beta_1}^t}
\]</span></p>
<p><span class="math display">\[
\hat{v_t}=\frac {v_t} {1-{\beta_2}^t}
\]</span></p>
<p><strong>规则</strong> <span class="math display">\[
\theta_{t+1}=\theta_t-\frac {\eta} {\sqrt{\hat{v_t}}+\epsilon}\hat{m_t}
\]</span> <font color=red><strong>建议 β1 ＝ 0.9，β2 ＝ 0.999，ϵ ＝ 10e−8</strong></font></p>
<h3 id="缺点-6">缺点</h3>
<p>并不适合所有</p>
<h3 id="代码-7">代码</h3>
<ul>
<li>beta1 = 0.9</li>
<li>beta2 = 0.999</li>
<li>learning_rate = 1e-3 or 5e-4</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_moment = <span class="number">0</span></span><br><span class="line">second_moment = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dx = computed_gradient(x)</span><br><span class="line">    first_moment = beta1 * first_moment + (<span class="number">1</span>-beta1) * dx  <span class="comment"># Momentum</span></span><br><span class="line">    second_moment = beta2 * second_moment + (<span class="number">1</span>-beta2) * dx *dx <span class="comment">#AdaGrad/RMSProp</span></span><br><span class="line">    x -= learning_rate * first_moment / (np.sqrt(second_moment) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
<p>上面的Adam前几次迭代的步长会非常大，这里增加了偏置矫正项t： 注意t的值会随着迭代次数增加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_moment = <span class="number">0</span></span><br><span class="line">second_moment = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(num_iterations):</span><br><span class="line">    dx = compute_gradient(x)</span><br><span class="line">    first_moment = beta1 * first_moment + (<span class="number">1</span>-beta1) * dx</span><br><span class="line">    second_moment = beta2 * second_moment = （<span class="number">1</span>-beta2) * dx * dx</span><br><span class="line">    first_unbias = first_moment / (<span class="number">1</span> - beta1 ** t) <span class="comment">#偏置纠正</span></span><br><span class="line">    second_unbias = second_moment / (<span class="number">1</span> - beta2 ** t)</span><br><span class="line">    x -= learning_rate * first_unbias / (np.sqrt(second_unbias) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
<h3 id="适用范围-7">适用范围</h3>
<blockquote>
<p>首先，在Adam中动量直接并入了梯度一阶矩（指数加权）的估计。将动量加入RMSProp最直观的方法是将动量应用于缩放后的梯度。其次，Adam包括偏置修正，修正从原点初始化的一阶矩（动量项）和二阶矩（非中心项）</p>
</blockquote>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>考研政治</title>
    <url>/2022/02/23/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202202230945474.jpg" /></p>
<span id="more"></span>
<h2 id="马原">马原</h2>
<blockquote>
<p>恩格斯 &lt;<反杜林论>&gt; 后分类</p>
</blockquote>
<h3 id="马克思主义哲学方法">马克思主义哲学(方法)</h3>
<h4 id="哲学的基本问题不同流派">哲学的基本问题、不同流派</h4>
<h4 id="马哲">马哲</h4>
<ul>
<li>唯物论——世界的本原是什么？</li>
</ul>
<p>一切<strong>客观实在</strong>(物质),不以人的意志而转移，物质决定意识，意志被物质派生出来，</p>
<ul>
<li>辩证法——世界是怎样的？</li>
</ul>
<p>两大总特征: <strong>普遍联系、永恒发展</strong></p>
<blockquote>
<p>事物是怎样联系的？</p>
</blockquote>
<p>一对一对相互交织的联系</p>
<blockquote>
<ol type="1">
<li><p>事物为什么会发展？</p></li>
<li><p>怎样发展？</p></li>
<li><p>往哪里发展？</p></li>
</ol>
</blockquote>
<ol type="1">
<li>对立统一</li>
<li>量变 <span class="math inline">\(\to\)</span> 质变</li>
<li></li>
</ol>
<ul>
<li>认识论——如何认知世界？</li>
</ul>
<blockquote>
<ol type="1">
<li>认识的本质是什么？</li>
<li>认识的过程是怎样的？</li>
<li>认识的结果有什么特点？</li>
</ol>
</blockquote>
<ol type="1">
<li></li>
<li>实践 <span class="math inline">\(\to\)</span> 感性认知(浅) <span class="math inline">\(\to\)</span> 理性认识(深) <span class="math inline">\(\to\)</span> 实践</li>
<li>真理(绝对、相对)，谬识</li>
</ol>
<ul>
<li>唯物史观——人类历史发展规律？</li>
</ul>
<blockquote>
<ol type="1">
<li>历史进程中的决定性力是什么？</li>
<li>历史是什么人创造的？</li>
<li>历史向前发展有什么特点？</li>
</ol>
</blockquote>
<ol type="1">
<li>精神(唯心史观)、物质(唯物史观)</li>
<li>英雄(唯心史观)、人民群众(唯物史观)</li>
<li>规律(决定) <span class="math inline">\(\to\)</span> 统一性、能动(选择) <span class="math inline">\(\to\)</span> 多样性</li>
</ol>
<h3 id="马克思主义政治经济学主体">马克思主义政治经济学(主体)</h3>
<p><strong>选择题</strong></p>
<blockquote>
<p>以资本主义为分界线</p>
</blockquote>
<blockquote>
<ol type="1">
<li>商品价值的本质是什么？</li>
<li>资本主义社会有什么不同？</li>
<li>为什么说资本主义社会存在剥削？</li>
</ol>
</blockquote>
<ol type="1">
<li>交换 劳动 <span class="math inline">\(\to\)</span> 价值</li>
<li>劳动者劳动的成果归资本家所有</li>
<li>剩余价值被资本家无偿占有</li>
</ol>
<h4 id="简单商品经济时期">简单商品经济时期</h4>
<h4 id="发达商品经济时期">发达商品经济时期</h4>
<ul>
<li><font color=red><strong>自由竞争资本主义</strong></font></li>
<li>垄断竞争资本主义</li>
</ul>
<h3 id="科学社会主义理论目的和归宿">科学社会主义理论(目的和归宿)</h3>
<blockquote>
<ol type="1">
<li>社会主义的发展进程</li>
<li>共产主义的基本特征</li>
</ol>
</blockquote>
<ol type="1">
<li>空想 <span class="math inline">\(\to\)</span> 科学 ; 理论 <span class="math inline">\(\to\)</span> 实践</li>
<li>物质财富极大丰富、精神境界极大提高、自由全面</li>
</ol>
<h4 id="社会主义">社会主义</h4>
<h4 id="共产主义">共产主义</h4>
<h2 id="思修法基">思修法基</h2>
<h3 id="思想修养">思想修养</h3>
<h4 id="人生观">人生观</h4>
<p>人生目的</p>
<p>人生态度</p>
<p><strong>人生价值</strong>(分析、选择)</p>
<h4 id="理想信念">理想信念</h4>
<h4 id="中国精神">中国精神</h4>
<p><strong>民族精神(爱国主义)</strong></p>
<p>时代精神(改革创新)</p>
<h4 id="社会主义核心价值观">社会主义核心价值观</h4>
<h3 id="道德修养">道德修养</h3>
<p>上层建筑</p>
<h4 id="基本问题">基本问题</h4>
<h4 id="不同时期的道德">不同时期的道德</h4>
<h4 id="不同领域的道德">不同领域的道德</h4>
<h3 id="法律基础">法律基础</h3>
<h4 id="基础常识">基础常识</h4>
<p>法律运行: 立法-执法-司法-守法</p>
<p>法律体系: 实体法律部门、程序法部门</p>
<p>法治体系: 法律的实施和监督</p>
<p>法治思维</p>
<p>法律权威: 外在 内在</p>
<p>法律权利</p>
<p>法律义务</p>
<h2 id="史纲">史纲</h2>
<blockquote>
<p>政治课里的历史课，归根到底还是政治课</p>
</blockquote>
<p>近代史开端: 1840鸦片战争开始</p>
<p>清朝:</p>
<p>分界线: 1911辛亥革命</p>
<p>中华民国:</p>
<ul>
<li>北洋</li>
</ul>
<p>旧-1919五四运动-新</p>
<p>分界线: 1928(张学良)东北易帜</p>
<ul>
<li>国民</li>
</ul>
<p>近现代史分界线: 1949新中国成立</p>
<h3 id="近代中国的国情">近代中国的国情</h3>
<p>半殖民地半封建</p>
<h3 id="主要矛盾">主要矛盾</h3>
<p>帝国主义-中华民族</p>
<p>封建主义-人民大众</p>
<h3 id="任务">任务</h3>
<p>反帝</p>
<p>反封建</p>
<h3 id="革命的性质">革命的性质</h3>
<blockquote>
<p>决定性质 <span class="math inline">\(\to\)</span> 任务</p>
</blockquote>
<p>资产阶级民主革命</p>
<h3 id="旧民主主义革命1840-1919">旧民主主义革命(1840-1919)</h3>
<p>辛亥革命——第一次完整意义上的资产阶级革命</p>
<ul>
<li>纲领: 三民主义(不反帝、反封不彻底)</li>
<li>精英革命: 没有群众路线</li>
<li>民族资产阶级的软弱性: 没有坚强的领导核心</li>
</ul>
<h3 id="新民主主义革命">新民主主义革命</h3>
<ul>
<li>五四运动——马克思主义广泛传播</li>
<li>中国共产党的成立——坚强的领导核心</li>
<li>大革命——第一次国共合作(北伐战争)</li>
<li>土地革命——农村包围城市、武装夺取政权</li>
<li>全面抗战——第二次国共合作</li>
<li>解放战争——建立新中国</li>
</ul>
<h3 id="新中国时期">新中国时期</h3>
<ul>
<li>过渡时期——1949-1956 新民主主义社会 <span class="math inline">\(\to\)</span> 反资反私</li>
<li>探索时期——1956-1976 基础、准备、条件</li>
<li>改革开放——1978-今 中国特色社会主义道路</li>
<li>新时代——2012-今 全面小康、全面脱贫、现代化、复兴</li>
</ul>
<h2 id="毛中特马克思主义中国化">毛中特(马克思主义中国化)</h2>
<blockquote>
<ol type="1">
<li>分值巨大: 30</li>
<li>时效性</li>
<li>内容多</li>
</ol>
</blockquote>
<h3 id="毛泽东思想">毛泽东思想</h3>
<blockquote>
<p>集体智慧 正确</p>
</blockquote>
<h4 id="理论的形成">理论的形成</h4>
<h4 id="理论内容">理论内容</h4>
<ul>
<li><p>新民主主义革命理论 -1949</p>
<ul>
<li><p>革命路线(what): 无产阶级领导、人民大众、反帝反封反官僚资本主义</p></li>
<li><p>革命纲领</p>
<ul>
<li>政治: 各革命阶级联合专政</li>
<li>经济: 地主、官僚(没收)；民资(保护)</li>
<li>文化: 民族、科学、大众</li>
</ul></li>
<li><p>革命道路(how): 农村包围城市、武装夺取政权</p></li>
<li><p>革命经验: 统一战线、武装斗争、党的建设</p></li>
</ul></li>
<li><p>社会主义改造理论 1949-1956</p>
<ul>
<li>农业</li>
<li>手工业</li>
</ul>
<p>合作化 <span class="math inline">\(\to\)</span> 集体经济(公有制)</p>
<ul>
<li>资本主义工商业 <span class="math inline">\(\to\)</span> 和平赎买、改造资本家</li>
</ul></li>
<li><p>社会主义建设道路的初步探索 1956-1976</p>
<ul>
<li>&lt;<论十大关系>&gt;
<ul>
<li>马克思主义第二次中国化开始</li>
<li>方针: 调动一切积极因素为社会主义服务</li>
<li>指导思想: 独立自主探索符合中国特点的社会主义道路</li>
</ul></li>
<li>&lt;<关于正确处理人民内部矛盾的问题>&gt;
<ul>
<li>基本矛盾 <span class="math inline">\(\to\)</span> 生产力-生产关系、经济基础-上层建筑</li>
<li>主要矛盾 <span class="math inline">\(\to\)</span> 1. 农业-工业; 2. 需要-发展</li>
<li>两类矛盾: 敌我矛盾、人民内部矛盾</li>
</ul></li>
<li>中国工业化道路: 农、轻、重</li>
</ul></li>
</ul>
<h3 id="中特理论体系">中特理论体系</h3>
<h4 id="邓小平理论5-三个代表重要思想6-科学发展观7">邓小平理论5 “三个代表”重要思想6 科学发展观7</h4>
<ul>
<li>(邓小平理论)什么是社会主义？怎样建设社会主义？</li>
<li>(“三个代表”重要思想)建设什么样的党？怎样建设党？</li>
<li>(科学发展观)实现什么样的发展？怎样发展？</li>
</ul>
<h4 id="习近平新时代社会主义思想8-14">习近平新时代社会主义思想8-14</h4>
<ul>
<li>新时代8
<ul>
<li>全面小康社会、全面脱贫</li>
<li>基本实现社会主义现代化</li>
<li>建成社会主义现代化强国、实现中华民族伟大复兴</li>
</ul></li>
<li>总任务9</li>
<li>布局理论10-11
<ul>
<li><font color=red><strong>五位一体</strong></font></li>
<li><strong>四个全面</strong></li>
</ul></li>
<li>内外条件12-14
<ul>
<li>国防</li>
<li>外交</li>
<li>领导</li>
</ul></li>
</ul>
<h3 id="马克思主义中国化">马克思主义中国化</h3>
<h4 id="新文化运动-to-资产阶级民主思想">新文化运动 <span class="math inline">\(\to\)</span> 资产阶级民主思想</h4>
<p>军事、技术(洋务运动) <span class="math inline">\(\to\)</span> 制度 <span class="math inline">\(\to\)</span> 思想文化</p>
<h4 id="十月革命-to-马克思列宁主义">十月革命 <span class="math inline">\(\to\)</span> 马克思列宁主义</h4>
<h4 id="五四运动-to-广泛传播">五四运动 <span class="math inline">\(\to\)</span> 广泛传播</h4>
<h4 id="中共一大-to-无产阶级革命推翻资产阶级">中共一大 <span class="math inline">\(\to\)</span> 无产阶级革命推翻资产阶级</h4>
<h4 id="六届六中全会">六届六中全会&lt;<论新阶段>&gt;</h4>
<p>首次提出"马克思主义中国化"命题</p>
<h4 id="中共七大">中共七大</h4>
<p>实现第一次飞跃 <span class="math inline">\(\to\)</span> <font color=red><strong>毛泽东思想</strong></font></p>
<h4 id="section">&lt;<论十大关系>&gt;(1956)</h4>
<p>第二次"马克思主义中国化"开始</p>
<h4 id="改革开放">改革开放</h4>
<p>实现第二次飞跃 <span class="math inline">\(\to\)</span> <font color=red><strong>中国特设社会主义理论体系</strong></font></p>
<h2 id="当代时政及规划-3810">当代时政及规划 38(10‘)</h2>
<p>单选15-16 2’</p>
<p>多选32-33 4‘</p>
<h3 id="当代世界政治与经济">当代世界政治与经济</h3>
<ul>
<li>当今世界形式: 百年未有之大变局</li>
<li>国际行为体: 大国、欧盟</li>
<li>地区热点问题: 朝韩、伊朗、叙利亚</li>
<li>中国对外战略: 和平发展、合作共赢的新型合作关系、人类命运共同体、一带一路</li>
</ul>
<h3 id="时事政治">时事政治</h3>
<ul>
<li>重大会议
<ul>
<li>国际</li>
<li>国内(两会)、(<strong>党代会</strong>)</li>
</ul></li>
<li>重大改革举措: 雄安、深圳、粤港澳</li>
<li>科技创新: 神州、天宫、嫦娥</li>
<li>整数周年纪念: 事件、人物、政策</li>
</ul>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研政治</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记</title>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>大二暑假计算机网络学习笔记总结 为了408 冲冲冲！</p>
<span id="more"></span>
<h2 id="综述">综述</h2>
<p><strong>计算机网络</strong>：</p>
<ul>
<li>概念：<strong>计算机网络是<font color=red>互联的、自治的</font>计算机集合</strong></li>
<li>组成：
<ul>
<li>组成上：硬件、软件、协议</li>
<li><strong>工作方式上</strong>：
<ul>
<li>边缘部分：客户端</li>
<li>核心部分：服务器、路由</li>
</ul></li>
<li>功能组成上：通信子网、资源子网</li>
</ul></li>
<li>功能
<ul>
<li><strong>数据通信</strong></li>
<li>资源共享</li>
<li>分布式处理：<em>一个任务交给多台计算机</em></li>
<li>提高可靠性：<em>计算机的备胎</em></li>
<li>负载均衡：<em>均摊任务</em></li>
</ul></li>
<li>分类
<ul>
<li><strong>分布范围</strong>：广域网、城域网、局域网、个人区域网</li>
<li>使用者：公用网、专用网</li>
<li>交换技术：电路交换、报文交换、分组交换</li>
<li>拓扑结构：总线型、星型、环形、网状型</li>
<li>传输技术：广播式、点对点</li>
</ul></li>
<li>标准化工作及相关组织
<ul>
<li>标准：
<ul>
<li>法定标准</li>
<li>事实标准</li>
</ul></li>
<li>RFC及其发展为因特网标准的四个阶段(补充):
<ul>
<li>Request for Comment:
<ul>
<li>1.因特尔草案</li>
<li>建议标准(网友评价)</li>
<li>IETF、IAB审核</li>
<li>通过</li>
</ul></li>
</ul></li>
<li>相关组织：ISO、ITU、IEEE、IETF</li>
</ul></li>
<li><strong>性能指标</strong></li>
<li><strong>体系结构与参考模型</strong>
<ul>
<li>OSI参考模型</li>
<li>TCP/IP模型</li>
<li>五层参考模型</li>
</ul></li>
</ul>
<h2 id="基础概念">基础概念</h2>
<ul>
<li>性能指标：
<ul>
<li>速率：数据在发射端的发送速度</li>
<li>带宽：<em>车道宽度</em></li>
<li>吞吐量：单位时间内通过的数据(b/s Kb/s Mb/s)</li>
</ul></li>
<li>时延:
<ul>
<li>发送时延</li>
<li>传播时延</li>
<li>排队时延(等待处理)</li>
<li>处理时延</li>
</ul></li>
<li>时延带宽积： 每秒发送的数据(b Kb Mb)</li>
<li>RTT(往返时延)：<em>数据开始传播 -&gt; 接到并处理完毕 的时间</em></li>
<li>利用率：
<ul>
<li>信道利用率：有数据通过的时间/总时间</li>
<li>网络利用率：信道利用率加权平均值</li>
</ul></li>
</ul>
<h2 id="基础模型">基础模型</h2>
<h3 id="分层结构">分层结构</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th></th>
<th></th>
<th>分层结构</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td>5 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>4/5层接口</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>H4</td>
<td>4 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>3/4层接口</td>
</tr>
<tr class="odd">
<td></td>
<td>H3</td>
<td>3 DATA</td>
<td>3 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>2/3层接口</td>
</tr>
<tr class="odd">
<td>H2</td>
<td>2 DATA</td>
<td>2 DATA</td>
<td>2 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>1/2层接口</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td>原始01机器码</td>
</tr>
</tbody>
</table>
<p>相关概念：</p>
<ul>
<li>对等实体(同一层)：遵循同一协议</li>
<li>下层为上层通过 <strong>接口</strong> 提供 <strong>服务</strong></li>
<li>协议包括：
<ul>
<li>语法：规定传输数据的格式</li>
<li>语义：规定所要完成的功能</li>
<li>同步：规定各种操作的顺序</li>
</ul></li>
</ul>
<p>PCI：协议控制信息</p>
<p>SUD：服务数据单元：垂直提供服务的数据</p>
<p>PDU：协议数据单元：水平对等协议的传送的数据单位</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110241921611.png" alt="PCI-SDU" /><figcaption aria-hidden="true">PCI-SDU</figcaption>
</figure>
<h3 id="osi参考模型">OSI参考模型</h3>
<ul>
<li><p>物 -&gt;物理层</p>
<ul>
<li>定义接口特性</li>
<li>定义传输模式 -&gt; 单工、半双工、双工</li>
<li>定义传输速率</li>
<li>比特同步</li>
</ul></li>
<li><p>联 -&gt;数据链路层</p>
<ul>
<li><p>成帧</p></li>
<li><p>差错控制</p></li>
<li><p>流量控制</p></li>
<li><p>访问接入控制</p></li>
<li><p>主要协议：SDLC、HDLC、PPP、STP</p>
<p><strong><font color=red>帧</font></strong></p></li>
</ul></li>
<li><p>网 -&gt;网络层</p>
<ul>
<li>路由选择 -&gt;最佳路径</li>
<li>流量控制</li>
<li>差错控制</li>
<li>拥塞控制</li>
</ul></li>
</ul>
<p>​ 主要协议：IP、IPX、ICMP、IGMP、ARP、RAFP、DSPF</p>
<p>​ <strong><font color=red>分组（单位：数据报）</font></strong></p>
<ul>
<li><p>淑 -&gt;传输层</p>
<ul>
<li><p>可靠（确认后传输，大数据）、不可靠传输（小数据）</p></li>
<li><p>差错控制</p></li>
<li><p>流量控制（控制速度）</p></li>
<li><p>复用（数据一起打包）、分用（根据端口拆包）</p>
<p><strong><font color=red>数据</font></strong></p></li>
</ul></li>
<li><p>慧 -&gt;会话层</p>
<ul>
<li>建立、管理、终止会话</li>
<li>使用校验点 实现数据同步</li>
</ul></li>
<li><p>试 -&gt;表示层</p>
<ul>
<li>数据格式变换</li>
<li>数据加密解密</li>
<li>数据压缩恢复</li>
</ul></li>
<li><p>用 -&gt;应用层</p>
<ul>
<li>文件传输（FTP）</li>
<li>电子邮件（SMTP）</li>
<li>万维网（HTTP）</li>
</ul></li>
</ul>
<h3 id="tcpip参考模型五层参考模型">TCP/IP参考模型&amp;五层参考模型</h3>
<ul>
<li>OSI参考模型
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul></li>
<li>TCP/IP参考模型
<ul>
<li>应用层(应用层、表示层、会话层)</li>
<li>传输层</li>
<li>网际层</li>
<li>网络接口层(数据链路层、物理层)</li>
</ul></li>
<li>TCP/IP协议栈
<ul>
<li>应用层：HTTP、FTP、DNS</li>
<li>传输层：TCP、UDP</li>
<li>网际层：IP</li>
<li>网络接口层：Ethernet、ATM、Frame Relay</li>
</ul></li>
<li>五层参考模型：
<ul>
<li>应用层 -&gt; 支出各种网络应用 FTP、SMTP、HTTP</li>
<li>传输层 -&gt; 进程-进程的数据传输 TCP、UDP</li>
<li>网络层 -&gt; 源主机到目的主机的数据分组路由与转发 IP、ICMP、OSPF等</li>
<li>数据链路层 -&gt; 把网络层传下来的数据报组装成帧 Ethernet、PPP</li>
<li>物理层 -&gt; 比特传输</li>
</ul></li>
</ul>
<blockquote>
<p>面向连接：第一是建立连接，在此阶段，发出一个建立连接请求。只有在连接建立成功之后，才能开始数据传输，这是第二阶段。接着，当数据传输完毕，必须释放连接。</p>
</blockquote>
<blockquote>
<p>无连接：直接进行数据传输</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th></th>
<th>ISO/OSI参考模型</th>
<th>TCP/IP模型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>网络层</td>
<td>无连接+面向连接</td>
<td>无连接</td>
</tr>
<tr class="even">
<td>传输层</td>
<td>面向连接</td>
<td>无连接+面向连接</td>
</tr>
</tbody>
</table>
<p>Attention:</p>
<ul>
<li>1.OSI定义三点：服务、协议、接口</li>
<li>2.参考模型先于协议</li>
<li>3.TCP/IP设计之初就考虑到异构网互联问题，将IP作为重层次</li>
</ul>
<h2 id="数据通信基础">数据通信基础</h2>
<ul>
<li><p>物理层：</p>
<ul>
<li><p>概念</p></li>
<li><p>四种特性</p>
<ul>
<li>机械特性: 物理连接所采用的规格、接口形状、引脚数目等</li>
<li>电气特性: 线路上信号的电压范围、阻抗匹配、传输速率等</li>
<li>功能特性: 某一电平的意义</li>
<li>规程特性(过程特性): 各条物理线路的工作规程和时序关系</li>
</ul></li>
<li><p><strong>两个定理</strong></p>
<ul>
<li>奈氏准则</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/奈氏准则.png" alt="奈氏准则" /><figcaption aria-hidden="true">奈氏准则</figcaption>
</figure>
<ul>
<li>香农定理</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/香农定理.png" alt="香农定理" /><figcaption aria-hidden="true">香农定理</figcaption>
</figure></li>
<li><p>物理层传输介质</p>
<ul>
<li>导向: 双绞线、同轴电缆、光纤</li>
<li>非导向
<ul>
<li>无线电波 -&gt; 所有方向 -&gt; 手机通信</li>
<li>微波 -&gt; 单一方向 -&gt; 卫星通信</li>
<li>红外线、激光 -&gt; 单一方向</li>
</ul></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181549021.png" /></p></li>
</ul></li>
<li><p>物理层设备</p>
<ul>
<li>中继器: 对信号还原和再生</li>
<li>集线器: 对信号放大转发(冲突域)</li>
</ul></li>
<li><p>术语</p>
<ul>
<li>码元、速率、波特、带宽
<ul>
<li>码元: 固定时长的信号波形 -&gt; 有具体意义(可携带多比特的信息量)</li>
<li>码元传输速率: 1s传输多少个码元 (单位：Baud波特)</li>
<li>信息传输速率: 1s传输多少个比特</li>
<li>宽带: 最高数据率 (天花板)</li>
</ul></li>
<li>数据、信号、信道、信源、信宿</li>
</ul></li>
<li><p>三种通信方式</p>
<ul>
<li>单工</li>
<li>半双工</li>
<li>全双工</li>
</ul></li>
<li><p>两种数据传输方式</p>
<ul>
<li>串行</li>
<li>并行</li>
</ul></li>
<li><p>编码与调制</p>
<ul>
<li><p>信号</p>
<ul>
<li>数字与模拟</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/数字与模拟.png" alt="数字与模拟" /><figcaption aria-hidden="true">数字与模拟</figcaption>
</figure>
<ul>
<li>基带与宽带
<ul>
<li>基带信号：原生信号(信源) -&gt; 弱</li>
<li>宽带信号：调制后的高频信号 -&gt; 强</li>
</ul></li>
</ul></li>
<li><p>编码</p>
<ul>
<li><p><strong>数字数据编码为数字信号</strong></p>
<ul>
<li>1.归零编码：后一半归零</li>
<li>2.非归零编码：后一半归一</li>
<li>3.曼彻色特编码：指定先高后低 -&gt;1 / 先低后高 -&gt; 1</li>
<li>4.差分曼彻色特编码：一半 -&gt; 同1异0 （跳变）</li>
<li>5.反向不归零编码：同1异0（跳变）</li>
<li>6.4B/5B编码：4/5 编码效率：80%</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181543758.png" /></p></li>
<li><p><strong>模拟数据编码为数字信号</strong></p>
<ul>
<li>PCM编码器</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181545988.png" /></p></li>
</ul></li>
<li><p>调制</p>
<ul>
<li><strong>数字数据调制为模拟信号</strong></li>
<li>模拟数据调制为模拟信号</li>
</ul></li>
</ul></li>
</ul>
<h2 id="数据链路层">数据链路层</h2>
<ul>
<li><p>概述和功能</p>
<ul>
<li>概述: （搬运工）将网络层发送给它的数据报，安全无差错的传给它的相邻节点 -&gt; 1.加强物理层传输原始比特流的功能 2.将物理层提供的可能出错的物理连接改造成逻辑上无差错的数据链路</li>
<li>功能
<ul>
<li>为网络层提供服务 -&gt; 1.有确定无连接服务 2.无确定无连接服务 3.有确定面向连接服务（有连接一定有确定）</li>
<li>链路管理 -&gt;建立、维持、释放 -&gt; 面向连接的服务</li>
<li>组帧</li>
<li>流量控制</li>
<li>差错控制（位错/帧错）</li>
</ul></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181601547.png" /></p></li>
<li><p>封装成帧和透明传输</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181611996.png" /></p>
<ul>
<li><p>字符计数法</p></li>
<li><p><strong>字符(节)填充法</strong></p></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181605646.png" /></p>
<ul>
<li><strong>零比特填充法</strong>: 5 '1' 1 '0' 出现五个1 立即填充一个0</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181609585.png" /></p>
<ul>
<li>违规编码法</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181613366.png" /></p>
<p>(由于字节填充法Count字段的脆弱性（其值发生改变将造成灾难性的后果），因此大都使用后两种 -&gt; 2.零比特填充法 3.违规编码法)</p></li>
<li><p><strong>流量控制和可靠传输</strong></p>
<ul>
<li>停止等待协议</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126761.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126073.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126558.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126370.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126711.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291126001.png" /></p>
<ul>
<li>GBN(后退N帧协议)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291148630.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291338853.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291338428.png" /></p>
<ul>
<li>SR(选择重传协议)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291345557.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291346968.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291346155.png" /></p></li>
<li><p>差错控制(比特错)</p>
<blockquote>
<p>传输中的差错都是由于噪声引起的</p>
</blockquote>
<p>全局性: 线路本身电气特性所产生的<strong>随机噪声</strong>，信道固有，随机存在(解决办法: 提高信噪比，对传感器下手)</p>
<p>局部性: 外界的短暂原因所造成的的<strong>冲击噪声</strong>(解决办法: 编码技术)</p>
<p>差错: 位错(比特位出错)、帧错(丢失、重复、失序)</p>
<blockquote>
<p>链路层为网络层提供服务: 无确认无连接服务、有确认无连接服务、有确认面向连接服务</p>
</blockquote>
<ul>
<li><p>检错编码: 奇偶校验码、循环冗余码CRC</p>
<p>奇偶校验码(n-1为信息元 1位校验元): 奇校验码(1的个数为奇数)、偶校验码(1的个数为偶数) 检错能力: 50%</p>
<p>CRC循环冗余码：1.计算生成多项式的阶数并补零 -&gt; 2.补零后除以生成多项式（余数 -&gt; FCS）-&gt; 3.将末尾阶数个零 &lt;- FCS</p></li>
<li><p>纠错编码: 海明码</p>
<p>海明码: 确定校验码位数r -&gt; 确定校验码和数据的位置 -&gt; 求出校验码的值 -&gt; 检错并纠错</p>
<p>海明不等式: <span class="math inline">\(2^r\geq{k+r+1}\)</span></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291445012.png" /></p>
<p>(校验码放在2的次方的位置)</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291446186.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291446089.png" /></p></li>
</ul></li>
<li><p><strong>介质访问控制</strong></p>
<ul>
<li><p>静态划分信道</p>
<ul>
<li><p>信道划分介质访问控制</p>
<ul>
<li>频分多路复用FDM</li>
<li>时分多路复用TDM</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291505030.png" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291505542.png" /></p>
<ul>
<li>波分多路复用WDM</li>
<li>码分多路复用CDM</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202201291505789.png" /></p></li>
</ul></li>
<li><p>动态分配信道</p>
<ul>
<li>随机访问介质控制
<ul>
<li>ALOHA协议</li>
<li>CSMA协议</li>
<li>CSMA/CD协议</li>
<li>CSMA/CA协议</li>
</ul></li>
<li>轮询访问介质控制
<ul>
<li>令牌传递协议</li>
</ul></li>
</ul></li>
</ul></li>
<li><p><strong>局域网、以太网802.3、无线局域网802.11</strong></p></li>
<li><p>广域网使用的链路层协议</p>
<ul>
<li>PPP协议</li>
<li>HDLC协议</li>
</ul></li>
<li><p>链路层设备</p>
<ul>
<li>网桥</li>
<li>交换机</li>
<li>冲突域和广播域</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>408考研</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>重庆恰恰恰</title>
    <url>/2022/02/10/%E9%87%8D%E5%BA%86%E6%81%B0%E6%81%B0%E6%81%B0/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202202102139187.jpg" /></p>
<h1 id="情人节-恰恰恰s-plan">情人节 ^ ^ 恰恰恰's Plan</h1>
<span id="more"></span>
<h2 id="好吃gai攻略">好吃gai攻略</h2>
<h3 id="观音桥好吃gai烟火气接地气">观音桥好吃gai(烟火气&amp;接地气)</h3>
<ul>
<li>炒年糕-￥12</li>
<li>丁家坡洋芋-￥10</li>
<li>油茶-￥8</li>
<li>烤米皮-￥13</li>
<li>茄盒-￥35</li>
</ul>
<h3 id="解放碑八一好吃gai">解放碑八一好吃gai</h3>
<ul>
<li>好又来(粉)-￥10</li>
<li>鲍师傅</li>
</ul>
<h3 id="时代天gai大型餐馆-吃的超级多">时代天gai(大型餐馆 吃的超级多)</h3>
<ul>
<li>脆皮五花</li>
<li>芝士冰淇淋- ￥23</li>
<li>芝士蛋糕- ￥98</li>
</ul>
<h2 id="逛gai攻略">逛gai攻略</h2>
<p><strong>重庆购物去哪里---三峡广场商圈</strong></p>
<p>三峡广场商圈是重庆沙坪坝最主要的商圈，具体范围包括三峡广场、绿色文化艺术广场、南开步行街，有重庆百货、王府井百货、新世纪百货、凯德广场等知名大商场。周边还有多所中学、高校，庞大的学生群体是不可忽视的消费群体，因此有许多学生淘货的好地方，比如地下商场，专卖类似韩国东大门的衣服，价格20到200不等。接地气的美食也特别多，阿坤甜品、老麻抄手、好又来酸辣粉在这里都可以找到。</p>
<p><strong>重庆购物去哪里---南坪商圈</strong></p>
<p>南坪近年来经济发展迅猛，商贸增长尤其令人瞩目，是重庆经济发展最快地区之一。在新建成的重庆南坪商圈步行街后，业态已经有所变化。目前，南坪商圈是以传统百货为主。沿着转盘附近打探，从百盛算起，相隔不到100米，是重百；步行街更是汇集了大量的百货、超市军团，比如新世纪，另还有麦德龙、诺玛特、好又多率队的外资军团。</p>
<p><strong>重庆购物去哪里---杨家坪商圈</strong></p>
<p>杨家坪是重庆的老牌购物商圈，步行街、老字号美食、百货店满满的老重庆韵味，比较年长的重庆人都爱在这里逛街。现在，随着万象城、龙湖西城天街等大商场的入驻，杨家坪一下子有了高大上的一面，越来越时髦了。喜欢舒适自在可以在步行街逛逛，喜欢气质、冷艳则选择万象城、西城天街，可以说是很多元化了。</p>
]]></content>
      <categories>
        <category>吃喝玩乐</category>
      </categories>
      <tags>
        <tag>重庆</tag>
      </tags>
  </entry>
</search>
