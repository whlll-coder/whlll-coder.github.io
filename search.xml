<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker命令回顾</title>
    <url>/2021/10/24/Docker%E5%91%BD%E4%BB%A4%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p>Docker 命令备忘录 (初阶)</p>
<span id="more"></span>
<h2 id="设置docker自启动">设置docker自启动</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<h2 id="docker的启动停止重启">docker的启动、停止、重启</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure>
<h2 id="指定-docker-镜像源">指定 Docker 镜像源</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h2 id="阿里云镜像加速">阿里云镜像加速</h2>
<ol type="1">
<li>登录阿里云服务器，找到<code>容器镜像服务</code></li>
<li>设置Registry登录密码</li>
<li>找到镜像加速器</li>
<li>配置使用</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: <span class="section">[&quot;https://pi9dpp60.mirror.aliyuncs.com&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="docker-镜像">docker 镜像</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line">docker rmi -f xxxxxx</span><br></pre></td></tr></table></figure>
<h2 id="docker-拉取服务镜像">docker 拉取服务镜像</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker push</span><br></pre></td></tr></table></figure>
<h2 id="docker-创建一个容器">docker 创建一个容器</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Usage: docker run <span class="section">[OPTIONS]</span> IMAGE <span class="section">[COMMAND]</span> <span class="section">[ARG...]</span>  </span><br><span class="line"> </span><br><span class="line">  -d, <span class="attr">--detach</span>=<span class="literal">false</span>         指定容器运行于前台还是后台，默认为<span class="literal">false</span>   </span><br><span class="line">  -i, <span class="attr">--interactive</span>=<span class="literal">false</span>   打开STDIN，用于控制台交互  </span><br><span class="line">  -t, <span class="attr">--tty</span>=<span class="literal">false</span>            分配tty设备，该可以支持终端登录，默认为<span class="literal">false</span>  </span><br><span class="line">  -u, <span class="attr">--user</span>=<span class="string">&quot;&quot;</span>              指定容器的用户  </span><br><span class="line">  -a, <span class="attr">--attach</span>=[]            标准输入输出流和错误信息（必须是以非docker run -d启动的容器）</span><br><span class="line">  -w, <span class="attr">--workdir</span>=<span class="string">&quot;&quot;</span>           指定容器的工作目录 </span><br><span class="line">  -c, <span class="attr">--cpu-shares</span>=<span class="number">0</span>        设置容器CPU权重，在CPU共享场景使用  </span><br><span class="line">  -e, <span class="attr">--env</span>=[]               指定环境变量，容器中可以使用该环境变量  </span><br><span class="line">  -m, <span class="attr">--memory</span>=<span class="string">&quot;&quot;</span>            指定容器的内存上限  </span><br><span class="line">  -P, <span class="attr">--publish-all</span>=<span class="literal">false</span>    指定容器暴露的端口  </span><br><span class="line">  -p, <span class="attr">--publish</span>=[]           指定容器暴露的端口 </span><br><span class="line">  -h, <span class="attr">--hostname</span>=<span class="string">&quot;&quot;</span>          指定容器的主机名  </span><br><span class="line">  -v, <span class="attr">--volume</span>=[]            给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class="line">  <span class="attr">--volumes-from</span>=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">  <span class="attr">--cap-add</span>=[]               添加权限，权限清单详见：http://linux.die.net/man/<span class="number">7</span>/capabilities  </span><br><span class="line">  <span class="attr">--cap-drop</span>=[]              删除权限，权限清单详见：http://linux.die.net/man/<span class="number">7</span>/capabilities  </span><br><span class="line">  <span class="attr">--cidfile</span>=<span class="string">&quot;&quot;</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class="line">  <span class="attr">--cpuset</span>=<span class="string">&quot;&quot;</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class="line">  <span class="attr">--device</span>=[]                添加主机设备给容器，相当于设备直通  </span><br><span class="line">  <span class="attr">--dns</span>=[]                   指定容器的dns服务器  </span><br><span class="line">  <span class="attr">--dns-search</span>=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class="line">  <span class="attr">--entrypoint</span>=<span class="string">&quot;&quot;</span>            覆盖image的入口点  </span><br><span class="line">  <span class="attr">--env-file</span>=[]              指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class="line">  <span class="attr">--expose</span>=[]                指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class="line">  <span class="attr">--link</span>=[]                  指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class="line">  <span class="attr">--lxc-conf</span>=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class="line">  <span class="attr">--name</span>=<span class="string">&quot;&quot;</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class="line">  <span class="attr">--net</span>=<span class="string">&quot;bridge&quot;</span>             容器网络设置:</span><br><span class="line">                                bridge 使用docker daemon指定的网桥     </span><br><span class="line">                                host     //容器使用主机的网络  </span><br><span class="line">                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class="line">                                none 容器使用自己的网络（类似<span class="attr">--net</span>=bridge），但是不进行配置 </span><br><span class="line">  <span class="attr">--privileged</span>=<span class="literal">false</span>         指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class="line">  <span class="attr">--restart</span>=<span class="string">&quot;no&quot;</span>             指定容器停止后的重启策略:</span><br><span class="line">                                no：容器退出时不重启  </span><br><span class="line">                                on-failure：容器故障退出（返回值非零）时重启 </span><br><span class="line">                                always：容器退出时总是重启  </span><br><span class="line">  <span class="attr">--rm</span>=<span class="literal">false</span>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class="line">  <span class="attr">--sig-proxy</span>=<span class="literal">true</span>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理 </span><br></pre></td></tr></table></figure>
<p><strong>eg.</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@CentOS ~]</span><span class="comment"># docker run -p 8090:8080 -p 50000:50000 --restart always --link Redis:redis --name jenkins -v /home/jenkins:/home/jenkins_home --privileged=true dokcer.io/jenkins/jenkins</span></span><br></pre></td></tr></table></figure>
<h2 id="查看-docker-容器">查看 docker 容器</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<h2 id="启动停止重启删除docker容器">启动、停止、重启、删除docker容器</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker start xxxxxx</span><br><span class="line"></span><br><span class="line">docker stop xxxxxx</span><br><span class="line"></span><br><span class="line">docker restart xxxxxx</span><br><span class="line"></span><br><span class="line">docker rm xxxxxx</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -a- q)</span><br><span class="line">-a 查看全部的容器，包括没有运行的</span><br><span class="line">-q 之查看容器的标识</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像-元数据">查看镜像 元数据</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
<h2 id="进入docker容器">进入docker容器</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker exec -it xxxxxx</span><br></pre></td></tr></table></figure>
<ul>
<li><p>ctrl+d 退出容器且关闭</p></li>
<li><p>ctrl+p+q 退出容器但不关闭</p></li>
</ul>
<h2 id="查看容器日志">查看容器日志</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 行数 容器名</span><br></pre></td></tr></table></figure>
<h2 id="docker-网络操作">docker 网络操作</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker network create mynet</span><br><span class="line"></span><br><span class="line">docker network inspect mynet</span><br><span class="line"></span><br><span class="line">docker network disconnet mynet 容器ID</span><br><span class="line"></span><br><span class="line">docker network rm mynet</span><br></pre></td></tr></table></figure>
<h2 id="docker-拷贝操作">docker 拷贝操作</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.文件从宿主机拷贝到容器:    docker cp 宿主机文件路径   容器名:存放路径</span></span><br><span class="line">docker cp /home/jenkins/test.txt jenkins:/var/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件从容器拷贝到宿主机   docker cp 容器名:要拷贝的文件路径  宿主机存放路径  </span></span><br><span class="line">docker cp jenkins:/var/jenkins_home/test.txt /home/jenkins</span><br></pre></td></tr></table></figure>
<h2 id="docker-数据卷">docker 数据卷</h2>
<h3 id="创建数据卷">创建数据卷</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷的名称</span><br></pre></td></tr></table></figure>
<h3 id="查看数据卷详情">查看数据卷详情</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>
<h3 id="查看全部数据卷">查看全部数据卷</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
<h3 id="删除数据卷">删除数据卷</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷的名称</span><br></pre></td></tr></table></figure>
<h3 id="数据卷映射">数据卷映射</h3>
<ul>
<li>直接使用命令挂载</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录：容器目录</span><br><span class="line"> </span><br><span class="line"><span class="section">[root@iZ2zeg4ytp0whqtmxbsqiiZ home]</span><span class="comment"># docker run -it -v /home/ceshi:/home centos /bin/bash</span></span><br></pre></td></tr></table></figure>
<ul>
<li>匿名 具名挂载</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过数据卷名称进行映射 ,使用名称进行映射时，我们需要先来创建出数据卷，才能使用名称进行映射。回讲容器内部自带的文件，复制到默认的存放路径中</span></span><br><span class="line">docker run -d -p 宿主机端口号:容器端口号 -v 数据卷名称:容器内部路径 --name 自定义容器名称 镜像的id <span class="comment"># -P 随机指定端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过路径进行映射，直接指定一个路径作为数据卷的存放地址，这个路径下是空的。</span></span><br><span class="line">docker run -d -p 宿主机端口号：容器端口号 -v 宿主机路径:容器内部路径 --name 自定义容器名称 镜像的id <span class="comment"># -P 随机指定端口</span></span><br></pre></td></tr></table></figure>
<h2 id="dockerfile-自定义镜像">dockerfile 自定义镜像</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">from: 指定当前自定义镜像的依赖环境</span><br><span class="line">copy: 将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir: 声明镜像的默认工作目录</span><br><span class="line">run:执行的命令，可以编写多个</span><br><span class="line">cmd:需要执行的命令（再workdir下执行，cmd可以写多个，只以最后一个为准）</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy springboot.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure>
<p><strong>eg.</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 编写Dockerfile的文件</span></span><br><span class="line"><span class="section">[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]</span><span class="comment"># cat mydockerfile-centos </span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER xiaofan&lt;594042358@qq.com&gt;</span><br><span class="line"> </span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH     <span class="comment"># 镜像的工作目录</span></span><br><span class="line"> </span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"> </span><br><span class="line">EXPOSE 80</span><br><span class="line"> </span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="comment"># 2. 通过这个文件构建镜像</span></span><br><span class="line"><span class="comment"># 命令 docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[root@iZ2zeg4ytp0whqtmxbsqiiZ dockerfile]</span><span class="comment"># docker build -f mydockerfile-centos -t mycentos:0.1 .</span></span><br><span class="line"> </span><br><span class="line">Successfully built d2d9f0ea8cb2</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CMD 和ENTRYPOINT区别</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">CMD         <span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效可被替代</span></span><br><span class="line">ENTRYPOINT      <span class="comment"># 指定这个容器启动的时候要运行的命令， 可以追加命令</span></span><br></pre></td></tr></table></figure>
<h3 id="制作镜像">制作镜像</h3>
<p>编写完成Dockerfile后需要通过命令将其制作成为镜像，并且要在Dockerfile的当前目录下执行该命令，之后就以可以使用docker images 查看自己制作好的镜像。注意最后有一个.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名称<span class="section">[:tag]</span> .</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>容器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM笔记</title>
    <url>/2021/10/24/JVM%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>JVM 初探小笔记</p>
<span id="more"></span>
<h1 id="jvm-探究">JVM 探究</h1>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110251637935.png" /></p>
<ul>
<li>对 JVM 的理解 java8虚拟机和之前的变化更新?</li>
<li>什么是OOM，什么是栈溢出 StackOverflowError? 怎么分析？</li>
<li>JVM的常用调优参数有哪些？</li>
<li>内存快照如何抓取，怎么分析Dump文件？</li>
<li>谈谈对JVM中，类加载器你的认识？</li>
</ul>
<h3 id="jvm的位置">1.JVM的位置</h3>
<p>操作系统之上 -&gt; 操作系统的代理</p>
<h3 id="jvm的体系结构">2.JVM的体系结构</h3>
<p>Class File -&gt; Class Loader -&gt; Runtime Data Area(Method Area &amp; Stack &amp; Native Method Stack &amp; Heap &amp; program counter) &lt;-&gt; 执行引擎 &lt;-&gt; 本地方法接口 &lt;- 本地方法库</p>
<h3 id="类加载器">3.类加载器</h3>
<p>作用：加载 Class 文件 -&gt;</p>
<p>1.虚拟机自带的加载器</p>
<p>2.启动类(根)加载器</p>
<p>3.扩展类加载器</p>
<p>4.应用程序加载器</p>
<h3 id="双亲委任机制">4.双亲委任机制</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       1.类加载器收到类加载的请求</span></span><br><span class="line"><span class="comment">       2.将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</span></span><br><span class="line"><span class="comment">       3.启动类加载器检查是否能够加载当前这个类，能加载就结束，使用当前的加载器，否则就抛出异常，通知子加载器进行加载</span></span><br><span class="line"><span class="comment">       4.重复 3 过程</span></span><br><span class="line"><span class="comment">       Class not Found ~  </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="沙箱安全机制">5.沙箱安全机制</h3>
<p><strong>组成沙箱的基本组件:</strong></p>
<ul>
<li>字节码校验器(bytecode verifier) :确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li>
</ul>
<hr />
<ul>
<li>类裝载器(class loader) :其中类装载器在3个方面对Java沙箱起作用 它防止恶意代码去干涉善意的代码; 它守护了被信任的类库边界;</li>
</ul>
<hr />
<ul>
<li>它将代码归入保护域,确定了代码可以进行哪些操作。 虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。 类装载器采用的机制是双亲委派模式。
<ul>
<li>1.从最内层JVM自带类加载器开始加载,外层恶意同名类得不到加载从而无法使用;</li>
<li>2.由于严格通过包来区分了访问域,外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li>
</ul></li>
</ul>
<hr />
<ul>
<li>存取控制器(access controller) :存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定,可以由用户指定。</li>
</ul>
<hr />
<ul>
<li>安全管理器(security manager) : 是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li>
</ul>
<hr />
<ul>
<li>安全软件包(security package) : java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括:
<ul>
<li>安全提供者</li>
<li>消息摘要</li>
<li>数字签名</li>
<li>加密</li>
<li>鉴别 ###6.Native</li>
</ul></li>
</ul>
<p>native:凡是带了native关键字的，说明java的作用范围达不到了，<strong>回去调用底层C语言的库</strong> -&gt; 会进入 <strong>本地方法栈</strong> 调用本地方法接口 <strong>JNI(Java Native Interface)</strong> JNI作用：开拓Java的使用，融合C &amp; C++ 它在内存中开辟了一块标记区域：Native Method Stack,登记native方法 在最终执行的时候，加载本地方法库中的方法通过JNI</p>
<h3 id="pc寄存器">7.PC寄存器</h3>
<p>程序计数器(Program Counter Register):每个线程都有一个程序计数器，是线程私有的，就是一个指针, 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计</p>
<h3 id="方法区">8.方法区</h3>
<p>保存在着被加载过的每一个类的信息；这些信息由类加载器在加载类的时候，从类的源文件中抽取出来；static变量信息也保存在方法区中；</p>
<p>可以看做是将类（Class）的元数据，保存在方法区里；</p>
<p>方法区是线程共享的；当有多个线程都用到一个类的时候，而这个类还未被加载，则应该只有一个线程去加载类，让其他线程等待；</p>
<p>方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。jvm也可以允许用户和程序指定方法区的初始大小，最小和最大限制；</p>
<p>方法区同样存在垃圾收集，因为通过用户定义的类加载器可以动态扩展Java程序，这样可能会导致一些类，不再被使用，变为垃圾。这时候需要进行垃圾清理</p>
<h3 id="栈">9.栈</h3>
<h3 id="三种jvm">10.三种JVM</h3>
<ul>
<li>Sun公司HotSpot Java Hotspot™ 64-Bit Server VM (build 25.181-b13,mixed mode)</li>
<li>BEA JRockit</li>
<li>IBM J9VM</li>
</ul>
<p>我们学习都是: Hotspot</p>
<h3 id="堆">11.堆</h3>
<p>Heap 堆内存的大小是可以调节的</p>
<p>类加载器读取了文件后，一般会把什么放在堆中? -&gt; 类、方法、常量、变量~ 保存我们所有引用类型的真实对象；堆内存中还要细分为三个区：</p>
<ul>
<li>新生区</li>
<li>养老区</li>
<li>永久区</li>
</ul>
<p>###12.新生区、养老区</p>
<p><strong>新生区</strong></p>
<ul>
<li>类：诞生 和成长的地方，甚至死亡；</li>
<li>伊甸园 所有的对象都是在伊甸园区new出来的</li>
<li>幸存者区(0,1)</li>
</ul>
<p><strong>养老区</strong> 新生区存活下来的</p>
<h3 id="永久区">13.永久区</h3>
<p>这个区域常驻内存，用来存放JDK自身携带的Class对象，Interface元数据，存储的是java运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭JVM虚拟就会释放这个区域的内存</p>
<ul>
<li>jdk1.6之前：永久代，常量池在方法区</li>
<li>jdk1.7 ：永久代，去永久代 ，常量池在堆中</li>
<li>jdk1.8之后：无永久代，常量池在元空间</li>
</ul>
<h3 id="堆内存调优">14.堆内存调优</h3>
<h3 id="gc">15.GC</h3>
<p>JVM在进行GC时，并不是对这三个区统一回收,大部分时候，回收都是新生代</p>
<ul>
<li>新生代</li>
<li>幸存区</li>
<li>老年区</li>
</ul>
<p>GC两种类: 轻GC(普通GC)、重GC(全局GC)</p>
<p>GC题目：</p>
<ul>
<li>JVM的内存模型和分区 -&gt; 详细到每个分区放什么</li>
<li>堆里面的分区有哪些？Eden, form , to , 老年区，有什么特点</li>
<li>GC的算法有哪些？标记清除法，标记压缩，复制算法，引用计数器，怎么用</li>
<li>轻GC和重GC分别在什么时候发生</li>
</ul>
<p>引用计数法：</p>
<p>常用算法</p>
<h3 id="jmm">16.JMM</h3>
<h3 id="总结">17.总结</h3>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Jasmin</title>
    <url>/2021/10/03/Jasmin/</url>
    <content><![CDATA[<p>大二下 计组 Jasmin 作弊小技巧</p>
<span id="more"></span>
<blockquote>
<p>这篇文章主要教你jasmin的环境的搭建,基本编译语法,以及如何从java快速编写jasmin程序,以应付课程任务,鉴于网上相关资源太少,也没什么人研究这个,写自己的第一篇Blog,回忆一下jasmin的学习过程吧0.0</p>
</blockquote>
<h2 id="jasmin环境搭建与基本编译操作"><strong>jasmin环境搭建与基本编译操作:</strong></h2>
<p>首先您只需要支付5积分便可从我分享的资源下载jasmin并获得本人编写的部分jasmin例程供你学习.链接附文章末尾</p>
<h2 id="准备工作">准备工作</h2>
<p>下载jdk并配置好环境变量,命令行输入java --version检查是否成功</p>
<h2 id="jdk安装验证"><img src="https://img-blog.csdnimg.cn/20210605001508591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jdk安装验证" /></h2>
<p>jasmin内部文件+examples例程: <img src="https://img-blog.csdnimg.cn/20210604233032443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jasmin软件" /><img src="https://img-blog.csdnimg.cn/20210604235242822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="examples例程" /></p>
<h2 id="编译步骤"><strong>编译步骤:</strong></h2>
<ul>
<li>1.win+R 输入cmd打开命令行操作界面,打开jasmin文件夹所在目录:这里我将它放在D下方便操作</li>
<li>2.输入:java -jar jasmin.jar examples2.j(ps:q2.j为笔者所写的冒泡排序)编译,(Generated编译成功)生成class执行文件.<img src="https://img-blog.csdnimg.cn/20210604235616851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="编译" /></li>
<li>3.输入:java q2运行(q2对应代码中的q2类,如果代码中你给debug,那么它编译之后便生产的debug.class可执行文件)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> q2</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 20</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">new java/util/Scanner</span></span><br><span class="line"><span class="function">dup</span></span><br><span class="line"><span class="function">getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">astore_0</span><br><span class="line"></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">newarray <span class="keyword">int</span></span><br><span class="line">astore_1</span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore_2</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot;input:&quot;</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">Loadarray:</span><br><span class="line">aload_0</span><br><span class="line">invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">istore_3</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload_2</span><br><span class="line">iload_3</span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">iinc <span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">iload_2</span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loadarray</span><br><span class="line"></span><br><span class="line">bubsort:</span><br><span class="line">aload_1</span><br><span class="line">arraylength</span><br><span class="line">istore <span class="number">4</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">11</span></span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">5</span></span><br><span class="line"></span><br><span class="line">Loop_1:</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">6</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">if_icmplt Loop_2</span><br><span class="line">goto output</span><br><span class="line">Loop_2:</span><br><span class="line">iload <span class="number">11</span></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">10</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">10</span></span><br><span class="line">if_icmplt exchange_judge</span><br><span class="line">goto else_1</span><br><span class="line">exchange_judge:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">iadd</span><br><span class="line">istore <span class="number">7</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">if_icmpgt exchange</span><br><span class="line">goto else_2</span><br><span class="line">exchange:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">8</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">9</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">9</span></span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iload <span class="number">8</span></span><br><span class="line">iastore</span><br><span class="line">goto else_2</span><br><span class="line"></span><br><span class="line">else_1:</span><br><span class="line">iinc <span class="number">5</span> <span class="number">1</span></span><br><span class="line">goto Loop_1</span><br><span class="line"></span><br><span class="line">else_2:</span><br><span class="line">iinc <span class="number">6</span> <span class="number">1</span></span><br><span class="line">goto Loop_2</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">ldc <span class="string">&quot;order:&quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">12</span></span><br><span class="line">Loop_3:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">13</span></span><br><span class="line">getstatic java/lang/System.out Ljava/io/PrintStream;</span><br><span class="line">iload <span class="number">13</span></span><br><span class="line">invokevirtual java/io/PrintStream/print(I)V</span><br><span class="line">ldc <span class="string">&quot; &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iinc <span class="number">12</span> <span class="number">1</span></span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loop_3</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot; whlll  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">ldc <span class="string">&quot; 19041420  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">Print:</span><br><span class="line">astore <span class="number">2</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">ret <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<p><em>请忽视博主的学号姓名0.0</em></p>
<ul>
<li>4.运行结果:<img src="https://img-blog.csdnimg.cn/20210605001002661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="运行结果" /> So easy!</li>
</ul>
<h2 id="当你会java后情况就变得不一样了"><strong>当你会java后,情况就变得不一样了:</strong></h2>
<p>当你有一个约瑟夫环的java代码+javap <em>约瑟夫环 java:</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> YSF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 500个小孩围一圈，数到3的退出，问剩下最后的小孩原来是多少号？</span></span><br><span class="line"><span class="comment"> * author@</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YueSeFuHuan</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Scanner sca = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入该游戏的参与人数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = sca.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;输入数到退出的数字：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> m = sca.nextInt();</span><br><span class="line">		sca.close();</span><br><span class="line">		<span class="keyword">int</span> len = n;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (len &gt;= m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i % n] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123; <span class="comment">// 这里判断是否被圈出去</span></span><br><span class="line">				<span class="keyword">if</span> (j % m == <span class="number">0</span>)</span><br><span class="line">				&#123; <span class="comment">// 这里判断是否报的数相同，是则退出该位置，且下一位重新报数</span></span><br><span class="line">				<span class="comment">// System.out.print(a[i%n]+&quot;,&quot;);</span></span><br><span class="line">					a[i % n] = -<span class="number">1</span>;</span><br><span class="line">					i++;</span><br><span class="line">					j = <span class="number">1</span>;</span><br><span class="line">					len--;</span><br><span class="line">				&#125; <span class="keyword">else</span></span><br><span class="line">				&#123; <span class="comment">// 不相同则继续</span></span><br><span class="line">					i++;</span><br><span class="line">					j++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span></span><br><span class="line">			&#123; <span class="comment">// 表示该位置已被圈出，跳向下一位</span></span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[k] &gt; <span class="number">0</span>)</span><br><span class="line">				System.out.print(a[k] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;     whllll 19041420&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>eclipse配置好javap插件(java提供的一个用来查看java字节码的工具),那么你将得到:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;YueSeFuHuan.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YSF</span>.<span class="title">YueSeFuHuan</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> YSF.YueSeFuHuan();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">16</span>                 <span class="comment">// class java/util/Scanner</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: getstatic     #<span class="number">18</span>                 <span class="comment">// Field java/lang/System.in:Ljava/io/InputStream;</span></span><br><span class="line">       <span class="number">7</span>: invokespecial #<span class="number">24</span>                 <span class="comment">// Method java/util/Scanner.&quot;&lt;init&gt;&quot;:(Ljava/io/InputStream;)V</span></span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">14</span>: ldc           #<span class="number">31</span>                 <span class="comment">// String 输入该游戏的参与人数：</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">27</span>: ldc           #<span class="number">43</span>                 <span class="comment">// String 输入数到退出的数字：</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual #<span class="number">45</span>                 <span class="comment">// Method java/util/Scanner.close:()V</span></span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span>, -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span>           #<span class="number">48</span>                 <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic  #<span class="number">50</span>                 <span class="comment">// Method java/lang/String.valueOf:(I)Ljava/lang/String;</span></span><br><span class="line">     <span class="number">166</span>: invokespecial #<span class="number">56</span>                 <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">169</span>: ldc           #<span class="number">58</span>                 <span class="comment">// String ,</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual #<span class="number">60</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">     <span class="number">174</span>: invokevirtual #<span class="number">64</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">     <span class="number">177</span>: invokevirtual #<span class="number">68</span>                 <span class="comment">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">192</span>: ldc           #<span class="number">71</span>                 <span class="comment">// String      whllll 19041420</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>下一步:</strong>修改为jasmin的标准代码以及结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> YSF</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 10</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">       0: new java/util/Scanner</span></span><br><span class="line"><span class="function">       3: dup</span></span><br><span class="line"><span class="function">       4: getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">       <span class="number">7</span>: invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">14</span>: ldc <span class="string">&quot;Enter the number of players in the game: &quot;</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">27</span>: ldc <span class="string">&quot;Enter the number to the exit number:&quot;</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual java/util/Scanner/close()V</span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span> -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span> <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span> java/lang/StringBuilder</span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic java/lang/String/valueOf(I)Ljava/lang/String;</span><br><span class="line">     <span class="number">166</span>: invokespecial java/lang/StringBuilder/&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">169</span>: ldc <span class="string">&quot;,&quot;</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual java/lang/StringBuilder/append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">     <span class="number">174</span>: invokevirtual java/lang/StringBuilder/toString()Ljava/lang/String;</span><br><span class="line">     <span class="number">177</span>: invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span> <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">192</span>: ldc <span class="string">&quot;     whllll 19041420&quot;</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<h2 id="部分规则">部分规则:</h2>
<ol type="1">
<li>'#+数字' 替换为 'javap给的注释内容'(#16 // class java/util/Scanner)</li>
<li>将 . 替换为 /</li>
<li>去掉 " "(双引号) <em>具体参考约瑟夫环案例</em></li>
</ol>
<h2 id="最后"><strong>最后:</strong></h2>
<p>一段jasmin代码就搞定了,快速完成了您的课程任务0.0 只要把它放在examples文件夹目录下,后缀名改为.j,按上述操作即可编译运行啦~</p>
<h2 id="笔者寄语"><strong>笔者寄语:</strong></h2>
<p>jasmin作为java的独立的汇编语言,不同于java的字节码依附于java本身代码而存在,从开发上必然没有高级语言的复用性而带来的简洁优美,但其更有助于初学者学习,了解高级语言的更下层的解释,如何实现上层的功能.jasmin的语法更接近于个人计算机RISIC的体系架构,例如先装载再使用的高并发性...虽然网上都说学这玩意儿没啥意思 笔者也是因为课程要求才涉及它,这点心得希望成为那些觉得它还有点意思的人的一点动力吧0.0</p>
<p>whlll的jasmin软件+样例程序链接: <a href="https://download.csdn.net/download/qq_45893516/19393587">jasmin+本人写的一些样例程序仅供学习参考</a></p>
<p>参考书籍:计算机组成及汇编语言原理(第十章) 机械工业出版社 (美)Patrick Juola 著</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
        <tag>Jasmin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kmeans算法初探</title>
    <url>/2021/10/30/Kmeans%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>实验室有一个项目用到了Kmeans算法的思想 但是靠的是纯纯的人力 能不能用机器学习中的Kmeans来彻底实现呢？</p>
<span id="more"></span>
<h2 id="kmeans-info">KMEANS INFO</h2>
<blockquote>
<p>有<strong>四个牧师</strong>去郊区布道，一开始牧师们随意选了几个布道点，并且把这几个布道点的情况公告给了郊区所有的<strong>村民</strong>，于是每个村民到离自己家最近的布道点去听课。听课之后，大家觉得距离太远了，于是<strong>每个牧师统计了一下自己的课上所有的村民的地址，搬到了所有地址的中心地带</strong>，并且在海报上更新了自己的布道点的位置。牧师每一次移动不可能离所有人都更近，有的人发现A牧师移动以后自己还不如去B牧师处听课更近，于是每个村民又去了离自己最近的布道点……就这样，牧师每个礼拜更新自己的位置，<strong>村民根据自己的情况选择布道点</strong>，最终稳定了下来。</p>
</blockquote>
<ul>
<li>村民牧师解释
<ul>
<li>四个牧师: <font color=red>K(种类 ML中叫类聚中心)</font></li>
<li>村民: K种样本集合</li>
<li>牧师更改布道点: <font color=red>更改类聚中心位置</font></li>
<li>村民根据自己情况选择布道点: 迭代已达到稳定</li>
</ul></li>
</ul>
<h2 id="kmeans-details">KMEANS DETAILS</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301559400.gif" /></p>
<ul>
<li><p>1.初始化K个样本作为初试类聚中心a = a1、a2、a3、a4、a5</p></li>
<li><p>2.针对每个样本中的xi计算到每个样本类聚中心的距离(欧氏距离)最小值<span class="math inline">\(d=\sqrt{\sum_{i=0}^N(x_{1i}-x_{2i})^2}\)</span>，分到对应的类聚中心的类中</p></li>
<li><p>3.针对每个类别ai,重新计算它的类聚中心</p></li>
</ul>
<p><span class="math display">\[
a_j=\frac1{|C_i|}\sum{x}(x\epsilon{C_i})
\]</span></p>
<ul>
<li>4.重复上面 2 3 两步操作，直到达到某个中止条件（<strong>迭代次数</strong>、<strong>最小误差变化</strong>等）</li>
</ul>
<h2 id="shortcoming">SHORTCOMING</h2>
<ul>
<li>K 值需要人为设定，不同 K 值得到的结果不一样 (<strong>Gap statistic</strong>)</li>
<li>对初始的簇中心敏感，不同选取方式会得到不同结果 (<strong>Kmeans++ | Kmeans II</strong>)</li>
<li>对异常值敏感 (<strong>Pretreatment</strong>)</li>
<li>不适合太离散的分类、样本类别不平衡的分类、非凸形状的分类 (<strong>核函数</strong>)</li>
<li>样本只能归为一类，不适合多分类任务 (<strong>ISODATA细分样本</strong>)</li>
</ul>
<h2 id="optimization-of-kmeans">OPTIMIZATION OF KMEANS</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301608007.png" /></p>
<ul>
<li>手肘法(人工确定K)</li>
</ul>
<blockquote>
<p>当 K &lt; 2 时，曲线急速下降；当 K &gt; 2 时，曲线趋于平稳，通过手肘法我们认为拐点 2 为 K 的最佳值</p>
</blockquote>
<ul>
<li><strong>Gap statistic</strong></li>
</ul>
<p><span class="math display">\[
𝑑_{𝑖𝑖^′}=\Sigma(𝑥_{𝑖𝑗}−𝑥_{𝑖^′ 𝑗})^2 (𝑖=1,2…𝑛;𝑗=1,2,…𝑝)\to 描述与中心的距离
\]</span></p>
<p><span class="math display">\[
n_r=|C_r| \to 样本空间
\]</span></p>
<p><span class="math display">\[
W_k=\Sigma(\frac{1}{2n_r}D_r) \to 损失函数
\]</span></p>
<p><span class="math display">\[
最终公式\to Gap_n(k)=E^*\{log(W_k)\}-log(W_k)
\]</span></p>
<p><span class="math display">\[
E^*\{log(W_k)\}\to how\ to\ get?
\]</span></p>
<blockquote>
<p>参考论文: <a href="https://statweb.stanford.edu/~gwalther/gap">Estimating the number of clusters in a data set via the gap statistic</a></p>
<p>Robert Tibshirani , Guenther Walther and Trevor Hastie</p>
<p>Stanford University</p>
</blockquote>
<h2 id="monte-carlo-method">MONTE CARLO METHOD</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301616821.gif" /></p>
<ul>
<li>解决两类问题</li>
</ul>
<blockquote>
<p>一类是所求解的问题<strong>本身</strong>具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程</p>
<p>另一种类型是所求解问题可以<strong>转化</strong>为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值</p>
</blockquote>
<ul>
<li>理解</li>
</ul>
<blockquote>
<p>假设你有一袋豆子，把豆子均匀地朝这个图形上撒，然后数这个图形之中有多少颗豆子，这个豆子的数目就是图形的面积。当你的豆子越小，撒的越多的时候，结果就越精确。借助计算机程序可以生成大量均匀分布坐标点，然后统计出图形内的点数，通过它们占总点数的比例和坐标点生成范围的面积就可以求出图形面积。</p>
</blockquote>
<h2 id="kmeans---kmeans---kmeans-ii">Kmeans -&gt; Kmeans++ -&gt; Kmeans II</h2>
<h3 id="kmeans">Kmeans</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据 n 个 m维 的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成 K 个 m维 的点(where)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j &lt; k;j++)</span><br><span class="line">	  		   计算 i 到类 j 的距离</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;I &lt; k;i++)</span><br><span class="line">           <span class="number">1.</span>  找出所有属于自己这一类的所有数据点</span><br><span class="line">           <span class="number">2.</span>  把自己的坐标修改为这些数据中心点坐标</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="kmeans-1">Kmeans++</h3>
<ul>
<li><p>1.随机选取<span class="math inline">\(a_i\)</span></p></li>
<li><p>2.计算数据到之前 n 个聚类中心最远的距离 , 并以一定的概率 <span class="math inline">\(\frac{D(x)^2}{∑D(x)^2}\)</span>,选择新的中心点<span class="math inline">\(a_i\)</span></p></li>
<li><p>3.重复步骤2</p></li>
</ul>
<h3 id="kmeans-ii">Kmeans II</h3>
<ul>
<li>在Kmeans++基础上 每次遍历取样k个，重复该取样过程klog(n)次，得到一个集合，然后随机选取 K个点作为类聚中心</li>
</ul>
<h2 id="pretreatment">PRETREATMENT</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110301706552.png" /></p>
<blockquote>
<p>当样本点过于离散时的效果</p>
</blockquote>
<ul>
<li>1.预处理提前过滤掉异常值</li>
<li>2.通过一个<font color=red>非线性映射</font>，将输入空间中的数据点映射到高位的特征空间中，并在新的特征空间中进行聚类。<font color=red>非线性映射增加了数据点线性可分的概率</font>，从而在经典的聚类算法失效的情况下，通过引入核函数可以达到更为<strong>准确</strong>的聚类结果。</li>
</ul>
<h2 id="isodata">ISODATA</h2>
<blockquote>
<p>ISODATA (迭代自组织数据分析法)。它解决了 K 的值需要预先人为的确定这一缺点。而当遇到高维度、海量的数据集时，人们往往很难准确地估计出 K 的大小</p>
</blockquote>
<ul>
<li>当属于某个类别的样本数过少时把这个类别去除，当属于某个类别的样本数过多、分散程度较大时把这个类别分为两个子类别</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown数学公式语法</title>
    <url>/2021/10/31/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>数学公式编辑器的救星 比Office不要好用太多 很好记</p>
<span id="more"></span>
<h2 id="行内与独行">行内与独行</h2>
<ul>
<li><p>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：<span class="math inline">\(xyz\)</span></p></li>
<li><p>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：<span class="math display">\[xyz\]</span></p></li>
</ul>
<h2 id="上标下标与组合">上标、下标与组合</h2>
<ul>
<li><p>上标符号，符号：<code>^</code>，如：<span class="math inline">\(x^4\)</span></p></li>
<li><p>下标符号，符号：<code>_</code>，如：<span class="math inline">\(x_1\)</span></p></li>
<li><p>组合符号，符号：<code>&#123;&#125;</code>，如：<span class="math inline">\({16}_{8}O{2+}_{2}\)</span></p></li>
</ul>
<h2 id="汉字字体与格式">汉字、字体与格式</h2>
<ul>
<li><p>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：<span class="math inline">\(V_{\mbox{初始}}\)</span></p></li>
<li><p>字体控制，符号：<code>\displaystyle</code>，如：<span class="math inline">\(\displaystyle \frac{x+y}{y+z}\)</span></p></li>
<li><p>下划线符号，符号：<code>\underline</code>，如：<span class="math inline">\(\underline{x+y}\)</span></p></li>
<li><p>标签，符号<code>\tag&#123;数字&#125;</code>，如：<span class="math inline">\(\tag{11}\)</span></p></li>
<li><p>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：<span class="math inline">\(\overbrace{a+b+c+d}^{2.0}\)</span></p></li>
<li><p>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：<span class="math inline">\(a+\underbrace{b+c}_{1.0}+d\)</span></p></li>
<li><p>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：<span class="math inline">\(\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}\)</span></p></li>
</ul>
<h2 id="占位符">占位符</h2>
<ul>
<li><p>两个quad空格，符号：<code>\qquad</code>，如：<span class="math inline">\(x \qquad y\)</span></p></li>
<li><p>quad空格，符号：<code>\quad</code>，如：<span class="math inline">\(x \quad y\)</span></p></li>
<li><p>大空格，符号<code>\</code>，如：<span class="math inline">\(x \ y\)</span></p></li>
<li><p>中空格，符号<code>\:</code>，如：<span class="math inline">\(x \: y\)</span></p></li>
<li><p>小空格，符号<code>\,</code>，如：<span class="math inline">\(x \, y\)</span></p></li>
<li><p>没有空格，符号``，如：<span class="math inline">\(xy\)</span></p></li>
<li><p>紧贴，符号<code>\!</code>，如：<span class="math inline">\(x \! y\)</span></p></li>
</ul>
<h2 id="定界符与组合">定界符与组合</h2>
<ul>
<li><p>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：<span class="math inline">\(（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)\)</span></p></li>
<li><p>中括号，符号：<code>[]</code>，如：<span class="math inline">\([x+y]\)</span></p></li>
<li><p>大括号，符号：<code>\&#123; \&#125;</code>，如：<span class="math inline">\({x+y}\)</span></p></li>
<li><p>自适应括号，符号：<code>\left \right</code>，如：<span class="math inline">\(\left(x\right)\)</span>，<span class="math inline">\(\left(x{yz}\right)\)</span></p></li>
<li><p>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：<span class="math inline">\({n+1 \choose k}={n \choose k}+{n \choose k-1}\)</span></p></li>
<li><p>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：<span class="math inline">\(\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots\)</span></p></li>
</ul>
<h2 id="四则运算">四则运算</h2>
<ul>
<li><p>加法运算，符号：<code>+</code>，如：<span class="math inline">\(x+y=z\)</span></p></li>
<li><p>减法运算，符号：<code>-</code>，如：<span class="math inline">\(x-y=z\)</span></p></li>
<li><p>加减运算，符号：<code>\pm</code>，如：<span class="math inline">\(x \pm y=z\)</span></p></li>
<li><p>减甲运算，符号：<code>\mp</code>，如：<span class="math inline">\(x \mp y=z\)</span></p></li>
<li><p>乘法运算，符号：<code>\times</code>，如：<span class="math inline">\(x \times y=z\)</span></p></li>
<li><p>点乘运算，符号：<code>\cdot</code>，如：<span class="math inline">\(x \cdot y=z\)</span></p></li>
<li><p>星乘运算，符号：<code>\ast</code>，如：<span class="math inline">\(x \ast y=z\)</span></p></li>
<li><p>除法运算，符号：<code>\div</code>，如：<span class="math inline">\(x \div y=z\)</span></p></li>
<li><p>斜法运算，符号：<code>/</code>，如：<span class="math inline">\(x/y=z\)</span></p></li>
<li><p>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：<span class="math inline">\(\frac{x+y}{y+z}\)</span></p></li>
<li><p>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：<span class="math inline">\({x+y} \over {y+z}\)</span></p></li>
<li><p>绝对值表示，符号：<code>||</code>，如：<span class="math inline">\(|x+y|\)</span></p></li>
</ul>
<h2 id="高级运算">高级运算</h2>
<ul>
<li><p>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：<span class="math inline">\(\overline{xyz}\)</span></p></li>
<li><p>开二次方运算，符号：<code>\sqrt</code>，如：<span class="math inline">\(\sqrt x\)</span></p></li>
<li><p>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：<span class="math inline">\(\sqrt[3]{x+y}\)</span></p></li>
<li><p>对数运算，符号：<code>\log</code>，如：<span class="math inline">\(\log(x)\)</span></p></li>
<li><p>极限运算，符号：<code>\lim</code>，如：<span class="math inline">\(\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>极限运算，符号：<code>\displaystyle \lim</code>，如：<span class="math inline">\(\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>求和运算，符号：<code>\sum</code>，如：<span class="math inline">\(\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>求和运算，符号：<code>\displaystyle \sum</code>，如：<span class="math inline">\(\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\)</span></p></li>
<li><p>积分运算，符号：<code>\int</code>，如：<span class="math inline">\(\int^{\infty}_{0}{xdx}\)</span></p></li>
<li><p>积分运算，符号：<code>\displaystyle \int</code>，如：<span class="math inline">\(\displaystyle \int^{\infty}_{0}{xdx}\)</span></p></li>
<li><p>微分运算，符号：<code>\partial</code>，如：<span class="math inline">\(\frac{\partial x}{\partial y}\)</span></p></li>
<li><p>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：<span class="math inline">\(\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\cdots5 &amp;6 &amp;\cdots &amp;8\\vdots &amp;\vdots &amp;\ddots &amp;\vdots\cdots13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]\)</span></p></li>
</ul>
<h2 id="逻辑运算">逻辑运算</h2>
<ul>
<li><p>等于运算，符号：<code>=</code>，如：<span class="math inline">\(x+y=z\)</span></p></li>
<li><p>大于运算，符号：<code>&gt;</code>，如：<span class="math inline">\(x+y&gt;z\)</span></p></li>
<li><p>小于运算，符号：<code>&lt;</code>，如：<span class="math inline">\(x+y&lt;z\)</span></p></li>
<li><p>大于等于运算，符号：<code>\geq</code>，如：<span class="math inline">\(x+y \geq z\)</span></p></li>
<li><p>小于等于运算，符号：<code>\leq</code>，如：<span class="math inline">\(x+y \leq z\)</span></p></li>
<li><p>不等于运算，符号：<code>\neq</code>，如：<span class="math inline">\(x+y \neq z\)</span></p></li>
<li><p>不大于等于运算，符号：<code>\ngeq</code>，如：<span class="math inline">\(x+y \ngeq z\)</span></p></li>
<li><p>不大于等于运算，符号：<code>\not\geq</code>，如：<span class="math inline">\(x+y \not\geq z\)</span></p></li>
<li><p>不小于等于运算，符号：<code>\nleq</code>，如：<span class="math inline">\(x+y \nleq z\)</span></p></li>
<li><p>不小于等于运算，符号：<code>\not\leq</code>，如：<span class="math inline">\(x+y \not\leq z\)</span></p></li>
<li><p>约等于运算，符号：<code>\approx</code>，如：<span class="math inline">\(x+y \approx z\)</span></p></li>
<li><p>恒定等于运算，符号：<code>\equiv</code>，如：<span class="math inline">\(x+y \equiv z\)</span></p></li>
</ul>
<h2 id="集合运算">集合运算</h2>
<ul>
<li><p>属于运算，符号：<code>\in</code>，如：<span class="math inline">\(x \in y\)</span></p></li>
<li><p>不属于运算，符号：<code>\notin</code>，如：<span class="math inline">\(x \notin y\)</span></p></li>
<li><p>不属于运算，符号：<code>\not\in</code>，如：<span class="math inline">\(x \not\in y\)</span></p></li>
<li><p>子集运算，符号：<code>\subset</code>，如：<span class="math inline">\(x \subset y\)</span></p></li>
<li><p>子集运算，符号：<code>\supset</code>，如：<span class="math inline">\(x \supset y\)</span></p></li>
<li><p>真子集运算，符号：<code>\subseteq</code>，如：<span class="math inline">\(x \subseteq y\)</span></p></li>
<li><p>非真子集运算，符号：<code>\subsetneq</code>，如：<span class="math inline">\(x \subsetneq y\)</span></p></li>
<li><p>真子集运算，符号：<code>\supseteq</code>，如：<span class="math inline">\(x \supseteq y\)</span></p></li>
<li><p>非真子集运算，符号：<code>\supsetneq</code>，如：<span class="math inline">\(x \supsetneq y\)</span></p></li>
<li><p>非子集运算，符号：<code>\not\subset</code>，如：<span class="math inline">\(x \not\subset y\)</span></p></li>
<li><p>非子集运算，符号：<code>\not\supset</code>，如：<span class="math inline">\(x \not\supset y\)</span></p></li>
<li><p>并集运算，符号：<code>\cup</code>，如：<span class="math inline">\(x \cup y\)</span></p></li>
<li><p>交集运算，符号：<code>\cap</code>，如：<span class="math inline">\(x \cap y\)</span></p></li>
<li><p>差集运算，符号：<code>\setminus</code>，如：<span class="math inline">\(x \setminus y\)</span></p></li>
<li><p>同或运算，符号：<code>\bigodot</code>，如：<span class="math inline">\(x \bigodot y\)</span></p></li>
<li><p>同与运算，符号：<code>\bigotimes</code>，如：<span class="math inline">\(x \bigotimes y\)</span></p></li>
<li><p>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></p></li>
<li><p>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></p></li>
<li><p>空集，符号：<code>\emptyset</code>，如：<span class="math inline">\(\emptyset\)</span></p></li>
</ul>
<h2 id="数学符号">数学符号</h2>
<ul>
<li><p>无穷，符号：<code>\infty</code>，如：<span class="math inline">\(\infty\)</span></p></li>
<li><p>虚数，符号：<code>\imath</code>，如：<span class="math inline">\(\imath\)</span></p></li>
<li><p>虚数，符号：<code>\jmath</code>，如：<span class="math inline">\(\jmath\)</span></p></li>
<li><p>数学符号，符号<code>\hat&#123;a&#125;</code>，如：<span class="math inline">\(\hat{a}\)</span></p></li>
<li><p>数学符号，符号<code>\check&#123;a&#125;</code>，如：<span class="math inline">\(\check{a}\)</span></p></li>
<li><p>数学符号，符号<code>\breve&#123;a&#125;</code>，如：<span class="math inline">\(\breve{a}\)</span></p></li>
<li><p>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：<span class="math inline">\(\tilde{a}\)</span></p></li>
<li><p>数学符号，符号<code>\bar&#123;a&#125;</code>，如：<span class="math inline">\(\bar{a}\)</span></p></li>
<li><p>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：<span class="math inline">\(\vec{a}\)</span></p></li>
<li><p>数学符号，符号<code>\acute&#123;a&#125;</code>，如：<span class="math inline">\(\acute{a}\)</span></p></li>
<li><p>数学符号，符号<code>\grave&#123;a&#125;</code>，如：<span class="math inline">\(\grave{a}\)</span></p></li>
<li><p>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：<span class="math inline">\(\mathring{a}\)</span></p></li>
<li><p>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：<span class="math inline">\(\dot{a}\)</span></p></li>
<li><p>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：<span class="math inline">\(\ddot{a}\)</span></p></li>
<li><p>上箭头，符号：<code>\uparrow</code>，如：<span class="math inline">\(\uparrow\)</span></p></li>
<li><p>上箭头，符号：<code>\Uparrow</code>，如：<span class="math inline">\(\Uparrow\)</span></p></li>
<li><p>下箭头，符号：<code>\downarrow</code>，如：<span class="math inline">\(\downarrow\)</span></p></li>
<li><p>下箭头，符号：<code>\Downarrow</code>，如：<span class="math inline">\(\Downarrow\)</span></p></li>
<li><p>左箭头，符号：<code>\leftarrow</code>，如：<span class="math inline">\(\leftarrow\)</span></p></li>
<li><p>左箭头，符号：<code>\Leftarrow</code>，如：<span class="math inline">\(\Leftarrow\)</span></p></li>
<li><p>右箭头，符号：<code>\rightarrow</code>，如：<span class="math inline">\(\rightarrow\)</span></p></li>
<li><p>右箭头，符号：<code>\Rightarrow</code>，如：<span class="math inline">\(\Rightarrow\)</span></p></li>
<li><p>底端对齐的省略号，符号：<code>\ldots</code>，如：<span class="math inline">\(1,2,\ldots,n\)</span></p></li>
<li><p>中线对齐的省略号，符号：<code>\cdots</code>，如：<span class="math inline">\(x_1^2 + x_2^2 + \cdots + x_n^2\)</span></p></li>
<li><p>竖直对齐的省略号，符号：<code>\vdots</code>，如：<span class="math inline">\(\vdots\)</span></p></li>
<li><p>斜对齐的省略号，符号：<code>\ddots</code>，如：<span class="math inline">\(\ddots\)</span></p></li>
</ul>
<h2 id="希腊字母">希腊字母</h2>
<table>
<thead>
<tr class="header">
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr class="even">
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr class="odd">
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr class="even">
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr class="odd">
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr class="even">
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr class="odd">
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr class="even">
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr class="odd">
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr class="even">
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr class="odd">
<td>N</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr class="even">
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr class="odd">
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr class="even">
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr class="odd">
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\cmicron</code></td>
</tr>
<tr class="even">
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr class="odd">
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr class="even">
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr class="odd">
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr class="even">
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr class="odd">
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr class="even">
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr class="odd">
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr class="even">
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody>
</table>
<p>转载：https://www.jianshu.com/p/e74eb43960a1</p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MindStudio容器化部署</title>
    <url>/2021/10/24/MindStudio%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>大三上 创新实践 华为云 MindStudio 容器化部署</p>
<span id="more"></span>
<h2 id="安装-更新docker">安装 | 更新Docker</h2>
<ul>
<li>如果原来docker版本老旧 删除之</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>
<ul>
<li>Centos</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker</span><br></pre></td></tr></table></figure>
<ul>
<li>更新apt包</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<ul>
<li>更新yum包</li>
<li>Centos</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Centos</p></li>
<li><p>安装需要的包</p></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<ul>
<li>设置镜像的仓库(可以不用 网上CV下来的)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">	--add-repo \ </span><br><span class="line">https://download.docker,com/linux/centos/docker-ce.repo ## 这是个默认从国外的 </span><br><span class="line"></span><br><span class="line">yum-config-manager \ </span><br><span class="line">	--add-repo \ </span><br><span class="line">	htttp://mirrors.aliyum.com/docker-ce/linux/centos/docker-ce.repo ## 推荐使用aliyun</span><br></pre></td></tr></table></figure>
<ul>
<li>安装</li>
<li>Ubuntu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure>
<ul>
<li>Centos</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker</span><br></pre></td></tr></table></figure>
<ul>
<li>安装验证</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">Docker version 20.10.9, build c2ea9bc</span><br></pre></td></tr></table></figure>
<h2 id="用户添加到docker组">用户添加到docker组</h2>
<ul>
<li>查看是否有docker组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有就创建</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
<ul>
<li>将当前用户添加到docker组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -G docker whlll（你的用户ID）</span><br></pre></td></tr></table></figure>
<ul>
<li>重启docker服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果直接使用root 可以忽略此步</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>链接：https://pan.baidu.com/s/1M5bcfzus_hKPSN_cJCVZ5A 提取码：pz61</p>
<ul>
<li>FileZilla FTP传输 c32.zip 到虚拟机(推荐当前用户的home目录) 解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip c32.zip</span><br></pre></td></tr></table></figure>
<ul>
<li>加载镜像到docker(在解压后c32v1的目录)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i c32v1</span><br></pre></td></tr></table></figure>
<ul>
<li>查看镜像ID是否加载成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<ul>
<li>重命名镜像</li>
</ul>
<blockquote>
<p>使用 <strong>docker images</strong> 查看镜像ID</p>
<p>使用 <strong>docker ps -a </strong> 查看运行的容器ID</p>
<p>使用 <strong>docker ps -aq</strong> 查看运行和退出状态的容器ID</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag [镜像ID] [名字]:[标签]</span><br></pre></td></tr></table></figure>
<ul>
<li>登录本机图形化界面 配置图形化显示</li>
</ul>
<blockquote>
<p>注意：Ubuntu上没有这个<strong>x11-xserver-utils</strong>工具 如果使用Centos 最后一步 图形化窗口无法初始化 先挖个坑以后填 当前推荐使用Debian 下的linux版本 如Ubuntu</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install x11-xserver-utils</span><br><span class="line"></span><br><span class="line">xhost +</span><br></pre></td></tr></table></figure>
<ul>
<li>启动镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --network=host -v /etc/localtime:/etc/localtime:ro -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=unix$DISPLAY -e GDK_SCALE -e GDK_DPI_SCALE [镜像ID] bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次启动需要这个命令 后续每次启动都不需要 使用以下命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --network=host [镜像ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>进入之前创建好的容器</li>
</ul>
<blockquote>
<p>如果容器本身是停止的</p>
<p>你需要使用 <strong>docker start [容器ID]</strong> 启动之</p>
<p>再使用一下命令进入</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exex -it [容器ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>切换MindStudio的安装用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - ascend</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ascend用户和root用户的密码均为各自的用户名</p>
</blockquote>
<ul>
<li>进入home目录并启动MindStudio</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/MindStudio-ubuntu/bin/</span><br><span class="line"></span><br><span class="line">./MindStudio.sh</span><br></pre></td></tr></table></figure>
<h2 id="docker-基本命令相见docker命令回顾">docker 基本命令(相见docker命令回顾)</h2>
<ul>
<li>查看运行中的容器使用</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<ul>
<li>查看所有的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<ul>
<li>停止运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>启动停止的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>删除停止的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>强制删除运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f [容器ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>进入运行中的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exex -it [容器ID] bash</span><br></pre></td></tr></table></figure>
<ul>
<li>回退</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CTRL + d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MindStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql笔记</title>
    <url>/2021/10/02/MySql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>MySQL 梦开始的地方</p>
<span id="more"></span>
<p><strong>MySQL是一个关系型数据库管理系统</strong></p>
<p>5.7 -&gt; 稳定</p>
<p><strong>8.0</strong> ## 1、my.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">basedir=D:\Program Files\mysql</span><br><span class="line"></span><br><span class="line">datadir=D:\Program Files\mysql\data</span><br><span class="line"></span><br><span class="line">max_connections=200</span><br><span class="line"></span><br><span class="line">max_connect_errors=10</span><br><span class="line"></span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>
<h2 id="创建数据库">2、创建数据库</h2>
<p>基字符集：<em>utf-8</em><br />
数据库排序规则：<em>utf8—general-ci</em></p>
<h3 id="连接数据库">2.0连接数据库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 -- 连接数据库</span><br><span class="line"></span><br><span class="line">update mysql.user</span><br><span class="line">set authentication_string=password(&#x27;123456&#x27;)</span><br><span class="line">where user = &#x27;root&#x27;</span><br><span class="line">  and Host = &#x27;localhost&#x27;;  -- 修改用户密码</span><br><span class="line"></span><br><span class="line">flush privileges ;  -- 刷新权限</span><br><span class="line">-- -----------------------------------------</span><br><span class="line">-- 所有的语句都用;结尾</span><br><span class="line">show databases ; -- 查看所有数据库</span><br><span class="line"></span><br><span class="line">mysql&gt;use school -- 切换数据库 use</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">show tables ; -- 查看数据库中所有的表</span><br><span class="line">describe student; -- 显示数据库中所有表的信息</span><br><span class="line"></span><br><span class="line">create database whlll; -- 创建一个数据库</span><br><span class="line"></span><br><span class="line">exit;</span><br><span class="line">-- 单行注释</span><br><span class="line">/*(多行注释)</span><br><span class="line">你好</span><br><span class="line">whlll</span><br><span class="line">Bye!</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>数据库xxx语言(CRUD 增删改查!)<br />
DDL 定义<br />
DML 操作<br />
DQL 查询<br />
DCL 控制 ###2.操作数据库 *** 操作数据库 -&gt; 操作数据库中的表 -&gt; 操作数据库表中的数据</p>
<h3 id="操作数据库了解">2.1操作数据库(了解)</h3>
<ol type="1">
<li>创建数据库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [if not exists] whlll </span><br></pre></td></tr></table></figure></li>
<li>删除数据库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [if exists] whlll </span><br></pre></td></tr></table></figure></li>
<li>使用数据库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 如果你的表名或字段名是一个特殊字符 需要带 ``</span><br><span class="line">use `school`;</span><br><span class="line">select `user` from student;</span><br></pre></td></tr></table></figure></li>
<li>查看数据库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases -- 查看所有的数据库</span><br></pre></td></tr></table></figure> 学习思路：</li>
</ol>
<ul>
<li>对照sqlyog可视化历史记录查看sql</li>
<li>固定的语法或关键字帮助记忆</li>
</ul>
<h3 id="数据库的列类型">2.2 数据库的列类型</h3>
<blockquote>
<p>数值 - tinyint 十分小的数据 1字节 - smallint 较小的数据 2字节 - mediumint 中等大小的数据 3字节 - int <strong>标准的整数</strong> <strong>4字节</strong> - bigint 较大的数据 8字节 - float 浮点数 4字节 - double 浮点数 8字节 (精度问题！) - decimal 字符串形式的浮点数 金融计算时候，一般使用decimal</p>
</blockquote>
<table style="width:6%;">
<colgroup>
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>&gt;字符串 - char 字符串固定大小 0-255 - varchar 可变字符串 0-65535 <strong>常用的</strong> - tinytext 微型文本 2^8-1 - text 文本串 2^16-1 <strong>保存大文本</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&gt;时间日期 - date YYYY-MM-DD,日期 - time HH:mm:ss 时间格式 - <strong>datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong> - timestamp 时间戳， 1970.1.1到现在的毫秒数！ 较为常用 - year 年份表示</td>
</tr>
</tbody>
</table>
<blockquote>
<p>null - 没有值，未知 - <em>不要使用null值进行计算</em></p>
</blockquote>
<h3 id="数据库的字段属性重点">2.3 数据库的字段属性(重点)</h3>
<blockquote>
<p>Unsigned: - 无符号的整数 - 声明了该列不能声明为负数 --- zerofill： - 0填充的 - 不足的位数，使用0来填充 int(3) -&gt; 5 ---&gt; 005 --- 自增 - 通常理解为自增，在上一条的记录基础上+1(默认) - 通常用来设计唯一的主键，必须为整数类型 - 可以自定义主键自增的起始值和增量 --- 非空 NULL not null - 假设设置为not null ，如果不赋值，则会报错！ - NULL，如果不填值，默认为null --- 默认： - 设置默认值 - eg：sex 默认值为男 --- 每一个表，都必须存在以下五个字段 -&gt; 项目 id 主键 version 乐观锁 is_delete 伪删除 gmt_create 创建时间 gmt_update 修改时间 --- ### 2.4 创建数据库表</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 目标：创建一个school数据库</span><br><span class="line">-- 创建学生表(列，字段) 使用SQL创建</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2)，生日日期(datetime)，家庭住址，email</span><br><span class="line"></span><br><span class="line">-- 注意点，使用英文() ， 表的名称 和 字段 尽量使用 `` 括起来</span><br><span class="line">-- AUTO INCREMENT 自增</span><br><span class="line">-- 字符串使用 单引号括起来！</span><br><span class="line">-- 所有语句后面加,(英文) ,最后一个不用加</span><br><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<p>格式 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] `表名`(</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释]</span><br><span class="line">) [表类型][字符集设置][注释]</span><br><span class="line"></span><br><span class="line">SHOW CREATE DATABASE school -- 查看创建数据库的语句</span><br><span class="line">SHOW CREATE TABLE student -- 查看student数据表的定义语句</span><br><span class="line">DESC student -- 显示表的结构</span><br></pre></td></tr></table></figure> ### 2.5 数据表的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 关于数据库引擎</span><br><span class="line">/*</span><br><span class="line"> INNODB 默认使用</span><br><span class="line"> MYISAM 早些年使用</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="odd">
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
</tbody>
</table>
<p>常规使用操作： - MYISAM 节约空间，速度快 - INNODB 安全性高，事务的处理，多表多用户操作</p>
<p><strong>物理空间的存在位置</strong><br />
所有的数据库文件都存在data目录下，一个文件夹对应一个数据库<br />
本质还是文件的储存</p>
<p>MySQL引擎在物理文件上的区别<br />
- INNODB 在数据库表中只有一个 <em>.frm 文件，以及上级目录下的 ibdata1 文件 - MYISAM 对应文件 - </em>.frm - 表结构的定义文件 - <em>.MYD 数据文件(data) - </em>.MYI 索引文件(index)</p>
<p><strong>设置数据库表的字符集编码</strong></p>
<pre><code>CHARSET=utf8</code></pre>
<p>不设置 -&gt; 默认 -&gt; 不支持中文<br />
在my.ini中设置默认的编码 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">character_set_server<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure> ### 2.6 修改删除表</p>
<blockquote>
<p>修改 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改表 ALTER TABLE 旧表名 RENAME AS 新表名</span><br><span class="line">ALTER TABLE teacher RENAME AS teacher1;</span><br><span class="line">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span><br><span class="line">ALTER TABLE teacher1 ADD age INT(11);</span><br><span class="line">-- 修改表的字段(重命名，修改约束！)</span><br><span class="line">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span><br><span class="line">ALTER TABLE teacher1 MODIFY age VARCHAR(11); -- 修改约束</span><br><span class="line">-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性[]</span><br><span class="line">ALTER TABLE teacher1 CHANGE age age1 INT(1); -- 字段重命名</span><br><span class="line">    </span><br><span class="line">-- 删除表的字段</span><br><span class="line">ALTER TABLE teacher1 DROP age1;</span><br></pre></td></tr></table></figure> 删除 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">DROP TABLE IF EXISTS teacher1</span><br></pre></td></tr></table></figure> <strong>所有的创建和删除尽量加上判断，以免报错~</strong><br />
注意点： - ``字段名,使用这个包裹！ - 注释 -- /**/ - sql 关键字大小写不敏感 -&gt; 建议写小写 - 所有的符号用英文</p>
</blockquote>
<h2 id="mysql数据管理">3、MySQL数据管理</h2>
<h3 id="外键了解">3.1 外键(了解)</h3>
<blockquote>
<p>方式一、在创建表的时候，增加约束(麻烦，比较复杂) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line">    </span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span><br><span class="line">-- 定义外键key</span><br><span class="line">-- 给这个外键添加约束(执行引用) references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `gradeid` INT(10) NOT NULL COMMENT &#x27;学生的年级&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`),</span><br><span class="line">    KEY `FK_gradeid` (`gradeid`),</span><br><span class="line">    CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade`(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure> 删除有外键关系的表的时候，必须删除引用别人的表(从表),再删除被引用的表(主表)</p>
</blockquote>
<blockquote>
<p>方式二、创建表成功后，添加外键约束 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line">    </span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span><br><span class="line">-- 定义外键key</span><br><span class="line">-- 给这个外键添加约束(执行引用) references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `gradeid` INT(10) NOT NULL COMMENT &#x27;学生的年级&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 创建表的时候没有外键关系</span><br><span class="line">ALTER TABLE `student`</span><br><span class="line">    ADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);</span><br><span class="line"></span><br><span class="line">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表(哪个字段);</span><br></pre></td></tr></table></figure> 以上操作都是物理外键，数据库级别的外键，我们不建议使用！(避免数据库过多造成困扰)</p>
</blockquote>
<p><strong>最佳实践</strong> - 数据库就是单纯的表，只用来存数据，只有行(数据)和列(字段) - 我们想使用多张表的数据，想使用外键(程序去实现) ###3.2 DML语言(全部记住) 数据库意义：数据存储，数据管理 DML语言：数据操作语言 - insert - update - delete</p>
<p>### 3.3、添加 &gt;insert <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入语句(添加)</span><br><span class="line">-- insert into 表名([字段名1，字段2，字段3])values(&#x27;值1&#x27;),(&#x27;值2&#x27;),(&#x27;值3&#x27;),...</span><br><span class="line">INSERT INTO `grade`(`gradename`) VALUES(&#x27;大四&#x27;)</span><br><span class="line"></span><br><span class="line">-- 由于主键自增我们可以省略(如果不写表的字段，他就会一一匹配)</span><br><span class="line">INSERT INTO `grade` VALUES(&#x27;大三&#x27;)</span><br><span class="line"></span><br><span class="line">-- 一般写插入语句，我们一定要数据和字段一一对应！</span><br><span class="line"></span><br><span class="line">-- 插入多个字段</span><br><span class="line">INSERT INTO `g`student`rade`(`gradename`) VALUES(&#x27;大二&#x27;),(&#x27;大一&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`) VALUES (&#x27;张三&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) VALUES (&#x27;张三&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) </span><br><span class="line">VALUES (&#x27;李四&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;),(&#x27;王五&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;)</span><br></pre></td></tr></table></figure> 语法：<code>insert into 表名([字段名1，字段2，字段3])values('值1'),('值2'),('值3'),...</code></p>
<p>注意事项：<br />
1. 字段和字段之间使用 英文逗号 隔开 2. 字段可以省略，但是后面的值必须一一对应 3. 可以同时插入多条数据，VALUES后面的值，需要使用 , 隔开即可 <code>VALUES(),()</code></p>
<h3 id="修改">3.4、修改</h3>
<blockquote>
<p>update 修改谁 (条件) set原来的值=新值 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改学员名字,带了条件</span><br><span class="line">UPDATE `student` SET `name`=&#x27;whlll&#x27; WHERE id=1;</span><br><span class="line"></span><br><span class="line">-- 不指定条件的情况下,会改动所有表！</span><br><span class="line">UPDATE `student` SET `name`=&#x27;长江七号&#x27;</span><br><span class="line"></span><br><span class="line">-- 修改多个属性</span><br><span class="line">UPDATE `student` SET `name`=&#x27;whlll&#x27;,`email`=&#x27;whlll0305lhl@gmail.com&#x27; WHERE id=1;</span><br><span class="line"></span><br><span class="line">-- 语法：</span><br><span class="line">-- UPDATE 表名 set column_name = value[column_name=value,...] where [条件]</span><br></pre></td></tr></table></figure> 条件：where子句 运算符 id等于某个值，大于某个值，在某个区间内修改...</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th>操作符</th>
<th>意义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr class="even">
<td>&lt;&gt; 或 !=</td>
<td>不等于</td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr class="odd">
<td>BETWEEN...and...</td>
<td>[...]闭合区间</td>
<td>[2,5]</td>
<td></td>
</tr>
<tr class="even">
<td>AND</td>
<td>与</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr class="odd">
<td>OR</td>
<td>或</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 通过多个条件定位数据</span><br><span class="line">UPDATE `student` SET `name`=&#x27;银河舰队&#x27; WHERE `name`=&#x27;whlll&#x27; AND sex=&#x27;女&#x27;</span><br></pre></td></tr></table></figure>
<p>语法：UPDATE 表名 set column_name = value[column_name=value,...] where [条件] 注意： - column_name 是数据库的列，尽量带上``` - 条件，筛选条件，如果没有给定，则会修改所有的列 - value，是一个具体的值，也可以是一个变量 - 多个设置的属性之间，使用英文逗号隔开 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE `student` SET `birthday`=CURRENT_TIME WHERE `name`=&#x27;银河舰队&#x27; AND sex=&#x27;女&#x27;</span><br></pre></td></tr></table></figure></p>
<h3 id="删除">3.5、删除</h3>
<blockquote>
<p>delete 命令</p>
</blockquote>
<p>语法：delete from 表名 [where 条件] <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除数据(避免这样写) 会全部删除</span><br><span class="line">DELETE FROM `student`;</span><br><span class="line">-- 删除指定数据</span><br><span class="line">DELETE FROM `student` WHERE id=1</span><br></pre></td></tr></table></figure> &gt;TRUNCATE 命令 作用：完全清空一个数据库表，表的结构和索引约束不会变！ <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 清空 student 表</span><br><span class="line">TRUNCATE `student`</span><br></pre></td></tr></table></figure> &gt;delete 和 TRUNCATE 区别 - 相同点：都能删除数据，都不会删除表结构 - 不同： - TRUNCATE 重新设置 自增列 计数器会归零 - TRUNCATE 不会影响事务 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 测试delete 和 TRUNCATE 区别</span><br><span class="line">CREATE TABLE `test`(</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`coll` VARCHAR(20) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `test`(`coll`) VALUES(&#x27;1&#x27;),(&#x27;2&#x27;),(&#x27;3&#x27;);</span><br><span class="line"></span><br><span class="line">DELETE FROM `test`; -- 不会影响自增</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE `test` -- 自增会归零</span><br></pre></td></tr></table></figure> 了解即可：DELETE删除的问题，重启数据库，现象 - INNODB 自增列会从1开始(存在内存中的，断电即失) - MyISAM 继续从上一个自增量开始(存在文件中的，断电不会丢失)</p>
<h2 id="dql查询数据最重点">4、DQL查询数据(最重点)</h2>
<h3 id="dql">4.1、DQL</h3>
<p>(Data Query LANGUAGE:数据查询语言)</p>
<ul>
<li>所有的查询操作都用它 Slect</li>
<li>简单的查询，复杂的查询它都做~</li>
<li>__数据库中最核心的语言，最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询全部的学生 SELECT 字段 FROM 表</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">  </span><br><span class="line">-- 查询指定字段</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM student; </span><br><span class="line">  </span><br><span class="line">-- 别名 给结果起一个名字 AS 可以给字段起别名 也可以给表起别名</span><br><span class="line">SELECT `StudentNo` AS 学号,`StudentName` AS 学生姓名 FROM student AS s</span><br><span class="line"></span><br><span class="line">-- 函数 Concat(a,b)</span><br><span class="line">SELECT CONCAT(&#x27;姓名&#x27;,StudentName) AS 新名字 FROM student</span><br></pre></td></tr></table></figure>
<p>语法：SELECT 字段... FROM 表</p>
<blockquote>
<p>有的时候，列名字不是那么的好理解，起别名 AS (字段名 AS 别名)</p>
</blockquote>
<blockquote>
<p>去重 distinct 作用：去除SELECT查询出来的结果中的重复数据，重复的数据只显示一条 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT `StudnetNo` FROM result; -- 发现重复数据 去重</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>数据库的列(表达式) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT VERSION() -- 查询系统版本(函数)</span><br><span class="line"></span><br><span class="line">SELECT 100*3-1 AS 计算结果 -- 用来计算(计算表达式)</span><br><span class="line"></span><br><span class="line">SELECT @@auto_increment_increment -- 查询自增的步长(变量)</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩 +1分 查看</span><br><span class="line">SELECT `StudentNo`,`StudentResult`+1 AS &#x27;提分后&#x27; FROM result</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量...</p>
<p>select 表达式 from 表</p>
<h3 id="where-条件子句">4.3、where 条件子句</h3>
<p>作用：检索数据中 符合条件 的值</p>
<p>搜索的条件由一个或多个表达式组成！ 结果 布尔值 &gt;逻辑运算符</p>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>and &amp;&amp;</td>
<td>a and b</td>
<td>逻辑与</td>
</tr>
<tr class="even">
<td>or</td>
<td>a or b</td>
<td>逻辑或</td>
</tr>
<tr class="odd">
<td>Not !</td>
<td>not a</td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
<p><strong>尽量使用英文字母</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- =====================where===========================</span><br><span class="line"></span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line"></span><br><span class="line">-- 查询考试成绩在 95-100 分之间的</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult&gt;95 AND StudentResult&lt;=100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- and &amp;&amp;</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult&gt;95 &amp;&amp; StudentResult&lt;=100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 模糊查询 (区间)</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100</span><br><span class="line"></span><br><span class="line">-- 除了1000号同学之外同学的成绩</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE studentNo!=1000;</span><br><span class="line"></span><br><span class="line">-- != not</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE NOT studentNo = 1000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring &amp; Mybatis</title>
    <url>/2021/10/10/Spring-Mybatis/</url>
    <content><![CDATA[<p>这两块难啃的骨头~ 不学完 誓不改 Spring大家族 + Mybatis ...</p>
<span id="more"></span>
<h2 id="常用依赖">常用依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用bean配置注解支持">常用Bean配置(注解支持)</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.whlll.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="作用域scope">作用域[Scope]</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;LHL&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li></li>
<li></li>
</ul>
<hr />
<h2 id="注释说明">注释说明</h2>
<ul>
<li><p><span class="citation" data-cites="Atuowired">@Atuowired</span>：自动装配(先)类型(后)名字</p></li>
<li><p>如果Atuowired不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")来</p></li>
<li><p><span class="citation" data-cites="Nullable">@Nullable</span>：字段标记这个注解 -&gt; 说明这个字段可以为null</p></li>
<li><p><span class="citation" data-cites="Resource">@Resource</span>：自动装配(先)名字(后)类型</p></li>
<li><p><span class="citation" data-cites="Component">@Component</span>：组件 -&gt; 放在类上 将某个类注入到Spring容器 实现bean的自动装载</p></li>
<li><p><span class="citation" data-cites="Component的衍生注解">@Component的衍生注解</span>(功能都一样)：</p></li>
<li><p>dao：<span class="citation" data-cites="Repository">[@Repository]</span></p></li>
<li><p>service：<span class="citation" data-cites="Service">[@Service]</span></p></li>
<li><p>controller：<span class="citation" data-cites="Controller">[@Controller]</span></p></li>
<li><p><span class="citation" data-cites="value">@value</span>：实例化赋值,放在对象或setter方法前，相当于</p></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.whlll.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><span class="citation" data-cites="Scope">@Scope</span>：作用域 -&gt; <a href="单例模式%20-%3E%20装载的类始终为同一个">singleton</a> / <a href="原型模式%20-%3E%20装载的类不同(分别装载)">prototype</a></li>
</ul>
<hr />
<h2 id="整合mybatis">整合Mybatis</h2>
<h3 id="导入相关jar包">1.导入相关jar包</h3>
<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的</li>
<li>aop织入</li>
<li>mybatis-spring【new】 ###2.编写配置文件 ###3.测试 ###（配置）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Spring操作数据库的话 需要spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="回忆mybatis">回忆mybatis</h2>
<p>​ 1.编写实体类 ​ 2.编写核心配置文件 ​ 3.编写接口 ​ 4.编写Mapper.xml ​ 5.测试</p>
<h2 id="简介">1.简介</h2>
<h3 id="什么是mybatis">1.1 什么是Mybatis?</h3>
<p>Mybatis -&gt; <em>优秀的持久化框架</em>(ibatis)</p>
<h3 id="持久层">1.2 持久层</h3>
<ul>
<li>数据持久化</li>
<li>持久化就是将程序的数据在持久状态和瞬时状态的转化过程</li>
<li>内存：断电即失</li>
<li>数据库(jdbc)，io文件持久化。</li>
<li>生活：冷藏、 罐头。</li>
</ul>
<h4 id="为什么需要持久化">为什么需要持久化？</h4>
<ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵了</li>
</ul>
<h3 id="持久层dao层service层controller层...">1.3 持久层(Dao层、Service层、Controller层...)</h3>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="为什么需要mybatis">1.4 为什么需要Mybatis?</h3>
<ul>
<li>帮助程序员将数据存入到数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂 -&gt; 简化 -&gt; 框架、自动化</li>
<li>不用Mybatis也可以，更容易上手 &lt;- 技术没有高低之分</li>
<li>优点:
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul></li>
</ul>
<h4 id="最重要的一点使用的人多">最重要的一点：使用的人多</h4>
<p>​ Spring SpringMVC SpringBoot</p>
<h2 id="第一个mybatis程序">第一个Mybatis程序</h2>
<hr />
<p>思路:搭建环境 -&gt; 导入Mybatis -&gt; 编写代码 -&gt; 测试！ ###2.1 搭建环境 搭建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">`id` INT(20) NOT NULL,</span><br><span class="line">`name`VARCHAR(30) DEFAULT NULL,</span><br><span class="line">`pwd`VARCHAR(30) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY(`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES</span><br><span class="line">(1,&#x27;whlll&#x27;,&#x27;123456&#x27;),</span><br><span class="line">(2,&#x27;张三&#x27;,&#x27;123456&#x27;),</span><br><span class="line">(3,&#x27;李四&#x27;,&#x27;123456&#x27;)</span><br></pre></td></tr></table></figure>
<p>新建项目</p>
<ol type="1">
<li>新建一个普通的Maven项目</li>
<li>删除src目录</li>
<li>导入maven依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建一个模块">2.2、创建一个模块</h3>
<ul>
<li>编写mybatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=ture<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写mybatis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSessionpublic class MybatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory;    static &#123;        try &#123;            //使用Mybatis第一步 --&gt; 获取sqlSessionFactory对象            String resource = &quot;mybatis-config.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    //SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。    public static SqlSession getSqlSession()&#123;        return sqlSessionFactory.openSession();    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写代码">2.3、编写代码</h3>
<ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    <span class="keyword">private</span> <span class="keyword">int</span> id;    <span class="keyword">private</span> String name;    <span class="keyword">private</span> String pwd;    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;    &#125;    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;        <span class="keyword">this</span>.id = id;        <span class="keyword">this</span>.name = name;        <span class="keyword">this</span>.pwd = pwd;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> id;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;        <span class="keyword">this</span>.id = id;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> name;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;        <span class="keyword">this</span>.name = name;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> pwd;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;        <span class="keyword">this</span>.pwd = pwd;    &#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接口实现类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.whlll.dao.UserDao&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>UserMapper.xml中不要有中文注释</strong></p>
<h3 id="测试">2.4、测试</h3>
<ul>
<li>junit测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;        <span class="comment">//获取SqlSession对象        SqlSession sqlSession = MybatisUtils.getSqlSession();        //方式一：getMapper        UserDao mapper = sqlSession.getMapper(UserDao.class);        List&lt;User&gt; userList = mapper.getUserList();        for (User user : userList) &#123;            System.out.println(user);        &#125;        //关闭SqlSession        sqlSession.close();    &#125;</span></span><br></pre></td></tr></table></figure>
<p>可能遇到的问题：</p>
<ol type="1">
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
<li>Mapper.xml中不要使用中文注解</li>
</ol>
<h2 id="crud">3、CRUD</h2>
<h3 id="namespace">1、namespace</h3>
<p>namespace中的包名要和Dao/mapper中的包名一致</p>
<h3 id="select">2、select</h3>
<p>选择，查询语句</p>
<ul>
<li>id：就是对应的namesqace中的方法名;</li>
<li>resultType：Sql语句执行的返回值;</li>
<li>parameterType：参数类型！</li>
</ul>
<ol type="1">
<li>编写接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户    User getUserById(int id);</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>编写对应的mapper中的sql语句</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;        select * from mybatis.user where id = #&#123;id&#125;    &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;        SqlSession sqlSession = MybatisUtils.getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        User user = mapper.getUserById(<span class="number">1</span>);        System.out.println(user);        sqlSession.close();    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="insert">3、insert</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;addUser&quot;</span> parameterType=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;    insert into mybatis.user (id, name, pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);&lt;/insert&gt;</span><br></pre></td></tr></table></figure>
<h3 id="update">4、update</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateUser&quot;</span> parameterType=<span class="string">&quot;com.whlll.pojo.User&quot;</span>&gt;    update mybatis.user    set name = #&#123;name&#125;,        pwd=#&#123;pwd&#125;    where id = #&#123;id&#125;;&lt;/update&gt;</span><br></pre></td></tr></table></figure>
<h3 id="delete">5、delete</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">&quot;deleteUser&quot;</span> parameterType=<span class="string">&quot;int&quot;</span>&gt;    delete from mybatis.user where id=#&#123;id&#125;;&lt;/delete&gt;</span><br></pre></td></tr></table></figure>
<p><strong>增删改 -&gt; 要提交commit</strong></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>标签不要匹配错</li>
<li>resource 绑定 mapper 需要匹配路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointException,没有注册到资源</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出的问题！</li>
</ul>
<p>##万能的Map</p>
<p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map    int addUser2(Map&lt;String, Object&gt; map);</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>        insert into mybatis.user (id, name, pwd) values (#&#123;userid&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;        SqlSession sqlSession = MybatisUtils.getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="string">&quot;userid&quot;</span>, <span class="number">5</span>);        map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;Hello&quot;</span>);        map.put(<span class="string">&quot;passWord&quot;</span>, <span class="string">&quot;2222333&quot;</span>);        mapper.addUser2(map);        sqlSession.commit();        sqlSession.close();    &#125;</span><br></pre></td></tr></table></figure>
<p>Map传递参数，直接在sql中取出key即可！ [parameterType="map"]</p>
<p>对象传递参数，直接在sql中取对象的属性即可！ [parameterType="Object"]</p>
<p>只有一个基本类型的参数情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，或者注解！</p>
<p><strong>模糊查询怎么写？</strong></p>
<ol type="1">
<li>java代码执行的时候，传递通配符 % %</li>
</ol>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure></p>
<ol start="2" type="1">
<li>在sql拼接中使用通配符！</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure>
<h2 id="配置解析">4、配置解析</h2>
<h3 id="核心配置文件">1、核心配置文件</h3>
<ul>
<li>mybatis-config.xml</li>
<li>Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</span><br></pre></td></tr></table></figure>
<h2 id="环境配置environments">2、环境配置（environments）</h2>
<p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p><em>学会使用配置多套运行环境！</em></p>
<p>MyBatis默认的事务管理器就是JDBC，连接池：POOLED</p>
<p>##3、属性properties</p>
<p>我们可以通过properties属性来实现配置文件</p>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的Java属性文件中配置这些属性， 也可以在properties元素的子元素中设置。[db.properties]</p>
<p>1.编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCusername=rootpassword=root</span></span><br></pre></td></tr></table></figure>
<p>2.在核心配置文件中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用外部配置文件--&gt;</span><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>1.可以直接引入外部文件</li>
<li>2.可以在其中增加一些配置属性</li>
<li>3.如果两个文件有同一个字段，优先使用外部配置文件的</li>
</ul>
<h2 id="别名">4.别名</h2>
<h2 id="mybatis-spring">Mybatis-Spring</h2>
<p>1.编写数据源配置</p>
<p>2.sqlSessionFactory</p>
<p>3.sqlSessionTemplate</p>
<p>4.需要给接口加实现类[]</p>
<p>5.将自己写的实现类，注入到Spring中，测试使用即可</p>
<h2 id="声明式事务">声明式事务</h2>
<h3 id="回顾事务">1、回顾事务</h3>
<ul>
<li>把一组业务当成一个业务来做：要么都成功，要么都失败！</li>
<li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎！</li>
<li>确保完整性和一致性</li>
</ul>
<h3 id="spring中七种propagation类的事务属性详解">2、Spring中七种Propagation类的事务属性详解：</h3>
<p><strong>REQUIRED</strong>：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</p>
<p><strong>SUPPORTS</strong>：支持当前事务，如果当前没有事务，就以非事务方式执行。</p>
<p><strong>MANDATORY</strong>：支持当前事务，如果当前没有事务，就抛出异常。</p>
<p><strong>REQUIRES_NEW</strong>：新建事务，如果当前存在事务，把当前事务挂起。</p>
<p><strong>NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p>
<p><strong>NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常。</p>
<p><strong>NESTED</strong>：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2021/10/09/Netty/</url>
    <content><![CDATA[<p>Netty 对java原生NIO进行了封装，提供了更加便捷的操作 降低了学习成本</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<ul>
<li>Java开源框架</li>
<li>异步、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络IO程序</li>
<li>主要针对TCP协议下，面向Client端的高并发应用，或者Peer-to-Peer场景下的大量数据持续传输应用</li>
<li>Netty本质是一个NIO框架,适用于服务器通讯相关的多种应用 场景</li>
<li>体系结构</li>
</ul>
<table>
<thead>
<tr class="header">
<th>Netty</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>NIO(io、网络)</td>
</tr>
<tr class="even">
<td>原生的JDK io/网络 -&gt; java的io编程 和 网络编程</td>
</tr>
<tr class="odd">
<td>TCP/IP</td>
</tr>
</tbody>
</table>
<h2 id="应用场景">应用场景</h2>
<ul>
<li>互联网行业
<ul>
<li>高性能RPC(远程过程调用)框架</li>
</ul></li>
<li>游戏行业
<ul>
<li>定制和开发私有协议栈</li>
</ul></li>
<li>大数据领域
<ul>
<li>(AVRO数据文件共享)RPC框架，默认采用Netty进行跨界点通信</li>
</ul></li>
</ul>
<h2 id="io模型">I/O模型</h2>
<ul>
<li>Java支持三种网络编程模型
<ul>
<li>BIO
<ul>
<li>同步阻塞：一个连接一个线程 如果连接不做任何事情会造成不必要的线程开销</li>
</ul></li>
<li>NIO
<ul>
<li>同步非阻塞：客户端的连接请求会注册到多路复用器(Selector) -&gt; 轮询 一个线程维护多个连接</li>
</ul></li>
<li>AIO
<ul>
<li>异步非阻塞：异步通道 对于有效的请求才启动线程，先由操作系统完成后才通知服务端启动线程处理</li>
</ul></li>
</ul></li>
<li>实用场景
<ul>
<li>BIO
<ul>
<li>连接数目较小且固定</li>
</ul></li>
<li>NIO
<ul>
<li>连接数目多且连接比较短(轻操作)的架构</li>
</ul></li>
<li>AIO
<ul>
<li>连接数目多且连接较长(重操作)的架构</li>
</ul></li>
</ul></li>
</ul>
<h2 id="bio">BIO</h2>
<ul>
<li>BIO变成简单流程
<ul>
<li>服务器启动一个ServerSocket</li>
<li>客户端启动Socket对服务器进行通信，默认情况下服务端需要对每个客户建立一个线程与之通信</li>
<li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝</li>
<li>如果有响应，客户端线程会等待请求结束后，再继续执行</li>
</ul></li>
<li>eg.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池机制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1.创建一个线程池</span></span><br><span class="line">        <span class="comment">//2.如果有客户端连接，就创建一个线程与之通信</span></span><br><span class="line"></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//监听 等待客户端连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待连接...&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个线程与之通信</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//可以和客户端通信</span></span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个Handler方法 和客户端通信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//通过socket 获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;线程信息 id=&quot;</span>+ Thread.currentThread().getId()+<span class="string">&quot;名字=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;read...&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, read));<span class="comment">//输出客户发送的数据</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭和client的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nio">NIO</h2>
<ul>
<li>同步非阻塞</li>
<li>三大核心组件
<ul>
<li>Channel</li>
<li>Buffer</li>
<li>Selector
<ul>
<li>Buffer -&gt; Channel -&gt; Selector</li>
</ul></li>
</ul></li>
<li>NIO使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变得可以读取之前，该线程可以继续做其他事情，非阻塞写也是如此，一个线程请求写入一些数据到某些通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</li>
</ul>
<h2 id="nio和bio比较">NIO和BIO比较</h2>
<ul>
<li>BIO以流的方式处理数据，而NIO以块的方式处理数据</li>
<li>BIO基于字符流进行操作，而NIO基于Channel和Buffer进行操作,数据总是从通道读取到缓冲区，或是从缓冲区写入到通道中。</li>
</ul>
<h2 id="nio三大核心组件关系">NIO三大核心组件关系</h2>
<p>Selector、Channel、BUffer的关系</p>
<ul>
<li>每一个channel都对应一个Buffer</li>
<li>Selector对应一个线程，一个线程对应多个channel(连接)</li>
<li>channel 注册到 selector</li>
<li>程序切换到哪个channel是由事件决定的 -&gt; Event</li>
<li>Selector会根据不同的事件，在各个通道上切换</li>
<li>Buffer就是一个内存块，底层有一个数组</li>
<li>数据的读取写入是通过Buffer，双向，需要flip方法切换</li>
<li>channel是双向的，可以返回底层操作系统的情况</li>
</ul>
<h3 id="缓冲区buffer">缓冲区(Buffer)</h3>
<ul>
<li><p>本质就是一个可以读写数据的内存块 -&gt; 容器对象(含数组)</p></li>
<li><p>Buffer及其子类</p></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110082258388.png" alt="Buffer子类" /><figcaption aria-hidden="true">Buffer子类</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>capacity</td>
<td>容量，即可容纳的最大数量，在缓冲区创建时被设定并且不能改变</td>
</tr>
<tr class="even">
<td>limit</td>
<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作。且极限是可以修改的</td>
</tr>
<tr class="odd">
<td>position</td>
<td>位置，下一个要被读或写的元素索引，每次读写缓冲区数据时都会改变改值，为下次读写作准备</td>
</tr>
<tr class="even">
<td>mark</td>
<td>标记</td>
</tr>
</tbody>
</table>
<ul>
<li>ByteBuffer</li>
</ul>
<h2 id="channel">Channel</h2>
<ul>
<li>NIO的通道类似于流
<ul>
<li>通道可以同时读写</li>
<li>可以异步读取数据</li>
<li>可以缓冲读数据，也可以写数据到缓冲</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110082336254.png" alt="channel子类" /><figcaption aria-hidden="true">channel子类</figcaption>
</figure>
<h3 id="channel写文件">Channel写文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;Hello whlll&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个输出流</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过输出流获取对应的 FileChannel</span></span><br><span class="line">        FileChannel channel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 str 放入到byteBuffer</span></span><br><span class="line">        byteBuffer.put(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">        channel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="channel读文件">Channel读文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFIleChannel02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate((<span class="keyword">int</span>) file.length());</span><br><span class="line"></span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字节转成字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="channel读写文件复制">Channel读写文件(复制)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;2.txt&quot;</span>);</span><br><span class="line">        FileChannel channel1 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里有一个重要的操作</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            <span class="keyword">int</span> read = channel.read(byteBuffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;read=&quot;</span>+read);</span><br><span class="line">            <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            channel1.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="channel-零拷贝慎用">Channel 零拷贝(慎用)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建相关的流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\a.gif&quot;</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\a2.gif&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel sourceCh = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileChannel destCh = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        destCh.transferFrom(sourceCh, <span class="number">0</span>, sourceCh.size());</span><br><span class="line"></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="bytebuffer">ByteBuffer</h2>
<h3 id="设为仅可读">设为仅可读</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            buffer.put((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">        System.out.println(readOnlyBuffer.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (readOnlyBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(readOnlyBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        readOnlyBuffer.put((byte) 100);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="put-get">Put &amp; Get</h3>
<ul>
<li>改变读取顺序 -&gt; 如果没有越界 只会得到非预期的结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOByteBufferPutGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        byteBuffer.putInt(<span class="number">100</span>);</span><br><span class="line">        byteBuffer.putLong(<span class="number">9L</span>);</span><br><span class="line">        byteBuffer.putChar(<span class="string">&#x27;威&#x27;</span>);</span><br><span class="line">        byteBuffer.putShort((<span class="keyword">short</span>) <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(byteBuffer.getInt());</span><br><span class="line">        System.out.println(byteBuffer.getLong());</span><br><span class="line">        System.out.println(byteBuffer.getChar());</span><br><span class="line">        System.out.println(byteBuffer.getShort());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆外内存修改">堆外内存修改</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数2：可以修改的起始位置</span></span><br><span class="line"><span class="comment">         * 参数3：映射到内存的大小，即将1，txt的多少个字节映射到内存</span></span><br><span class="line"><span class="comment">         * 可以直接修改的范围就是0-5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">3</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分散和聚合流操作">分散和聚合(流操作)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 ServerSocketChannel 和 ScoketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定端口到socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">//循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead);</span><br><span class="line">                <span class="comment">//使用流打印 当前的Buffer的position 和 limit</span></span><br><span class="line">                Arrays.asList(byteBuffers).stream().map(buffer -&gt; <span class="string">&quot;position=&quot;</span>+</span><br><span class="line">                        buffer.position()+<span class="string">&quot;,limit=&quot;</span>+ buffer.limit()).forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数据读出显示到客户端</span></span><br><span class="line">            <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (byteWrite &lt; messageLength) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.write(byteBuffers);</span><br><span class="line">                byteWrite += l;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将所有的buffer复位</span></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead+<span class="string">&quot;  byteWrite=&quot;</span>+byteWrite+<span class="string">&quot;  messageLength=&quot;</span>+</span><br><span class="line">                    messageLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="selector">Selector</h2>
<ul>
<li><p>Selector能够检测多个注册的通道上是否有时间发生(多个Channel以事件的方式可以注册到同一个Selector)</p></li>
<li><p>只有在 通道真正有读写事件发生时才会进行读写</p></li>
<li><p>相关方法说明</p>
<ul>
<li>selector.select()//阻塞</li>
<li>selector.select(1000)//阻塞1000毫秒</li>
<li>selector.wakeup()//唤醒selector</li>
<li>selector.selectNow()//不阻塞，立马返还</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/NIO非阻塞原理图.png" alt="NIO非阻塞原理图" /><figcaption aria-hidden="true">NIO非阻塞原理图</figcaption>
</figure>
<ul>
<li>1.当客户端连接时，会通过ServerSocketChannel得到SocketChannel</li>
<li>2.SocketChannel注册到Selector，register(Selector sel,int ops),一个selector上可以注册多个SocketChannel
<ul>
<li>ops值</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_READ = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_WRITE = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_CONNECT = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_ACCEPT = <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>3.注册后返回一个SelectionKey，会和该Selector关联(集合)</li>
<li>4.Selector 进行监听 select 方法 返回有事件发生的通道的个数</li>
<li>5.进一步得到各个SelectionKey(有事件发生的)</li>
<li>6.再通过Selectionkey 反向获取 SocketChannel channel()</li>
<li>7.可以通过得到的 channel 完成业务处理</li>
</ul>
<h3 id="nioserver">NIOServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ServerSocketChannel -&gt; ServerSocket</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">        <span class="comment">//设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把 serverSocketChannel 注册到 selector 关心事件为 OP_ACCEPT</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环等待客户端连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待 1s 如果没有事件发生 就返回</span></span><br><span class="line">            <span class="keyword">if</span> (selector.select(<span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//没有事件发生</span></span><br><span class="line">                System.out.println(<span class="string">&quot;服务器等待了一秒，无连接&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果返回的&gt;0 获取相关的 selectionKeys集合</span></span><br><span class="line">            <span class="comment">//1.如果返回的&gt;0,表示已经获取到相关的事件</span></span><br><span class="line">            <span class="comment">//2.selector.selectedKeys() 返回关注事件的集合</span></span><br><span class="line">            <span class="comment">//3.通过 selectionKeys 反向获取通道</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历 Set&lt;SelectionKeys&gt; 使用迭代器遍历</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">//有新的客户链接我 给该客户端生成一个SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端连接成功 生成了一个socketChannel &quot;</span> + socketChannel.hashCode());</span><br><span class="line">                    <span class="comment">//将socketChannel设置为非阻塞</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//将当前的socketChannel 注册到selector</span></span><br><span class="line">                    <span class="comment">//关联一个Buffer</span></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    <span class="comment">//发生了 OP_READ</span></span><br><span class="line">                    <span class="comment">//通过key反向获取对应的Channel</span></span><br><span class="line">                    SocketChannel channel = (SocketChannel)key.channel();</span><br><span class="line">                    <span class="comment">//获取到该channel 关联的buffer</span></span><br><span class="line">                    ByteBuffer buffer = (ByteBuffer)key.attachment();</span><br><span class="line">                    channel.read(buffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;from 客户端&quot;</span>+ <span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//手动从集合中移除selectionKey ,防止重复操作</span></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nioclient">NIOClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个网络通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提供服务器端的ip和端口</span></span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.connect(inetSocketAddress)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!socketChannel.finishConnect()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;因为连接需要时间，客户端不会阻塞，可以做其他工作...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;hello whlll&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包裹一个字节数组到Buffer中去</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line">        <span class="comment">//发送数据 将buffer 数据写入 channel</span></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="serversocketchannel与socketchannel">ServerSocketChannel与SocketChannel</h2>
<ul>
<li>ServerSocketChannel偏重于创建连接并生成一个SocketChannel</li>
<li>SocketChannel偏重于对数据的读写具体等操作</li>
</ul>
<p><strong>ServerSocketChannel</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108273.png" /></p>
<ul>
<li>structure</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108307.png" /></p>
<p><strong>SocketChannel</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108424.png" /></p>
<ul>
<li>structure</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110102108397.png" /></p>
<h2 id="群聊系统案例">群聊系统案例</h2>
<h3 id="服务端">服务端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//初始化工作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line"></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//有事件要处理</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="comment">//监听到accept</span></span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            SocketChannel socketChannel = listenChannel.accept();</span><br><span class="line">                            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">//将该socketChannel 注册到 selector</span></span><br><span class="line">                            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            <span class="comment">//提示</span></span><br><span class="line">                            System.out.println(socketChannel.getRemoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            <span class="comment">//通道发生read事件 即通道是可读的事件</span></span><br><span class="line">                            <span class="comment">//处理读(专门写方法..)</span></span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//当前的key 删除 防止重复处理</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个SocketChannel</span></span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = channel.read(buffer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//吧缓存区的数据转成字符串输出</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">//输出该消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;from 客户端：&quot;</span>+ msg.trim());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//向其他的客户端转发消息 专门写一个方法来处理</span></span><br><span class="line">                sendInfoToOtherClients(msg, channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress()+<span class="string">&quot;离线了...&quot;</span>);</span><br><span class="line">                <span class="comment">//取消注册</span></span><br><span class="line">                key.channel();</span><br><span class="line">                <span class="comment">//关闭通道</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息给其他的客户</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendInfoToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器转发消息中...&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历所有注册到selector 上的 SocketChannel 并排除 self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过key取出对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line"></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line"></span><br><span class="line">                dest.write(buffer);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端">客户端</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//服务器的IP</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, PORT));</span><br><span class="line"></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(username + <span class="string">&quot; is OK...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        info = username + <span class="string">&quot;说：&quot;</span> + info;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取从服务器端回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">//得到相关的通道</span></span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                        socketChannel.read(buffer);</span><br><span class="line"></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有可以用的通道...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//启动客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readInfo();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送数据给服务器端</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="零拷贝原理">零拷贝原理</h2>
<ul>
<li>零拷贝（Zero-Copy）是一种 <code>I/O</code> 操作优化技术，可以快速高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间。其在 <code>FTP</code> 或者 <code>HTTP</code> 等协议中可以显著地提升性能。但是需要注意的是，并不是所有的操作系统都支持这一特性，目前只有在使用 <code>NIO</code> 和 <code>Epoll</code> 传输时才可使用该特性</li>
<li>关于零拷贝主要技术有 <code>mmap+write</code>、<code>sendfile</code>和<code>splice</code>等几种方式</li>
</ul>
<h3 id="dma">DMA</h3>
<ul>
<li>direct memory access 直接内存拷贝 不使用CPU</li>
</ul>
<h3 id="虚拟内存">虚拟内存</h3>
<p>所有现代操作系统都使用虚拟内存，使用虚拟地址取代物理地址，主要有以下几点好处：</p>
<ul>
<li>多个虚拟内存可以指向同一个物理地址。</li>
<li>虚拟内存空间可以远远大于物理内存空间。</li>
</ul>
<p>利用上述的第一条特性可以优化，可以把内核空间和用户空间的虚拟地址映射到同一个物理地址，这样在 I/O 操作时就不需要来回复制了。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111530343.awebp" alt="虚拟内存" /><figcaption aria-hidden="true">虚拟内存</figcaption>
</figure>
<h3 id="传统io">传统I/O</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">read(file, tmp_buf, len);</span><br><span class="line">write(socket, tmp_buf, len);</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111523886.awebp" alt="传统I/O" /><figcaption aria-hidden="true">传统I/O</figcaption>
</figure>
<p>首先，期间共<strong>发生了 4 次用户态与内核态的上下文切换</strong>，因为发生了两次系统调用，一次是 <code>read()</code> ，一次是 <code>write()</code>，每次系统调用都得先从用户态切换到内核态，等内核完成任务后，再从内核态切换回用户态。</p>
<p>上下文切换到成本并不小，一次切换需要耗时几十纳秒到几微秒，虽然时间看上去很短，但是在高并发的场景下，这类时间容易被累积和放大，从而影响系统的性能。</p>
<p>其次，还<strong>发生了 4 次数据拷贝</strong>，其中两次是 DMA 的拷贝，另外两次则是通过 CPU 拷贝的，下面说一下这个过程：</p>
<ul>
<li><code>第一次拷贝</code>，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过 DMA 搬运的。</li>
<li><code>第二次拷贝</code>，把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由 CPU 完成的。</li>
<li><code>第三次拷贝</code>，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。</li>
<li><code>第四次拷贝</code>，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。</li>
</ul>
<p>这种简单又传统的文件传输方式，存在冗余的上文切换和数据拷贝，在高并发系统里是非常糟糕的，多了很多不必要的开销，会严重影响系统性能。</p>
<p>所以，<strong>要想提高文件传输的性能，就需要减少「用户态与内核态的上下文切换」和「内存拷贝」的次数</strong>。</p>
<h3 id="mmapwrite-方式">mmap/write 方式</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111533532.awebp" alt="mmap" /><figcaption aria-hidden="true">mmap</figcaption>
</figure>
<p>整个流程的核心区别就是，把数据读取到内核缓冲区后，应用程序进行写入操作时，直接把内核的<code>Read Buffer</code>的数据复制到<code>Socket Buffer</code>以便写入，这次内核之间的复制也是需要CPU的参与的。</p>
<p>上述流程就是少了一个 CPU COPY，提升了 I/O 的速度。不过发现上下文的切换还是4次并没有减少，这是因为还是要应用程序发起<code>write</code>操作。</p>
<h3 id="sendfile-方式">sendfile 方式</h3>
<ul>
<li>从 Linux 2.1 版本开始，Linux 引入了 <code>sendfile</code>来简化操作。<code>sendfile</code>方式可以替换上面的<code>mmap/write</code>方式来进一步优化</li>
</ul>
<p><code>sendfile</code>将以下操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mmap();</span><br><span class="line">write();</span><br></pre></td></tr></table></figure>
<p>替换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sendfile();</span><br></pre></td></tr></table></figure>
<p>这样就减少了上下文切换，因为少了一个应用程序发起<code>write</code>操作，直接发起<code>sendfile</code>操作。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111537696.awebp" alt="sendfile" /><figcaption aria-hidden="true">sendfile</figcaption>
</figure>
<p><code>sendfile</code>方式只有三次数据复制（其中只有一次 CPU COPY）以及2次上下文切换。</p>
<h3 id="带有-scattergather-的-sendfile方式">带有 scatter/gather 的 sendfile方式</h3>
<ul>
<li>Linux 2.4 内核进行了优化，提供了带有 <code>scatter/gather</code> 的 sendfile 操作，这个操作可以把最后一次 <code>CPU COPY</code> 去除。其原理就是在内核空间 Read BUffer 和 Socket Buffer 不做数据复制，而是将 Read Buffer 的内存地址、偏移量记录到相应的 Socket Buffer 中，这样就不需要复制。其本质和虚拟内存的解决方法思路一致，就是内存地址的记录。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110111540173.awebp" /></p>
<p>scatter/gather 的 sendfile 只有两次数据复制（都是 DMA COPY）及 2 次上下文切换。CUP COPY 已经完全没有。不过这一种收集复制功能是需要硬件及驱动程序支持的。</p>
<h3 id="splice-方式">splice 方式</h3>
<ul>
<li><p><code>splice</code> 调用和<code>sendfile</code> 非常相似，用户应用程序必须拥有两个已经打开的文件描述符，一个表示输入设备，一个表示输出设备。与<code>sendfile</code>不同的是，<code>splice</code>允许任意两个文件互相连接，而并不只是文件与<code>socket</code>进行数据传输。对于从一个文件描述符发送数据到<code>socket</code>这种特例来说，一直都是使用<code>sendfile</code>系统调用，而<code>splice</code>一直以来就只是一种机制，它并不仅限于<code>sendfile</code>的功能。也就是说 sendfile 是 splice 的一个子集。</p>
<p>在 Linux 2.6.17 版本引入了 splice，而在 Linux 2.6.23 版本中， sendfile 机制的实现已经没有了，但是其 API 及相应的功能还在，只不过 API 及相应的功能是利用了 splice 机制来实现的。</p>
<p>和 sendfile 不同的是，splice 不需要硬件支持。</p></li>
</ul>
<h3 id="小结">小结</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th>CPU拷贝</th>
<th>DMA拷贝</th>
<th>系统调用</th>
<th>上下文切换</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>传统方法</td>
<td>2</td>
<td>2</td>
<td>read/write</td>
<td>4</td>
</tr>
<tr class="even">
<td>内存映射</td>
<td>1</td>
<td>2</td>
<td>mmap/write</td>
<td>4</td>
</tr>
<tr class="odd">
<td>sendfile</td>
<td>1</td>
<td>2</td>
<td>sendfile</td>
<td>2</td>
</tr>
<tr class="even">
<td>scatter/gather copy</td>
<td>0</td>
<td>2</td>
<td>sendfile</td>
<td>2</td>
</tr>
<tr class="odd">
<td>splice</td>
<td>0</td>
<td>2</td>
<td>splice</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>(零拷贝这部分这篇文章非常不错 截取部分为笔记 链接：https://juejin.cn/post/6995519558475841550 来源：稀土掘金)</p>
<h2 id="零拷贝的应用">零拷贝的应用</h2>
<ul>
<li>NewIOServer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line"></span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != readCount) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    readCount = socketChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                byteBuffer.rewind();<span class="comment">//倒带 position =0 mark作废</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>NewIOClient</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">7001</span>));</span><br><span class="line">        String filename = <span class="string">&quot;23考研专业资料包.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(filename).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在linux下 一个transferTo 就可以完成传输</span></span><br><span class="line">        <span class="comment">//在windows下 一次调用 transferTo 只能发送8M ，需要分段传输文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//transferTo 底层使用零拷贝</span></span><br><span class="line">        <span class="keyword">long</span> transferCount = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;发送的总的字节数 = &quot;</span>+ transferCount +<span class="string">&quot; 耗时：&quot;</span>+</span><br><span class="line">                (System.currentTimeMillis()-startTime));</span><br><span class="line"></span><br><span class="line">        fileChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="netty-概述">Netty 概述</h2>
<ul>
<li>原生NIO存在的问题
<ul>
<li>NIO的类库和API复杂，使用麻烦</li>
<li>要熟悉Java多线程</li>
<li>开发难度和开发工作量都非常大</li>
<li>JDK NIO 的Bug：臭名昭著的 Epoll Bug，它会导致 Selector 空轮询 导致CPU 100%</li>
</ul></li>
</ul>
<h2 id="netty-线程模型">Netty 线程模型</h2>
<ul>
<li>传统阻塞I/O服务模型</li>
<li>Reactor模式(根据Reactor 的数量和处理资源线程池线程的数量不同分类)
<ul>
<li>单Reactor 单线程</li>
<li>单Reactor 多线程</li>
<li>主从 Reactor 多线程(Netty对它做了一定改进)</li>
</ul></li>
</ul>
<h2 id="主从-reactor-模型">主从 Reactor 模型</h2>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110121103510.png" /></p>
<p><strong>事件处理过程:</strong></p>
<ul>
<li>Reactor主线程对象通过select监听连接事件，通过Acceptor处理连接事件，当Acceptor处理连接事件后，主reactor将连接分配给从Reactor</li>
<li>从Reactor将连接加入到连接队列进行监听，并创建handler进行各种事件处理， 当有新事件发生时，从reactor就会对用对应的handler处理， handler读取数据后，分发给后面的worker线程处理</li>
<li>worker线程池分配独立的worker线程进行处理并返回结果，handler收到结果后再讲结果返回给客户端</li>
</ul>
<h2 id="netty-快速入门案例">Netty 快速入门案例</h2>
<h3 id="nettyserver">NettyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 BossGroup &amp; WorkGroup</span></span><br><span class="line">        <span class="comment">//两个都是无线循环</span></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建服务器的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)<span class="comment">//设置为两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)<span class="comment">//设置线程队列的连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)<span class="comment">//设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class="comment">//创建一个通道测试对象(匿名对象)</span></span><br><span class="line">                        <span class="comment">//给pipeline 设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);<span class="comment">//为 workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;......服务器 is ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定一个端口并且同步，生成一个 ChannelFuture 对象</span></span><br><span class="line">            <span class="comment">//启动服务器并绑定端口</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>childHandler 对应 workerGroup</li>
<li>handler 对应 bossGroup</li>
</ul>
<h3 id="nettyserverhandler">NettyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们定义一个handler 需要继承 Netty 绑定好某一个HandlerAdaptor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取数据实例</span></span><br><span class="line">    <span class="comment">//ChannelHandlerContext ctx：上下文 含有 管道pipeline ，通道channel ，地址</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器读取线程：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx=&quot;</span> + ctx);</span><br><span class="line">        System.out.println(<span class="string">&quot;看看channel 和 pipeline的关系&quot;</span>);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        ChannelPipeline pipeline = ctx.pipeline();<span class="comment">//本质是一个双向链表</span></span><br><span class="line"></span><br><span class="line">        ByteBuf buffer = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息是：&quot;</span>+buffer.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据读取完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据写入到缓存并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nettyclient">NettyClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(group) <span class="comment">//设置线程组</span></span><br><span class="line">                    .channel(NioSocketChannel.class) <span class="comment">//设置客户端通道实现类(反射)</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());<span class="comment">//加入自己的处理器</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端 ok...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动客户端连接服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            <span class="comment">//关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nettyclienthandler">NettyClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, server：喵&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道有读取事件时 就触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息：&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址：&quot;</span>+ ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="taskqueue-任务队列">TaskQueue 任务队列</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello 客户端~o( =∩ω∩= )喵3&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<h2 id="future-listener机制">Future-Listener机制</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给 sf 注册监听器 监控我们关心的事件</span></span><br><span class="line">            channelFuture.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (channelFuture.isSuccess()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="http-实例">Http 实例</h2>
<h3 id="testserver">TestServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">6543</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="testserverhandler">TestServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HttpObject 客户端和服务端通信的数据被封装成 HttpObject</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;msg 类型=&quot;</span> + msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端地址&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line"></span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求了 favicon.ico 不作处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回复信息给浏览器</span></span><br><span class="line"></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello 我是服务器&quot;</span>, CharsetUtil.UTF_16);</span><br><span class="line"></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line"></span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将构建好的 response 返回</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="testserverinitializer">TestServerInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向管道加入处理器</span></span><br><span class="line">        <span class="comment">//得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入Netty 提供的httpServerCodec</span></span><br><span class="line">        <span class="comment">//Netty 提供处理http的编解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加一个自定义的Handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestHttpServerHandler&quot;</span>,<span class="keyword">new</span> TestServerHandler());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="netty-群聊系统">Netty 群聊系统</h2>
<h3 id="groupchatserver">GroupChatServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup boosGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            b.group(boosGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//向Pipeline 里加入解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Netty 服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听关闭事件</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            boosGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatserverhandler">GroupChatServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Channel&gt; channels = <span class="keyword">new</span> HashMap&lt;String, Channel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个channel组 管理所有的channel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将当前channel加入到 channelGroup</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//将该客户加入聊天的信息推送给其他在线的客户端</span></span><br><span class="line">        <span class="comment">//该方法会将 ChannelGroup 所有的channel 遍历 并发送消息</span></span><br><span class="line">        <span class="comment">//我们不需要自己遍历</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + simpleDateFormat.format(<span class="keyword">new</span> java.util.Date()) + <span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line"></span><br><span class="line">        channels.put(<span class="string">&quot;id100&quot;</span>,channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;上线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;下线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;离开了\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;channelGroup size&quot;</span> + channelGroup.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line"></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) &#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;发送消息了&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[自己]发送了消息&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatclient">GroupChatClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                    .group(group)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>+channel.localAddress()+<span class="string">&quot;------&quot;</span>);</span><br><span class="line">            <span class="comment">//客户端需要输入信息，创建一个扫描器</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">//通过channel发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="groupchatclienthandler">GroupChatClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="netty-心跳机制">Netty 心跳机制</h2>
<h3 id="myserver">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//增加一个Netty提供的IdleStateHandler -&gt; netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">//当 IdleStateEvent 触发后，就会传递给管道的下一Handler去处理 通过调用下一个 Handler的 userEventTriggered</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">13</span>, <span class="number">5</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverhandler">MyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">//将 evt 向下转型 IdleStateEvent</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line"></span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;---超时时间---&quot;</span>+eventType);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器做相应处理...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="websocket长链接">WebSocket长链接</h2>
<h3 id="myserver-1">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//因为是基于Http协议,使用http的编码和解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//是以块方式写，添加ChunkedWrite处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//http的数据在传输过程中，它是分段的 HttpObjectAggregator 可以将多个段聚合起来</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//将http协议 升级为 ws协议 -&gt; 保持长链接</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//自定义的Handler ，处理业务逻辑</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyTextWebSocketFrameHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="mytextwebsocketframehandler">MyTextWebSocketFrameHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示一个文本帧(frame)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端收到消息 &quot;</span>+ msg.text());</span><br><span class="line">        <span class="comment">//回复浏览器</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">&quot;服务器时间&quot;</span> + LocalDate.now() + <span class="string">&quot; &quot;</span> + msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdd 被调用&quot;</span>+ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdd 被调用&quot;</span>+ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常发生 &quot;</span>+cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hello.html">hello.html</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebSocket) &#123;</span></span><br><span class="line"><span class="javascript">        socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:7000/hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//收到服务器端回送的消息</span></span></span><br><span class="line"><span class="javascript">        socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + ev.data;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = <span class="string">&quot;连接开启了&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">            rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;连接关闭了...&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;当前浏览器不支持websocket编程&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">window</span>.socket) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//通过Socket 发送消息</span></span></span><br><span class="line"><span class="javascript">            socket.send(message);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;连接没有开启&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;responseText&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空内容&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="pipline-和-channelpipline">Pipline 和 ChannelPipline</h2>
<ul>
<li>addFirst: 把一个业务处理类添加到链中的第一个位置</li>
<li>addLast: 吧一个业务处理类添加到链中的最后一个位置</li>
</ul>
<h2 id="channelhandlercontext">ChannelHandlerContext</h2>
<ul>
<li>保存Channel 相关的所有上下文信息，同时关联一个ChannelHandler 对象</li>
<li>即ChannelHandlerContext 中包含一个具体的事件处理器 ChannelHandler，同时ChannelHandlerContext中也绑定了对应的pipeline和Channel的信息，方便对ChannelHandler进行调用</li>
<li>常用方法
<ul>
<li>close()</li>
<li>flush() 刷新</li>
<li>writeAndFlush(Object msg) 将数据写到 ChannelPipeline 中当前 ChannelHandler 的下一个 ChannelHandler 开始处理</li>
</ul></li>
</ul>
<h2 id="channeloption">ChannelOption</h2>
<ul>
<li>ChannelOption.SO_BACKLOG : 初始化可连接队列的大小</li>
<li>ChannelOption.SO_KEEPALIVE</li>
</ul>
<h2 id="eventloopgroup-和其实现类-nioeventloopgroup">EventLoopGroup 和其实现类 NioEventLoopGroup</h2>
<ul>
<li>EventLoopGroup是一组EventLoop的抽象，Netty为了更好的利用多核CPU的资源，一般会有多个EventLoop同时工作，每个EventLoop维护着一个Selector 实例</li>
<li>EventLoopGroup提供next接口，可以从组里面按照一定规则获取其中一个EventLoop来处理任务，在Netty服务器端编程中，我们一般都需要提供两个EventLoopGroup eg. BossEventGroup 和 WorkderEventLoopGroup</li>
</ul>
<h2 id="unpooled-类">Unpooled 类</h2>
<ul>
<li>Netty 提供一个专门用来操作缓冲区的工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个ByteBuf</span></span><br><span class="line">        <span class="comment">//创建一个对象 该对象包含一个数组</span></span><br><span class="line">        <span class="comment">//在Netty的buffer中不需要使用flip 进行反转</span></span><br><span class="line">        <span class="comment">//通过 readIndex 和 writeIndex 和 capacity 将buffer分成三个区域</span></span><br><span class="line">        <span class="comment">//0---readIndex 已经读取的区域</span></span><br><span class="line">        <span class="comment">//readIndex---writeIndex 可读的区域</span></span><br><span class="line">        <span class="comment">//writeIndex---capacity 可写的区域</span></span><br><span class="line">        ByteBuf buffer = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            buffer.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; buffer.capacity(); i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(buffer.getByte(i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            System.out.println(buffer.readByte());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello world&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (byteBuf.hasArray()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] array = byteBuf.array();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(array, CharsetUtil.UTF_8).trim());</span><br><span class="line">            System.out.println(<span class="string">&quot;byteBuf=&quot;</span>+byteBuf);</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.arrayOffset());</span><br><span class="line">            System.out.println(byteBuf.readerIndex());</span><br><span class="line">            System.out.println(byteBuf.writerIndex());</span><br><span class="line">            System.out.println(byteBuf.capacity());</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.getByte(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len = byteBuf.readableBytes();</span><br><span class="line">            System.out.println(<span class="string">&quot;Len=&quot;</span>+len);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                System.out.println(byteBuf.getByte(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">0</span>, <span class="number">4</span>, CharsetUtil.UTF_8));</span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">4</span>, <span class="number">6</span>, CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="channelhandler-调用机制">ChannelHandler 调用机制</h2>
<ul>
<li>ChannelPipeline 提供了ChannelHandler链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过pipeline中的一些列ChannelOutboundHandler 并被这些Handler处理，反之则称为入站的</li>
</ul>
<h3 id="myserver-2">MyServer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> MyServerInitializer());<span class="comment">//定义一个初试化类</span></span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverinitializer">MyServerInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myserverhandler-1">MyServerHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端&quot;</span>+ctx.channel().remoteAddress()+<span class="string">&quot;读取到long&quot;</span>+msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给客户端回送一个long</span></span><br><span class="line">        ctx.writeAndFlush(<span class="number">98765L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="myclient">MyClient</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> MyClientInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">7000</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myclientinitializer">MyClientInitializer</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入一个出站的handler 对数据进行一个编码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line">        <span class="comment">//加入一个自定义的handler 处理业务</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myclienthandler">MyClientHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回送消息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的ip=&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">        System.out.println(<span class="string">&quot;收到的服务器消息=&quot;</span>+ msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class="line">        ctx.writeAndFlush(<span class="number">123456L</span>);<span class="comment">//发送的是一个Long</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//16个字节</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;abcdabcdabcdabcd&quot;,CharsetUtil.UTF_8));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mybytetolongdecoder">MyByteToLongDecoder</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyByteToLongDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 入站的ByteBuf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out List 集合，将解码的数据传给下一个Handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyByteLongDecoder 被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (in.readableBytes() &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">            out.add(in.readLong());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mylongtobyteencoder">MyLongToByteEncoder</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLongToByteEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Long msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyLongToByteEncoder encode&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;msg=&quot;</span>+msg);</span><br><span class="line">        out.writeLong(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>网络应用框架</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq笔记</title>
    <url>/2021/10/07/RabbitMq%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>通信小能手 RabbitMq 多种模式 满足你的各种需求~</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>原始操作系统的TCP/IP协议满足不了项目需求</p>
<p>添加中间件 添加头 -&gt; 满足要求</p>
<h2 id="中间件">中间件</h2>
<ul>
<li>特点
<ul>
<li>高可用</li>
<li>可靠性</li>
</ul></li>
<li>分布式消息中间件
<ul>
<li>ActiveMQ：老派</li>
<li>RabbitMQ：spring同源 支持度高</li>
<li>Kafka：开源 性能最高 最接近底层</li>
<li>RocketMQ：慎选</li>
<li>场景
<ul>
<li>消息中间件监控数据</li>
<li>异步数据传输场景</li>
<li>削峰填谷场景</li>
<li>任务调度场景</li>
<li>海量数据同步场景</li>
<li>分布式事务场景</li>
<li>日记管理场景</li>
<li>大数据分析场景</li>
</ul></li>
<li>考量
<ul>
<li>AMQP</li>
<li>MQTT</li>
<li>持久化设计</li>
<li>Kafka协议</li>
<li>消息分发设计</li>
<li>高可用</li>
<li>可靠性</li>
<li>容错</li>
</ul></li>
</ul></li>
<li>负载均衡中间件
<ul>
<li>Nginx</li>
<li>LVS负载均衡软件</li>
<li>KeepAlive -&gt; 高可用</li>
<li>CDN -&gt; 加速</li>
</ul></li>
<li>缓存中间件
<ul>
<li>MemCache</li>
<li>Redis</li>
</ul></li>
<li>数据库中间件
<ul>
<li>Mycat</li>
<li>Shardingjdbc</li>
</ul></li>
<li>案例分析
<ul>
<li>异步数据保存</li>
<li>订单数据的消息分发</li>
<li>分布式事务</li>
<li>消息的容错</li>
<li>分布式锁</li>
<li>分布式会话</li>
<li>分库分表</li>
</ul></li>
</ul>
<h2 id="架构">架构</h2>
<ul>
<li>单体架构
<ul>
<li>耦合度太高</li>
<li>运维成本过高</li>
<li>不易维护</li>
<li>服务器的成本太高</li>
<li>升级架构的复杂度变高</li>
</ul></li>
<li>分布式架构:一个请求由多个系统来处理
<ul>
<li>学习成本高 技术栈过多</li>
<li>运维成本 服务器成本高</li>
<li>人员成本</li>
<li>项目的复杂度上升</li>
<li>错误和容错率</li>
<li>占用的端口和通讯的选择成本</li>
<li>安全性的考虑被迫得选择RMI/MQ服务端通讯</li>
</ul></li>
</ul>
<blockquote>
<p>MQ消息队列：负责消息的接受、存储和传递，它的性能要高于普通的服务和技术</p>
</blockquote>
<h2 id="消息队列协议">消息队列协议</h2>
<ul>
<li>AMQP:Erlang(底层C) 开发
<ul>
<li>1.分布式事务支持</li>
<li>2.消息的持久化支持</li>
<li>高性能和高可靠性的消息处理优势</li>
</ul></li>
<li>MQTT:
<ul>
<li>特点:
<ul>
<li>轻量</li>
<li>结构简单</li>
<li>传输块、不支持事务</li>
<li>没有持久化设计</li>
</ul></li>
<li>应用场景：适用于计算能力有限、低带宽、网络不稳定的场景</li>
</ul></li>
<li>OpenMessage:
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>支持事务和持久化设计</li>
</ul></li>
<li>KafKa:
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>无事务支持</li>
<li>有持久化设计</li>
</ul></li>
</ul>
<h2 id="消息队列的持久化">消息队列的持久化</h2>
<p>数据不存在内存中 -&gt; 写入磁盘中 持久化保存</p>
<h2 id="消息的分发策略">消息的分发策略</h2>
<p>角色:</p>
<ul>
<li>1.生产者</li>
<li>2.存储消息</li>
<li>3.消费者</li>
</ul>
<h2 id="rabbitmq的角色分类">RabbitMQ的角色分类</h2>
<blockquote>
<p>1:none</p>
</blockquote>
<ul>
<li>不能访问management plugin</li>
</ul>
<blockquote>
<p>2:management:查看自己相关节点信息</p>
</blockquote>
<ul>
<li>列出自己可以通过AMQP登入的虚拟机</li>
<li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li>
<li>查看和关闭自己的channels和connections</li>
<li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts 中的活动信息。</li>
</ul>
<blockquote>
<p>3:Policymaker</p>
</blockquote>
<ul>
<li>包含management所有权限</li>
<li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li>
</ul>
<blockquote>
<p>4:Monitoring</p>
</blockquote>
<ul>
<li>包含所有management所有权限</li>
<li>罗列出所有的virtual hosts 包括不能登录的virtual hosts</li>
<li>查看其他用户的connections和channel信息</li>
<li>查看节点级别的数据如clustering和memory使用情况</li>
<li>查看所有的virtual hosts的全局统计信息</li>
</ul>
<blockquote>
<p>5:Administrator</p>
</blockquote>
<ul>
<li>最高权限</li>
<li>可以创建和删除virtual hosts</li>
<li>可以查看，创建和删除users</li>
<li>查看创建permissions</li>
<li>关闭所有用户的connections</li>
</ul>
<h2 id="模式">模式</h2>
<ul>
<li>Simple:
<ul>
<li>1.创建连接工程</li>
<li>2.创建连接Connection</li>
<li>3.通过连接获取通道Channel</li>
<li>4.通过通道创建交换机、声明队列、绑定关系、路由key、发送消息和接受消息</li>
<li>5.准备消息内容</li>
<li>6.发送消息给队列queue</li>
<li>7.关闭连接</li>
<li>8.关闭通道</li>
</ul></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）yum 包更新到最新</span><br><span class="line">&gt; yum update</span><br><span class="line">（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">（3）设置yum源为阿里云</span><br><span class="line">&gt; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">（4）安装docker</span><br><span class="line">&gt; yum install docker-ce -y</span><br><span class="line">（5）安装后查看docker版本</span><br><span class="line">&gt; docker -v</span><br><span class="line"> (6) 安装加速镜像</span><br><span class="line"> sudo mkdir -p /etc/docker</span><br><span class="line"> sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"> &#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://0wrdwnn6.mirror.aliyuncs.com&quot;]</span><br><span class="line"> &#125;</span><br><span class="line"> EOF</span><br><span class="line"> sudo systemctl daemon-reload</span><br><span class="line"> sudo systemctl restart docker</span><br><span class="line"> (7) 获取rabbit镜像：</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"> (8)创建并运行容器</span><br><span class="line">&gt; docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e           RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</span><br><span class="line"> (9)查看日志</span><br><span class="line">&gt; docker logs -f myrabbit</span><br><span class="line"> (10)查看服务</span><br><span class="line">&gt; docker ps -a</span><br><span class="line"> (11)关闭容器</span><br><span class="line">&gt; docker 08d03ae27334 stop</span><br></pre></td></tr></table></figure>
<h3 id="为什么rabbitmq是基于通道而不是基于连接">为什么RabbitMq是基于通道而不是基于连接？</h3>
<ul>
<li>Connection表示到消息代理的真实TCP连接，而Channel是其中的虚拟连接(AMQP连接)。这样，您可以在应用程序内部使用任意数量的(虚拟)连接，而不会使TCP连接使代理过载</li>
<li>您可以为所有内容使用一个Channel。但是，如果您有多个线程，建议为每个线程使用不同的Channel</li>
</ul>
<h3 id="可以存在没有交换机的队列么">可以存在没有交换机的队列么？</h3>
<ul>
<li>不可以，没有为队列指定交换机时，同一指向默认交换机</li>
</ul>
<h2 id="rabbitmq核心组件">RabbitMq核心组件</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-structure.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>每一个virtual Host里还有routinkey -&gt; 条件 分发给不同的消费者 (对应非广播场景) -&gt; 过滤</li>
<li>RabbitMQ 消息传递模型的核心思想是生产者从不直接向队列发送任何消息 实际上，生产者经常甚至根本不知道消息是否会被传送到任何队列</li>
<li>生产者只能将消息发送到<em>交换</em>。交换是一件非常简单的事情。一方面它接收来自生产者的消息，另一方面将它们推送到队列中。交易所必须确切地知道如何处理它收到的消息。它应该附加到特定队列吗？它应该附加到许多队列中吗？或者它应该被丢弃。其规则由<em>交换类型</em>定义 。</li>
</ul>
<h2 id="工作模式">工作模式</h2>
<h3 id="简单模式">简单模式</h3>
<ul>
<li>simple
<ul>
<li>应用场景：手机短信、邮件单发</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-simple.png" alt="simple" /><figcaption aria-hidden="true">simple</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28 20:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明组件、交换机和队列、简单模板案例、交换机使用默认交换机，队列需要声明</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否持久化</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否专属</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否自动删除，从第一个消费端监听队列开始</span></span><br><span class="line">                <span class="comment">//计算，到最后一个消费端断开连接，队列就会自动删除</span></span><br><span class="line">                <span class="keyword">null</span>);<span class="comment">//map类型 key值固定一批属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息到队列 生产端 永远不会把消息直接发给队列，发给交换机</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;whlll你好啊&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//将消息发给(AMQP DEFAULT)交换机 名字&quot;&quot;</span></span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,<span class="comment">//发送给的交换机的名字，默认为空</span></span><br><span class="line">                <span class="string">&quot;simple&quot;</span>,<span class="comment">//设置路由key</span></span><br><span class="line">                <span class="keyword">null</span>,<span class="comment">//发送消息时携带的参数</span></span><br><span class="line">                msgByte<span class="comment">//消息体</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;simple&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 传递回调对象. 消息就在这个对象里</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> s        当前消费端id</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> delivery 封装了消息的对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="comment">//从消息对象中拿到信息</span></span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费玩消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 当连接对象channel 主动关闭消费端连接时 cancel 这个方法才会被调用</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@param</span> s 消费端id</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//使用while true 将线程卡死，否则看不到消息消费逻辑</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="work模式">Work模式</h3>
<ul>
<li>work queues
<ul>
<li>工作队列（又名：<em>任务队列</em>）背后的主要思想是避免立即执行资源密集型任务而不得不等待它完成。相反，我们安排任务稍后完成。我们将一个<em>任务</em>封装 成一条消息并发送到队列中。在后台运行的工作进程将弹出任务并最终执行作业。当您运行许多工人时，任务将在他们之间共享</li>
<li>应用场景：抢红包、资源分配</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-work.png" alt="work queues" /><figcaption aria-hidden="true">work queues</figcaption>
</figure>
<h4 id="轮询分发">轮询分发</h4>
<ul>
<li>轮询分发(均匀分给每一个消费者)：默认为轮询 可以不设置为手动应答</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="公平分发">公平分发</h4>
<ul>
<li>公平分发(谁新能好优先分给谁处理)：配置Qos并谁设置为手动应答</li>
<li>Qos：每次从队列读取的消息条数(根据具体的设备资源情况而定)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>+i;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者02：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="发布订阅模式">发布/订阅模式</h3>
<ul>
<li>publish/sbscribe(Fanout)
<ul>
<li>工作队列背后的假设是每个任务都被交付给一个工人。在这一部分，我们将做一些完全不同的事情——我们将向多个消费者传递一条消息。这种模式被称为“发布/订阅”</li>
<li>应用场景：邮件的群发、广告的群发</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/exchange.png" alt="excahnge" /><figcaption aria-hidden="true">excahnge</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutMode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初试化连接</span></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机，队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字,绑定默认交换机,暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME,TYPE);<span class="comment">//声明了一个名为 fanout_ex 类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系,由于发布订阅,绑定时需要提供自定义的路由key,随意</span></span><br><span class="line">        channel.queueBind(QUEUE01,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,发布订阅模式&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;北京&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="路由模式">路由模式</h3>
<ul>
<li>routing(direct)
<ul>
<li>应用场景：处理一些特殊的消息逻辑,可以经过路由的筛选</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050045110.png" alt="routing" /><figcaption aria-hidden="true">routing</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备交换机，队列名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01 = TYPE + <span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02 = TYPE + <span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字，绑定默认交换机，暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);<span class="comment">//声明一个名为fanout_ex类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系。由于发布订阅，绑定时需要提供自定义的路由key，随意</span></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;你好，路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;上海&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主题模式">主题模式</h3>
<ul>
<li>topics
<ul>
<li>虽然使用直接交换改进了我们的系统，但它仍然有局限性——它不能基于多个标准进行路由。</li>
<li>*（星号）可以正好代替一个词。</li>
<li># (hash) 可以代替零个或多个单词。</li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046915.png" alt="eg_1" /><figcaption aria-hidden="true">eg_1</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046851.png" alt="eg_2" /><figcaption aria-hidden="true">eg_2</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChannelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机,队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//topic_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);</span><br><span class="line"></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.北京.#&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.*.*.*.*&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;*.上海.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;中国.上海.大兴.亦庄.你爹&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="header模式">Header模式</h3>
<ul>
<li>RPC(header)
<ul>
<li>如果我们需要在远程计算机上运行一个函数并等待结果呢？嗯，这是一个不同的故事。这种模式通常称为<em>远程过程调用</em>或<em>RPC</em></li>
</ul></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050056988.png" alt="header" /><figcaption aria-hidden="true">header</figcaption>
</figure>
<ul>
<li>第三个参数 -&gt; 附加参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes());</span><br></pre></td></tr></table></figure>
<h2 id="整合springboot-fanout模式">整合SpringBoot-Fanout模式</h2>
<h3 id="生产者">生产者</h3>
<h4 id="application.yml">application.yml</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.115</span><span class="number">.207</span><span class="number">.246</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>
<h4 id="service">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="config">config</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="test">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者">消费者</h3>
<h4 id="service.fanout">service.fanout</h4>
<ul>
<li>FanoutDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>FanoutEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>FanoutSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="整合springboot-direct模式">整合SpringBoot-Direct模式</h2>
<h3 id="生产者-1">生产者</h3>
<h4 id="service-1">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="config-1">config</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;direct_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(directExchange()).with(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(directExchange()).with(<span class="string">&quot;duanxin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(directExchange()).with(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="test-1">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Fanout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderFanout(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Direct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderDirect(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者-1">消费者</h3>
<h4 id="service.direct">service.direct</h4>
<ul>
<li>DirectDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>DirectEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>DirectSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="懒加载">懒加载</h2>
<p>配置类应该先在消费者配置启动，等待消息即可</p>
<h2 id="整合springboot-topic模式注解方式">整合SpringBoot-Topic模式(注解方式)</h2>
<h3 id="生产者-2">生产者</h3>
<h4 id="service-2">service</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTopic</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;topic_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;com.duanxin.&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="test-2">Test</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    orderService.makeOrderTopic(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费者-2">消费者</h3>
<h4 id="service.topic">service.Topic</h4>
<ul>
<li>TopicDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.duanxin.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TopicEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.email.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TopicSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;sms.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.sms.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ttl过期时间">TTL过期时间</h2>
<p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置。</p>
<ul>
<li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li>
<li>第二种方法是对消息进行单独设置，每条消息TTL可以不同。</li>
</ul>
<p>如果上述两种方法同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message被投递到死信队列， 消费者将无法再收到该消息。</p>
<p><strong>实现设置队列过期时间</strong></p>
<ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlRabbitmqConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>业务层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTtl</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;user:&quot;</span>+orderNumer);</span><br><span class="line">        String routeKey = <span class="string">&quot;ttl&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ fanout</span></span><br><span class="line">        rabbitTemplate.convertAndSend(ttlExchangeName, routeKey, orderNumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Testvoid</span> contextLoads2Ttl() <span class="keyword">throws</span> InterruptedException &#123;    orderService.makeOrderTtl(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>消费者监视类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;ttl.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">ttlRevice</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ttl --&gt;&gt;&gt;&gt;&gt;&gt;&gt;邮件发送消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现设置消息过期机制</strong></p>
<ul>
<li>producer代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">messageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;message.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">messageOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;message_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(messageQueue()).to(messageOrderExchange()).with(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>producer发送消息代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlOrder</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">&quot;message_order_exchange&quot;</span>;</span><br><span class="line">        String routeKey = <span class="string">&quot;message&quot;</span>;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot;,订单编号是：&quot;</span> + orderNumer);</span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey,userId, messagePostProcessor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>consumer消费者监听方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;message.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">messageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageRevice</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message-&gt;&gt;&gt;&gt;消费消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>生产者测试类发送消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.ttlOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot; 1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="死信队列">死信队列</h2>
<ul>
<li><p>概念</p></li>
<li><p>当一条消息在队列中出现以下三种情况的时候，该消息就会变成一条死信。</p>
<ul>
<li>消息被拒绝(basic.reject / basic.nack)，并且requeue = false</li>
<li>消息TTL过期</li>
<li>队列达到最大长度</li>
</ul></li>
<li><p>当消息在一个队列中变成一个死信之后，如果配置了死信队列，它将被重新publish到死信交换机，死信交换机将死信投递到一个队列上，这个队列就是死信队列</p></li>
<li><p>生产者配置类</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadRabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;dead_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadqueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadbinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadqueue()).to(deadExchange()).with(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改原TTL队列属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dead_direct_exchange&quot;</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;dead&quot;</span>);<span class="comment">//fanout不需要配置</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><strong>error：队列已存在 不会覆盖 (线上环境 -&gt; 新建一个属性一样的队列绑定死信队列来替换 危险 -&gt; 直接删除线上队列)</strong></p>
<h2 id="rabbitmq内存磁盘的监控">RabbitMq内存磁盘的监控</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-io.png" alt="rabbitmq-io" /><figcaption aria-hidden="true">rabbitmq-io</figcaption>
</figure>
<ul>
<li>内存</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">vm_memory_high_watermark.relative</span> = (<span class="number">0.4</span>~<span class="number">0.7</span>)</span><br><span class="line">&gt;<span class="attr">vm_memory_high_watermark.absolute</span> = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_vm_memory_high_watermark.absolute</span> = <span class="number">50</span>MB</span><br></pre></td></tr></table></figure>
<ul>
<li>磁盘</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">disk_free_limit.relative</span> = <span class="number">3.0</span>disk_free_limit.absolute = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_disk_free_limit.absolute</span> = <span class="number">100</span>GB</span><br></pre></td></tr></table></figure>
<h2 id="rabbitmq分布式事务">Rabbitmq分布式事务</h2>
<p>在不同的系统之间(JVM)如何保持数据的一致性 -&gt; 分布式事务</p>
<ul>
<li>本地消息表(异步确保)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110071434955.png" /></p>
<p>执行步骤如下:</p>
<ol type="1">
<li>MQ发送方发送远程事务消息到MQ Server;</li>
<li>MQ Server给予响应, 表明事务消息已成功到达MQ Server.</li>
<li>MQ发送方Commit本地事务.</li>
<li>若本地事务Commit成功, 则通知MQ Server允许对应事务消息被消费; 若本地事务失败, 则通知MQ Server对应事务消息应被丢弃.</li>
<li>若MQ发送方超时未对MQ Server作出本地事务执行状态的反馈, 那么需要MQ Servfer向MQ发送方主动回查事务状态, 以决定事务消息是否能被消费.</li>
<li>当得知本地事务执行成功时, MQ Server允许MQ订阅方消费本条事务消息</li>
</ol>
<p>需要额外说明的一点, 就是事务消息投递到MQ订阅方后, 并不一定能够成功执行. 需要MQ订阅方主动给予消费反馈(ack)</p>
<ul>
<li>如果MQ订阅方执行远程事务成功, 则给予消费成功的ack, 那么MQ Server可以安全将事务消息移除;</li>
<li>如果执行失败, MQ Server需要对消息重新投递, 直至消费成功.</li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>消息中间件在系统中扮演一个重要的角色, 所有的事务消息都需要通过它来传达, 所以消息中间件也需要支持 HAC 来确保事务消息不丢失.</li>
<li>根据业务逻辑的具体实现不同，还可能需要对消息中间件增加消息不重复, 不乱序等其它要求.</li>
</ul>
<h3 id="适用场景">适用场景</h3>
<ul>
<li>执行周期较长</li>
<li>实时性要求不高</li>
</ul>
<p>例如:</p>
<ul>
<li>跨行转账/汇款业务(两个服务分别在不同的银行中)</li>
<li>退货/退款业务</li>
<li>财务, 账单统计业务(先发送到消息中间件, 然后进行批量记账)</li>
</ul>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>RabbitMq</tag>
        <tag>消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2021/10/24/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>SpringBoot 未完待续 无期限更新</p>
<span id="more"></span>
<h2 id="springboot">SpringBoot</h2>
<ul>
<li>是什么</li>
<li>配置如何编写 yaml</li>
<li>自动配置原理：重要 -&gt; 谈资</li>
<li>集成web开发：业务的核心</li>
<li>集成数据源：Druid</li>
<li>分布式开发：Dubbo + zookeeper</li>
<li>swagger：接口文档</li>
<li>任务调度</li>
<li>SpringSecurity：Shiro</li>
</ul>
<h2 id="springcloud">SpringCloud</h2>
<ul>
<li>微服务</li>
<li>springcloud入门</li>
<li>Restful</li>
<li>Eureka</li>
<li>Bibbon</li>
<li>Feign</li>
<li>HyStrix</li>
<li>Zuul 路由网关</li>
<li>SpringCloud config: git</li>
</ul>
<p>MVC三层架构 MVVM 微服务架构</p>
<p>业务：service：userService：===&gt; 模块！</p>
<p>##第一个SpringBoot程序</p>
<p>spring--boot--starter -&gt; 所有的模块都是springboot开头的</p>
<p>##原理初探</p>
<p>自动配置：</p>
<p>pom.xml</p>
<ul>
<li>spring-boot-dependencies:核心依赖在父工程中！</li>
<li>我们在写或者引入一些Springboot依赖的时候，不需要指定版本，就因为有父工程</li>
</ul>
<p>启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动器：说白了就是Springboot的启动场景；</li>
<li>比如spring-boot-starter-web,它就会帮我们自动导入web环境所有的依赖！</li>
<li>springboot会将所有的功能场景，变成一个个的启动器</li>
<li>我们要使用什么功能，就只需要找到对应的启动器就可以了 starter</li>
</ul>
<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将springboot应用启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span>: springboot的配置</span><br><span class="line"><span class="meta">@Configuration</span>: Spring配置类</span><br><span class="line"><span class="meta">@Indexed</span>: Spring组件，可以添加索引 优化性能</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>: 自动配置</span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span>: 自动配置包</span><br><span class="line">    <span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>: 自动配置<span class="string">&quot;包注册&quot;</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span>: 自动配置导入选择</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取候选的配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">        getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">        + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>META-INF/spring.factories:自动配置的核心文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Environment Post Processors</span></span><br><span class="line"><span class="meta">org.springframework.boot.env.EnvironmentPostProcessor</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Listeners</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Filters</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Failure analyzers</span></span><br><span class="line"><span class="meta">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Template availability providers</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># DataSource initializer detectors</span></span><br><span class="line"><span class="meta">org.springframework.boot.sql.init.dependency.DatabaseInitializerDetector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializerDatabaseInitializerDetector</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Depends on database initialization detectors</span></span><br><span class="line"><span class="meta">org.springframework.boot.sql.init.dependency.DependsOnDatabaseInitializationDetector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.JobRepositoryDependsOnDatabaseInitializationDetector,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.quartz.SchedulerDependsOnDatabaseInitializationDetector,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.JdbcIndexedSessionRepositoryDependsOnDatabaseInitializationDetector</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结论：SpringBoot所有自动配置都是在启动的时候扫描并加载：spring.factories所有的自动配置类都在这里面， 但是不一定生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了对应的启动器，我们的自动装配 就会生效，然后就配置成功！</p>
<ul>
<li>1.springboot在启动的时候，从类路径小/META-INF/spring.factories获取指定的值；</li>
<li>2.将这些自动装配的类导入容器，自动装配就会生效，帮我进行自动配置！</li>
<li>3.以前我们需要手动配置的东西，现在有了springboot帮我们做了！</li>
<li>4.整合javaEE，解决方案和自动配置的东西都在 spring-boot-autoconfigure:2.5.4 下</li>
<li>5.它会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器</li>
<li>6.容器中也会存在非常多的xxxAutoConfiguration的文件(<span class="citation" data-cites="Bean">@Bean</span>),就是这些类给容器中导入了这个场景需要的所有组件；并自动配置 -&gt; <span class="citation" data-cites="Configuration">@Configuration</span> JavaConfig</li>
<li>7.有了自动配置类，免去了我们手动编写配置文件的工作</li>
</ul>
<p>关于SpringBoot谈谈你的理解：</p>
<ul>
<li>自动装配</li>
<li>run()</li>
</ul>
<p>全面接管SpringMVC的配置！ 实现！</p>
<p>##SpringBoot配置</p>
<p>yaml可以直接给实体类赋值</p>
<p><strong>精髓：</strong></p>
<ul>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类中</li>
<li>我们再来看这个自动配置类中到底配置了哪些组件(只要我们的组件存在其中，我们就不需要再手动配置了)</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可</li>
</ul>
<p><strong>xxxAutoConfiguration: 自动配置类; 给容器中添加组件</strong></p>
<p><strong>xxxProperties:封装配置文件中的相关属性;</strong></p>
<p>##SpringBoot Web开发 jar: webapp!</p>
<p>自动装配</p>
<p>springboot到底帮我们配置了什么？我们能不能进行修改？能修改哪些东西？能不能扩展？</p>
<p>要解决的问题：</p>
<ul>
<li>导入静态资源,...</li>
<li>首页</li>
<li>jsp,模板引擎Thymeleaf</li>
<li>装配扩展SpringMVC</li>
<li>增删改查</li>
<li>拦截器</li>
<li>国际化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">        registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addResourceHandler</span><span class="params">(ResourceHandlerRegistry registry, String pattern, String... locations)</span> </span>&#123;</span><br><span class="line">    addResourceHandler(registry, pattern, (registration) -&gt; registration.addResourceLocations(locations));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addResourceHandler</span><span class="params">(ResourceHandlerRegistry registry, String pattern,</span></span></span><br><span class="line"><span class="params"><span class="function">        Consumer&lt;ResourceHandlerRegistration&gt; customizer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.hasMappingForPattern(pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ResourceHandlerRegistration registration = registry.addResourceHandler(pattern);</span><br><span class="line">    customizer.accept(registration);</span><br><span class="line">    registration.setCachePeriod(getSeconds(<span class="keyword">this</span>.resourceProperties.getCache().getPeriod()));</span><br><span class="line">    registration.setCacheControl(<span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());</span><br><span class="line">    registration.setUseLastModified(<span class="keyword">this</span>.resourceProperties.getCache().isUseLastModified());</span><br><span class="line">    customizeResourceHandlerRegistration(registration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结:</p>
<ol type="1">
<li>在springboot，我们可以使用以下方式处理静态资源
<ul>
<li>webjars localhost:8080/webjars/</li>
<li>public,static,/**,resources localhost:8080/</li>
</ul></li>
<li>优先级：resources&gt;static(默认)&gt;public</li>
</ol>
<h2 id="首页如何定制">首页如何定制</h2>
<h2 id="模板引擎">模板引擎</h2>
<p>结论：只需要使用Thymeleaf，只需要导入对应的依赖即可，我们将html放在我们的templates目录下即可</p>
<p>在springboot中，有非常多的xxx Configuration 帮助我们进行扩展配置，只要看见这个东西，我们就要注意了！</p>
<h3 id="首页配置">1.首页配置</h3>
<ul>
<li>1.首页配置：注意点，所有页面的静态资源都需要使用thymeleaf接管 -&gt; @{}</li>
<li>2.url@{}</li>
</ul>
<h3 id="页面国际化">2.页面国际化</h3>
<ul>
<li>1.配置i18n文件</li>
<li>2.需要在项目中进行按钮自动切换 -&gt; 自定义组件LocaleResolver</li>
<li>3.记得将自己写的组件配置到spring容器 <span class="citation" data-cites="Bean">@Bean</span></li>
<li>4.#{}</li>
</ul>
<h2 id="如何快速开发一个web">如何快速开发一个Web</h2>
<ul>
<li>1.前端搞定：页面长什么样子：数据</li>
<li>2.设计数据库(数据库设计难点！)</li>
<li>3.前端让他能够自动运行，独立化工程</li>
<li>4.数据接口如何对接：json 对象 all in one!</li>
<li>5.前后端联调测试！</li>
</ul>
<p>1.有一套自己熟悉的后台模板：x-admin</p>
<p>2.前端界面:至少自己能够通过前端框架，组合出来一个网站页面</p>
<ul>
<li>index</li>
<li>about</li>
<li>blog</li>
<li>post</li>
<li>user</li>
</ul>
<p>3.能让这个网站独立运行！</p>
<p>一个月！</p>
<h2 id="回顾">回顾</h2>
<ul>
<li>SpringBoot是什么？</li>
<li>微服务</li>
<li>HelloWorld~</li>
<li>探究源码<sub>自动装配原理</sub></li>
<li>配置 yaml</li>
<li>多文档环境切换</li>
<li>静态资源映射</li>
<li>Thymeleaf th:xxx</li>
<li>SpringBoot 如何扩展MVC javaconfig~</li>
<li>如何修改SpringBoot的默认配置~</li>
<li>CRUD</li>
<li>国际化</li>
<li>拦截器</li>
<li>定制首页、错误页~</li>
</ul>
<h3 id="next">Next</h3>
<ul>
<li>JDBC</li>
<li><strong>Mybatis:重点</strong></li>
<li><strong>Druid：重点</strong></li>
<li><strong>Shiro:安全 重点</strong></li>
<li><strong>Spring Security:安全 重点</strong></li>
<li>异步任务~，邮件发送.定时任务</li>
<li>Swagger</li>
<li>Dubbo + Zookeeper</li>
</ul>
<h3 id="data">Data</h3>
<h3 id="mybatis">Mybatis</h3>
<p>整合包</p>
<p>mybatis-spring-boot-starter</p>
<p>1.导入包</p>
<p>2.配置文件</p>
<p>3.mybatis配置</p>
<p>4.编写sql</p>
<p>5.service层调用dao层</p>
<p>6.controller层调用service层</p>
]]></content>
      <categories>
        <category>工作学习</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>建站指南</title>
    <url>/2021/10/03/%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>终于把这小破站搭好了 你也想拥有一个么 零基础教学局</p>
<span id="more"></span>
<blockquote>
<p>说是指南也谈不上，因为作为一个菜鸟，也都是在网络上搜罗搜罗，东拼西凑，搭好了这个小破站，看到那些维护了5、6年的个人博客网站，顿时心生敬佩</p>
</blockquote>
<h2 id="概述">概述：</h2>
<ul>
<li>网站框架：Hexo
<ul>
<li>选择理由：
<ul>
<li>机缘巧合，一眼就被它简明大气的风格吸引了(Next)，难怪拥戴的人这么多</li>
<li>对我这种初出茅庐的小菜鸡比较友好</li>
<li>学生党福音，白嫖属性Max</li>
</ul></li>
</ul></li>
<li>部署：GitHub Pages
<ul>
<li>选择理由：
<ul>
<li>免费方便，可能之后如果要让更多的人看到，要迁移，好像是跟搜索优先级和服务器访问速度有关(不知道是不是给自己挖了一个坑)</li>
<li>上新一下Github,让自己的仓库充实一下 ，就当成一个开端吧</li>
</ul></li>
</ul></li>
<li>图床：PicGo + gitHub图床
<ul>
<li>选择理由：
<ul>
<li>免费！！！操作相对简单，虽然我也没有怎么体验过其他图床</li>
</ul></li>
</ul></li>
<li>环境版本：
<ul>
<li>Node.js:14.18.0 -&gt; npm:6.14.15(他俩现在是一起的绑定在一起的，就是防止出现版本不适配的问题)</li>
<li>git：2.31.1</li>
</ul></li>
</ul>
<hr />
<h2 id="当你也想搭建一个小破站玩一玩">当你也想搭建一个小破站玩一玩</h2>
<blockquote>
<p>我推荐你阅读官方的文档和作者的指南 当然 如果你是一个和我一样的freshman 你可以将这篇文章当做一个入门，一个new beginning</p>
</blockquote>
<ul>
<li>博主搭建时 参考的文档
<ul>
<li>你把Hexo下下来以后 Hexo init 以后 在博客文件的根目录里的 _config.yml里里面每一个功能模块 上方的注释里都有网址 复制到浏览器查看 然后将网站的语言设置为中文 就可以开启你奇妙的探索之旅了 (反正我是这么做的)</li>
</ul></li>
<li>跟着我这篇博客 走一遍流程</li>
</ul>
<h2 id="环境搭建">1.环境搭建</h2>
<h3 id="nodejs下载">1.1、nodejs下载</h3>
<blockquote>
<p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！(官网cv的，目前不太能理解，感觉有点像jre？)</p>
</blockquote>
<p><font size=6 color=red>坑</font>:如果你之前下载了node.js，是beta版(最、较新的版本) 请务必删了 然后重新下载LTS版本(稳定并且长期维护的版本)，不然你就会像我一样，在npm和node版本适配和vs C++环境的问题上兜兜转转十个小时，一筹莫展。记住一句话，遇到问题超过一小时还没办法解决 就删干净重装稳定版，remake</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p>一路next：<strong>最后这里一定要选择 它会检测当前环境是否完整，然后下载确实的环境 (Attention!)</strong></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location-1.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p>然后在PowerShell(windows)里 node -v 和 npm -v 一下 看看装好了没</p>
<h3 id="git下载和使用">1.2、Git下载和使用</h3>
<ul>
<li>这教程就比较多了 百度第一条 附一下</li>
</ul>
<blockquote>
<p>https://www.cnblogs.com/ximiaomiao/p/7140456.html</p>
</blockquote>
<ul>
<li>Git的原理和相关操作的熟练 来这个网站学习一下吧 比较有趣 动手性还强</li>
</ul>
<blockquote>
<p>https://oschina.gitee.io/learn-git-branching/</p>
</blockquote>
<h3 id="hexo安装">1.3、Hexo安装</h3>
<p>步骤：</p>
<ul>
<li>就安一个内核，至于其他的第三方插件，需要再装(注意这里推荐使用GIt bash 命令行总会出一下莫名其妙的错误)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>
<ul>
<li>查看一下hexo版本 看看安装是否成功了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>出现如下这种 证明安装好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.19042</span><br><span class="line">node: 14.18.0</span><br><span class="line">v8: 8.4.371.23-node.84</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 83</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1l</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>
<ul>
<li>自己找一个喜欢的位置，创建一个空的文件夹，右键git bash一下,输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>初始化，其实就是将GitHub上的核心库clone下来，如果没有科学上网，网速较慢的话，多试几次，总有一次会成功，或者按照网上说的，去查ip，设置本地的Host，不过博主自己实践过，效果真心一般，最快的ip 延时都是 100ms+</p>
<blockquote>
<p>博客文件结构如下</p>
</blockquote>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-structure.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<p><strong>OK! 搞定了 简简单单~~~</strong></p>
<h3 id="hexo测试-hello-world">1.4、Hexo测试 Hello World</h3>
<ul>
<li>同样在博客根目录下 git bash 一下(就是你之前创建的那个文件夹下)，输入</li>
<li>清楚本地缓存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<ul>
<li>编译渲染(general)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<ul>
<li>将博客网站运行在本地(server) 加上--debug本地的改动可以实时的动态在本地的4000端口查看(推荐)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<ul>
<li>在浏览器上输入 localhost:4000查看界面如下</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-start.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>Congratulation! Everything well down~~~</li>
</ul>
<h2 id="个性化博客和deploy发布">2.个性化博客和deploy(发布)</h2>
<blockquote>
<p>在个性化博客之前，首先你需要选一个主题 可以在官网去逛一逛，如果你是被我这篇博客的风格吸引的 又或者 你不知道该怎么选择</p>
<p>那就选nexT 一定没错的 要相信大家的选择</p>
</blockquote>
<ul>
<li>下载主题(theme)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next --save</span><br></pre></td></tr></table></figure>
<ul>
<li>查看博客文件夹下的node_modules里有没有hexo-theme-next 有就下载成功了</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-location.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>进入这个文件夹 以后我们对next主题的配置都是对这里的_config.yml文件配置了</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-config.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<blockquote>
<p>在hexo-theme-next文件夹下 有一个_config.yml 这个主要是个性化主题的</p>
<p>在博客根目录我这里的Blog下，也有一个_config.yml这个主要是配置全局的一些东西</p>
<p>(由于主题配置的_config.yml里的东西太多，这篇博客就引一两个重要的说，然后根目录下的配置文件枚举说明)</p>
</blockquote>
<ul>
<li>Blog/_config.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">whlll-blog</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;whlll的小破站❥&#x27;</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">whlll</span> <span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment"># 网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27; # 设置GitHub pages 这个也可以在博客根目录下的_config.yml下配置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面都是一些规则设置 可以不用管</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format # 时间格式设置</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># 配置主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 配置远程仓库(我这配置的是GitHub的仓库和ali云ESC服务器上的git仓库)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">              <span class="attr">github:</span> <span class="string">https://github.com/whlll-coder/whlll-coder.github.io.git,main</span></span><br><span class="line">              <span class="comment">#hexo: git@47.115.207.246:/home/git/hexo.git,main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span> <span class="comment"># 第三方插件 hexo-word-counter的配置 可以统计每篇博客的阅读时间 字数之类的 感觉很细节很贴心</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span> <span class="comment"># 本地搜索在博客根目录_config.yml下的配置 还需要在主题_config.yml下enable：true一下就可以用了</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>hexo-theme-next/_config.yml(截取博主配置的)</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes # 主题样式 有四个 博主对比了一下 个人比较喜欢Mist</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode # 黑暗模式 网页端看不出来啥 但是移动端会变</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span> <span class="comment"># 网站logo设置(网上有很多免费的在线logo设计软件，虽然质量和可选择性不是那么的尽善尽美 直接改名字替换原来的就ok了 这里不知道能不能使用图床里的url地址 没有以后更新的时候把这个坑填一下)</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span> <span class="comment"># 设置菜单 直接取消注解就可以了 </span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span>	<span class="comment"># 设置社交连接和友情连接 依葫芦画瓢</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/whlll-coder</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:whlll0305lhl@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/u/7193773610</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">谁把钱丢了:</span> <span class="string">https://www.jmyblog.top/</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span> <span class="comment"># 设置是否开启博客的文章目录功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span> <span class="comment"># 开启文章的的打赏功能</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">Buy</span> <span class="string">me</span> <span class="string">a</span> <span class="string">coffee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span> <span class="comment"># 附上付款码</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/wechatpay.jpg</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span> <span class="comment"># 开启GitHub小标 博客右上角</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/whlll-coder</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span> <span class="comment"># 开启本地搜索功能 </span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Chat Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need to enable and configure the chat service.</span></span><br><span class="line"><span class="attr">chat:</span> <span class="comment"># 设置在线客服功能(客服当然是博主本人~~~)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set false to disable icon.</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">Chat</span> <span class="string">with</span> <span class="string">me</span> <span class="comment"># Button text, change it as you wish.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra Support</span></span><br><span class="line"><span class="comment"># For more information: https://chatra.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line"><span class="attr">chatra:</span> <span class="comment"># 先用的是这个软件 感觉还可以 只需要去下面的网站注册一下 然后把setting里的id复制过来就可以了</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">cHCGeJJx2x2CH2DDt</span></span><br><span class="line">  <span class="comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Canvas ribbon</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="string">彩带动画特效</span> <span class="string">个人觉得一般</span> <span class="string">喜欢可以开启看看</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">100</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>搞了这么多这么久 来发布一篇博客试一试吧</p>
</blockquote>
<h3 id="创建博文">2.1、创建博文</h3>
<ul>
<li>一样的，到博客的根目录下 git bash 一下 输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;你的博客标题&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>在根目录下的source/_post文件夹下，你就能找到你刚刚生成的博文的md文件了 用Typora打开皆可以开启你的创作之旅了</li>
<li>在md文件里，hexo会自动帮你生成一个前缀</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: MySql笔记</span><br><span class="line">date: 2021-10-02 19:55:12</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 工作学习</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> MySql</span><br><span class="line"><span class="section">- 数据库</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的categories和tags是什么 -&gt; 文章的分类和标签</p>
</blockquote>
<h3 id="文章分类创建">2.2、文章分类创建</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建成功后，在Blog.md文件 将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-10-02 19:30:09</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文章标签创建">2.3、文章标签创建</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建成功后，在Blog.mdwe文件，将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-03 14:50:12</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文章发布">2.4、文章发布</h3>
<ul>
<li>写好文章保存之后</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d (发布到远程仓库，通过GitHub page便可以访问)</span><br></pre></td></tr></table></figure>
<h2 id="第三方插件">3.第三方插件</h2>
<ul>
<li>在博客根目录下的 package.json 下 有你的当前使用的第三方插件和相关依赖 如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-next&quot;</span>: <span class="string">&quot;^8.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-word-counter&quot;</span>: <span class="string">&quot;0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;live2d-widget-model-tororo&quot;</span>: <span class="string">&quot;^1.0.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hexo-deployer-git">3.1、hexo-deployer-git</h3>
<blockquote>
<p>博客发布是与git适配的一个插件 第一次 hexo d 时 需要在 GitHub setting下生成一个 access token 可以参考b站Hexo教程最后一集3-5分钟搞定</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="hexo-helper-live2d">3.2、hexo-helper-live2d</h3>
<blockquote>
<p>一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>
<ul>
<li>本站的小tororo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-tororo</span><br></pre></td></tr></table></figure>
<p>在博客根目录下的_config.yml下配置一下，配置一下 开猫即用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br></pre></td></tr></table></figure>
<h3 id="hexo-word-counter">3.3、hexo-word-counter</h3>
<blockquote>
<p>字数统计 阅读时长统计</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-word-counter</span><br></pre></td></tr></table></figure>
<h3 id="hexo-tag-cloud">3.4、hexo-tag-cloud</h3>
<blockquote>
<p>标签云</p>
</blockquote>
<ul>
<li>使用</li>
</ul>
<blockquote>
<p>eg:D:_modules-theme-next_macro</p>
</blockquote>
<ul>
<li>修改</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/tags-cloud.png" alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption>
</figure>
<ul>
<li>自定义：根目录下添加</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">  <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">  <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">  <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">  <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">  <span class="attr">maxSpeed:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">pauseOnSelected:</span> <span class="literal">false</span> <span class="comment"># true 意味着当选中对应 tag 时,停止转动</span></span><br></pre></td></tr></table></figure>
<h2 id="迁移aliyun服务器">4.迁移aliyun服务器</h2>
<ul>
<li>站长服务器Linux版本 -&gt; Centos8</li>
</ul>
<h4 id="服务器安装nginx并启动">4.1、服务器安装nginx并启动</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yum install nginx</span><br><span class="line"></span><br><span class="line">&gt;nginx -v //检查是否安装成功</span><br></pre></td></tr></table></figure>
<ul>
<li>/usr/sbin/nginx: nginx 主程序</li>
<li>/etc/nginx: 存放 nginx 相关配置</li>
<li>/var/log/nginx: 存放 nginx 日志</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd /usr/sbin</span><br><span class="line"></span><br><span class="line">&gt;./nginx //启动nginx</span><br><span class="line"></span><br><span class="line">&gt;ps -ef|grep nginx //查看进程 是否启动成功</span><br></pre></td></tr></table></figure>
<h4 id="clone项目到服务器">4.2、Clone项目到服务器</h4>
<ul>
<li>没有 git？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yum install git</span><br><span class="line"></span><br><span class="line">&gt;git --version //检查一下</span><br><span class="line"></span><br><span class="line">&gt;git config --global user.name &quot;your name&quot;</span><br><span class="line">&gt;git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>nginx 默认的目录为 <code>/var/www/html</code>，我们将我们的博客的源代码 clone 至此，将 server 下的 root 字段值修改为 clone 后的博客目录路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd /var/www/html</span><br><span class="line"></span><br><span class="line">&gt;git clone https://github.com/whlll-coder/whlll-coder.github.io.git</span><br><span class="line"></span><br><span class="line">&gt;vim /etc/nginx/nginx.conf //修改为如下</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /var/www/html/whlll-coder.github.io;</span><br></pre></td></tr></table></figure>
<h4 id="创建远程仓库实现同步部署">4.3、创建远程仓库实现同步部署</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;adduser git</span><br><span class="line"></span><br><span class="line">&gt;cd /home/git</span><br><span class="line"></span><br><span class="line">&gt;git init --bare hexo.git //创建裸仓</span><br><span class="line"></span><br><span class="line">&gt;chown -R git:git hexo.git //修改仓库所有者和组的权限 不然 hexo d 会报没有权限修改</span><br><span class="line"></span><br><span class="line">将本机的id_rsa文件内容拷贝到阿里云服务器的 /home/git/.ssh/authorized_keys 中</span><br><span class="line"></span><br><span class="line">&gt;vim /home/git/hexo.git/hooks/post-receive //写入如下</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/html/whlll-coder.github.io --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure>
<ul>
<li>仓库名写GitHub上自己的</li>
</ul>
<h4 id="博客根目录配置deploy">4.2、博客根目录配置deploy</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">              <span class="attr">github:</span> <span class="string">https://github.com/whlll-coder/whlll-coder.github.io.git,main</span></span><br><span class="line">              <span class="attr">hexo:</span> <span class="string">git@47.115.207.246:/home/git/hexo.git,main</span></span><br></pre></td></tr></table></figure>
<ul>
<li>大功告成，现在来试试 hexo clean -&gt; hexo g -&gt; hexo d 吧</li>
</ul>
]]></content>
      <categories>
        <category>小破站</category>
      </categories>
      <tags>
        <tag>建站指南</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习Pytorch环境配置</title>
    <url>/2021/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>大三上创新实践 机器学习环境搭建</p>
<span id="more"></span>
<blockquote>
<p>本文主要介绍使用<strong>Pycharm</strong>(Python最好用的文本编辑器) + <strong>Anaconda</strong>(管理Python、conda科学包、和依赖项，以及本地<strong>切换不同的Python环境</strong>) + <strong>Pytorch</strong>(主流深度学习科学包)</p>
</blockquote>
<h2 id="下载-pycharm-anaconda">下载 Pycharm &amp; Anaconda</h2>
<ul>
<li>Pycharm</li>
</ul>
<blockquote>
<p>https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows</p>
</blockquote>
<ul>
<li>Anaconda(individual 个人版)</li>
</ul>
<blockquote>
<p>https://www.anaconda.com/products/individual</p>
</blockquote>
<p><strong>注意</strong>：<strong>使用管理员运行</strong> + 勾选<strong>将anaconda添加到系统环境变量</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262158954.png" /></p>
<h2 id="使用conda配置pytorch环境">使用conda配置Pytorch环境</h2>
<h3 id="运行-anaconda-prompt">运行 <strong>Anaconda Prompt</strong></h3>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262201696.png" /></p>
<p><strong>注意：</strong></p>
<blockquote>
<p>一个坑 ：使用 <strong>conda</strong> 更新或者下载依赖项或包的时候 记得关闭VPN代理 否者会报错 <strong>Unexpected Error</strong></p>
</blockquote>
<ul>
<li>出现下 证明安装成功</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262238855.png" /></p>
<h3 id="配置清华镜像源">配置清华镜像源</h3>
<blockquote>
<p>为什么博主配置以后比访问外网还慢 不理解 如果你也后悔了</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<h4 id="取消配置清华镜像源">取消配置清华镜像源</h4>
<ul>
<li>删除 <strong>C:* 下的 </strong>.condarc** 文件即可 (如果没有就用Everything搜一搜在哪)</li>
</ul>
<h4 id="查看镜像源是否配置成功">查看镜像源是否配置成功</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<h3 id="创建pytorch的环境">创建Pytorch的环境</h3>
<ul>
<li><strong>命名</strong>环境 并 指定 <strong>Python</strong> 版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n [名字] python=3.7</span><br></pre></td></tr></table></figure>
<ul>
<li>查看所有环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>
<ul>
<li>激活创建的环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate [名字]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行跳转到 <strong>([名字]) C:&gt;</strong> 则跳转成功</p>
</blockquote>
<ul>
<li>下载 <strong>Pytorch</strong>（官网CV下来的）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一路 y 或者 Enter</p>
<p>可多次运行次命令 查看是否漏包 如提示 <strong>All Done</strong> 证明 Pytorch 安装成功</p>
</blockquote>
<ul>
<li>下载 <strong>juypter notebook</strong>（可以分开运行你程序的每一个板块 验证阶段性的结果是否符合预期）</li>
</ul>
<blockquote>
<p>使用方法 参见 https://www.zhihu.com/question/46309360/answer/254638807</p>
<p>运行方法 -&gt; 在当前环境下 输入 <strong>juypter notebook</strong> 即可运行 当前环境下的 notebook</p>
</blockquote>
<h3 id="退出当前环境">退出当前环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda deactivate [名字]</span><br></pre></td></tr></table></figure>
<h3 id="删除存在的环境">删除存在的环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n [名字] --all</span><br></pre></td></tr></table></figure>
<h2 id="使用-pycharm-配置-创建好的-pytorch-环境">使用 PyCharm 配置 创建好的 Pytorch 环境</h2>
<ul>
<li><strong>文件</strong> -&gt; <strong>设置</strong> -&gt; <strong>Python解释器 设置按钮</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262310264.png" /></p>
<ul>
<li>配置本地环境(Anaconda安装目录 因人而异)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262310697.png" /></p>
<ul>
<li>创建 一个 5x3 的 随机初始化的 Tensor</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110262316477.png" /></p>
<h3 id="conda-命令回顾">Conda 命令回顾</h3>
<ul>
<li>查看 conda 基本信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<ul>
<li>激活环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate [名字]</span><br></pre></td></tr></table></figure>
<ul>
<li>退出当前环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda deactivate [名字]</span><br></pre></td></tr></table></figure>
<ul>
<li>删除已创建的环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n [名字] --all</span><br></pre></td></tr></table></figure>
<ul>
<li>创建环境 指定Python版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n [名字] python=3.5</span><br></pre></td></tr></table></figure>
<ul>
<li>下载包和依赖...</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install juypter notebook</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Pytorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记</title>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>大二暑假计算机网络学习笔记总结 为了408 冲冲冲！</p>
<span id="more"></span>
<h2 id="综述">综述</h2>
<p><strong>计算机网络</strong>：</p>
<ul>
<li>概念：<strong>计算机网络是<font color=red>互联的、自治的</font>计算机集合</strong></li>
<li>组成：
<ul>
<li>组成上：硬件、软件、协议</li>
<li><strong>工作方式上</strong>：
<ul>
<li>边缘部分：客户端</li>
<li>核心部分：服务器、路由</li>
</ul></li>
<li>功能组成上：通信子网、资源子网</li>
</ul></li>
<li>功能
<ul>
<li><strong>数据通信</strong></li>
<li>资源共享</li>
<li>分布式处理：<em>一个任务交给多台计算机</em></li>
<li>提高可靠性：<em>计算机的备胎</em></li>
<li>负载均衡：<em>均摊任务</em></li>
</ul></li>
<li>分类
<ul>
<li><strong>分布范围</strong>：广域网、城域网、局域网、个人区域网</li>
<li>使用者：公用网、专用网</li>
<li>交换技术：电路交换、报文交换、分组交换</li>
<li>拓扑结构：总线型、星型、环形、网状型</li>
<li>传输技术：广播式、点对点</li>
</ul></li>
<li>标准化工作及相关组织
<ul>
<li>标准：
<ul>
<li>法定标准</li>
<li>事实标准</li>
</ul></li>
<li>RFC及其发展为因特网标准的四个阶段(补充):
<ul>
<li>Request for Comment:
<ul>
<li>1.因特尔草案</li>
<li>建议标准(网友评价)</li>
<li>IETF、IAB审核</li>
<li>通过</li>
</ul></li>
</ul></li>
<li>相关组织：ISO、ITU、IEEE、IETF</li>
</ul></li>
<li><strong>性能指标</strong></li>
<li><strong>体系结构与参考模型</strong>
<ul>
<li>OSI参考模型</li>
<li>TCP/IP模型</li>
<li>五层参考模型</li>
</ul></li>
</ul>
<h2 id="基础概念">基础概念</h2>
<ul>
<li>性能指标：
<ul>
<li>速率：数据在发射端的发送速度</li>
<li>带宽：<em>车道宽度</em></li>
<li>吞吐量：单位时间内通过的数据(b/s Kb/s Mb/s)</li>
</ul></li>
<li>时延:
<ul>
<li>发送时延</li>
<li>传播时延</li>
<li>排队时延(等待处理)</li>
<li>处理时延</li>
</ul></li>
<li>时延带宽积： 每秒发送的数据(b Kb Mb)</li>
<li>RTT(往返时延)：<em>数据开始传播 -&gt; 接到并处理完毕 的时间</em></li>
<li>利用率：
<ul>
<li>信道利用率：有数据通过的时间/总时间</li>
<li>网络利用率：信道利用率加权平均值</li>
</ul></li>
</ul>
<h2 id="基础模型">基础模型</h2>
<h3 id="分层结构">分层结构</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th></th>
<th></th>
<th>分层结构</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td>5 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>4/5层接口</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>H4</td>
<td>4 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>3/4层接口</td>
</tr>
<tr class="odd">
<td></td>
<td>H3</td>
<td>3 DATA</td>
<td>3 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>2/3层接口</td>
</tr>
<tr class="odd">
<td>H2</td>
<td>2 DATA</td>
<td>2 DATA</td>
<td>2 DATA</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>1/2层接口</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td>原始01机器码</td>
</tr>
</tbody>
</table>
<p>相关概念：</p>
<ul>
<li>对等实体(同一层)：遵循同一协议</li>
<li>下层为上层通过 <strong>接口</strong> 提供 <strong>服务</strong></li>
<li>协议包括：
<ul>
<li>语法：规定传输数据的格式</li>
<li>语义：规定所要完成的功能</li>
<li>同步：规定各种操作的顺序</li>
</ul></li>
</ul>
<p>PCI：协议控制信息</p>
<p>SUD：服务数据单元：垂直提供服务的数据</p>
<p>PDU：协议数据单元：水平对等协议的传送的数据单位</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110241921611.png" alt="PCI-SDU" /><figcaption aria-hidden="true">PCI-SDU</figcaption>
</figure>
<h3 id="osi参考模型">OSI参考模型</h3>
<ul>
<li><p>物 -&gt;物理层</p>
<ul>
<li>定义接口特性</li>
<li>定义传输模式 -&gt; 单工、半双工、双工</li>
<li>定义传输速率</li>
<li>比特同步</li>
</ul></li>
<li><p>联 -&gt;数据链路层</p>
<ul>
<li><p>成帧</p></li>
<li><p>差错控制</p></li>
<li><p>流量控制</p></li>
<li><p>访问接入控制</p></li>
<li><p>主要协议：SDLC、HDLC、PPP、STP</p>
<p><strong><font color=red>帧</font></strong></p></li>
</ul></li>
<li><p>网 -&gt;网络层</p>
<ul>
<li>路由选择 -&gt;最佳路径</li>
<li>流量控制</li>
<li>差错控制</li>
<li>拥塞控制</li>
</ul></li>
</ul>
<p>​ 主要协议：IP、IPX、ICMP、IGMP、ARP、RAFP、DSPF</p>
<p>​ <strong><font color=red>分组（单位：数据报）</font></strong></p>
<ul>
<li><p>淑 -&gt;传输层</p>
<ul>
<li><p>可靠（确认后传输，大数据）、不可靠传输（小数据）</p></li>
<li><p>差错控制</p></li>
<li><p>流量控制（控制速度）</p></li>
<li><p>复用（数据一起打包）、分用（根据端口拆包）</p>
<p><strong><font color=red>数据</font></strong></p></li>
</ul></li>
<li><p>慧 -&gt;会话层</p>
<ul>
<li>建立、管理、终止会话</li>
<li>使用校验点 实现数据同步</li>
</ul></li>
<li><p>试 -&gt;表示层</p>
<ul>
<li>数据格式变换</li>
<li>数据加密解密</li>
<li>数据压缩恢复</li>
</ul></li>
<li><p>用 -&gt;应用层</p>
<ul>
<li>文件传输（FTP）</li>
<li>电子邮件（SMTP）</li>
<li>万维网（HTTP）</li>
</ul></li>
</ul>
<h3 id="tcpip参考模型五层参考模型">TCP/IP参考模型&amp;五层参考模型</h3>
<ul>
<li>OSI参考模型
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul></li>
<li>TCP/IP参考模型
<ul>
<li>应用层(应用层、表示层、会话层)</li>
<li>传输层</li>
<li>网际层</li>
<li>网络接口层(数据链路层、物理层)</li>
</ul></li>
<li>TCP/IP协议栈
<ul>
<li>应用层：HTTP、FTP、DNS</li>
<li>传输层：TCP、UDP</li>
<li>网际层：IP</li>
<li>网络接口层：Ethernet、ATM、Frame Relay</li>
</ul></li>
<li>五层参考模型：
<ul>
<li>应用层 -&gt; 支出各种网络应用 FTP、SMTP、HTTP</li>
<li>传输层 -&gt; 进程-进程的数据传输 TCP、UDP</li>
<li>网络层 -&gt; 源主机到目的主机的数据分组路由与转发 IP、ICMP、OSPF等</li>
<li>数据链路层 -&gt; 把网络层传下来的数据报组装成帧 Ethernet、PPP</li>
<li>物理层 -&gt; 比特传输</li>
</ul></li>
</ul>
<blockquote>
<p>面向连接：第一是建立连接，在此阶段，发出一个建立连接请求。只有在连接建立成功之后，才能开始数据传输，这是第二阶段。接着，当数据传输完毕，必须释放连接。</p>
</blockquote>
<blockquote>
<p>无连接：直接进行数据传输</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th></th>
<th>ISO/OSI参考模型</th>
<th>TCP/IP模型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>网络层</td>
<td>无连接+面向连接</td>
<td>无连接</td>
</tr>
<tr class="even">
<td>传输层</td>
<td>面向连接</td>
<td>无连接+面向连接</td>
</tr>
</tbody>
</table>
<p>Attention:</p>
<ul>
<li>1.OSI定义三点：服务、协议、接口</li>
<li>2.参考模型先于协议</li>
<li>3.TCP/IP设计之初就考虑到异构网互联问题，将IP作为重层次</li>
</ul>
<h2 id="数据通信基础">数据通信基础</h2>
<ul>
<li><p>物理层：</p>
<ul>
<li><p>概念</p></li>
<li><p>四种特性</p>
<ul>
<li>机械特性: 物理连接所采用的规格、接口形状、引脚数目等</li>
<li>电气特性: 线路上信号的电压范围、阻抗匹配、传输速率等</li>
<li>功能特性: 某一电平的意义</li>
<li>规程特性(过程特性): 各条物理线路的工作规程和时序关系</li>
</ul></li>
<li><p><strong>两个定理</strong></p>
<ul>
<li>奈氏准则</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/奈氏准则.png" alt="奈氏准则" /><figcaption aria-hidden="true">奈氏准则</figcaption>
</figure>
<ul>
<li>香农定理</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/香农定理.png" alt="香农定理" /><figcaption aria-hidden="true">香农定理</figcaption>
</figure></li>
<li><p>物理层传输介质</p>
<ul>
<li>导向: 双绞线、同轴电缆、光纤</li>
<li>非导向
<ul>
<li>无线电波 -&gt; 所有方向 -&gt; 手机通信</li>
<li>微波 -&gt; 单一方向 -&gt; 卫星通信</li>
<li>红外线、激光 -&gt; 单一方向</li>
</ul></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181549021.png" /></p></li>
</ul></li>
<li><p>物理层设备</p>
<ul>
<li>中继器: 对信号还原和再生</li>
<li>集线器: 对信号放大转发(冲突域)</li>
</ul></li>
<li><p>术语</p>
<ul>
<li>码元、速率、波特、带宽
<ul>
<li>码元: 固定时长的信号波形 -&gt; 有具体意义(可携带多比特的信息量)</li>
<li>码元传输速率: 1s传输多少个码元 (单位：Baud波特)</li>
<li>信息传输速率: 1s传输多少个比特</li>
<li>宽带: 最高数据率 (天花板)</li>
</ul></li>
<li>数据、信号、信道、信源、信宿</li>
</ul></li>
<li><p>三种通信方式</p>
<ul>
<li>单工</li>
<li>半双工</li>
<li>全双工</li>
</ul></li>
<li><p>两种数据传输方式</p>
<ul>
<li>串行</li>
<li>并行</li>
</ul></li>
<li><p>编码与调制</p>
<ul>
<li><p>信号</p>
<ul>
<li>数字与模拟</li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/数字与模拟.png" alt="数字与模拟" /><figcaption aria-hidden="true">数字与模拟</figcaption>
</figure>
<ul>
<li>基带与宽带
<ul>
<li>基带信号：原生信号(信源) -&gt; 弱</li>
<li>宽带信号：调制后的高频信号 -&gt; 强</li>
</ul></li>
</ul></li>
<li><p>编码</p>
<ul>
<li><p><strong>数字数据编码为数字信号</strong></p>
<ul>
<li>1.归零编码：后一半归零</li>
<li>2.非归零编码：后一半归一</li>
<li>3.曼彻色特编码：指定先高后低 -&gt;1 / 先低后高 -&gt; 1</li>
<li>4.差分曼彻色特编码：一半 -&gt; 同1异0 （跳变）</li>
<li>5.反向不归零编码：同1异0（跳变）</li>
<li>6.4B/5B编码：4/5 编码效率：80%</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181543758.png" /></p></li>
<li><p><strong>模拟数据编码为数字信号</strong></p>
<ul>
<li>PCM编码器</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181545988.png" /></p></li>
</ul></li>
<li><p>调制</p>
<ul>
<li><strong>数字数据调制为模拟信号</strong></li>
<li>模拟数据调制为模拟信号</li>
</ul></li>
</ul></li>
</ul>
<h2 id="数据链路层">数据链路层</h2>
<ul>
<li><p>概述和功能</p>
<ul>
<li>概述: （搬运工）将网络层发送给它的数据报，安全无差错的传给它的相邻节点 -&gt; 1.加强物理层传输原始比特流的功能 2.将物理层提供的可能出错的物理连接改造成逻辑上无差错的数据链路</li>
<li>功能
<ul>
<li>为网络层提供服务 -&gt; 1.有确定无连接服务 2.无确定无连接服务 3.有确定面向连接服务（有连接一定有确定）</li>
<li>链路管理 -&gt;建立、维持、释放 -&gt; 面向连接的服务</li>
<li>组帧</li>
<li>流量控制</li>
<li>差错控制（位错/帧错）</li>
</ul></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181601547.png" /></p></li>
<li><p>封装成帧和透明传输</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181611996.png" /></p>
<ul>
<li><p>字符计数法</p></li>
<li><p><strong>字符(节)填充法</strong></p></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181605646.png" /></p>
<ul>
<li><strong>零比特填充法</strong>: 5 '1' 1 '0' 出现五个1 立即填充一个0</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181609585.png" /></p>
<ul>
<li>违规编码法</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110181613366.png" /></p>
<p>(由于字节填充法Count字段的脆弱性（其值发生改变将造成灾难性的后果），因此大都使用后两种 -&gt; 2.零比特填充法 3.违规编码法)</p></li>
<li><p><strong>流量控制和可靠传输</strong></p>
<ul>
<li>停止等待协议</li>
<li>GBN</li>
<li>SR</li>
</ul></li>
<li><p>差错控制</p>
<ul>
<li>检错</li>
<li>纠错</li>
</ul></li>
<li><p><strong>介质访问控制</strong></p>
<ul>
<li>静态划分信道</li>
<li>动态分配信道
<ul>
<li>随机访问介质控制</li>
<li>轮询访问介质控制</li>
</ul></li>
</ul></li>
<li><p><strong>局域网、以太网802.3、无线局域网802.11</strong></p></li>
<li><p>广域网使用的链路层协议</p>
<ul>
<li>PPP协议</li>
<li>HDLC协议</li>
</ul></li>
<li><p>链路层设备</p>
<ul>
<li>网桥</li>
<li>交换机</li>
<li>冲突域和广播域</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>408考研</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
