<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jasmin</title>
    <url>/2021/10/03/Jasmin/</url>
    <content><![CDATA[<h1 id="Jasmin"><a href="#Jasmin" class="headerlink" title="Jasmin"></a>Jasmin</h1><p>这篇文章主要教你jasmin的环境的搭建,基本编译语法,以及如何从java快速编写jasmin程序,以应付课程任务,鉴于网上相关资源太少,也没什么人研究这个,写自己的第一篇Blog,回忆一下jasmin的学习过程吧0.0</p>
<span id="more"></span>
<h2 id="jasmin环境搭建与基本编译操作"><a href="#jasmin环境搭建与基本编译操作" class="headerlink" title="jasmin环境搭建与基本编译操作:"></a><strong>jasmin环境搭建与基本编译操作:</strong></h2><p>首先您只需要支付5积分便可从我分享的资源下载jasmin并获得本人编写的部分jasmin例程供你学习.链接附文章末尾</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载jdk并配置好环境变量,命令行输入java –version检查是否成功</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210605001508591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jdk安装验证"></h2><p>jasmin内部文件+examples例程:<br><img src="https://img-blog.csdnimg.cn/20210604233032443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="jasmin软件"><img src="https://img-blog.csdnimg.cn/20210604235242822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="examples例程"></p>
<h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤:"></a><strong>编译步骤:</strong></h2><ul>
<li>1.win+R 输入cmd打开命令行操作界面,打开jasmin文件夹所在目录:这里我将它放在D下方便操作</li>
<li>2.输入:java -jar jasmin.jar examples\q2.j(ps:q2.j为笔者所写的冒泡排序)编译,(Generated编译成功)生成class执行文件.<img src="https://img-blog.csdnimg.cn/20210604235616851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="编译"></li>
<li>3.输入:java q2运行(q2对应代码中的q2类,如果代码中你给debug,那么它编译之后便生产的debug.class可执行文件)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> q2</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 20</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">new java/util/Scanner</span></span><br><span class="line"><span class="function">dup</span></span><br><span class="line"><span class="function">getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">astore_0</span><br><span class="line"></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">newarray <span class="keyword">int</span></span><br><span class="line">astore_1</span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore_2</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot;input:&quot;</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">Loadarray:</span><br><span class="line">aload_0</span><br><span class="line">invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">istore_3</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload_2</span><br><span class="line">iload_3</span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">iinc <span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">iload_2</span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loadarray</span><br><span class="line"></span><br><span class="line">bubsort:</span><br><span class="line">aload_1</span><br><span class="line">arraylength</span><br><span class="line">istore <span class="number">4</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">11</span></span><br><span class="line"></span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">5</span></span><br><span class="line"></span><br><span class="line">Loop_1:</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">6</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">iload <span class="number">4</span></span><br><span class="line">if_icmplt Loop_2</span><br><span class="line">goto output</span><br><span class="line">Loop_2:</span><br><span class="line">iload <span class="number">11</span></span><br><span class="line">iload <span class="number">5</span></span><br><span class="line">isub</span><br><span class="line">istore <span class="number">10</span></span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">10</span></span><br><span class="line">if_icmplt exchange_judge</span><br><span class="line">goto else_1</span><br><span class="line">exchange_judge:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">bipush <span class="number">1</span></span><br><span class="line">iadd</span><br><span class="line">istore <span class="number">7</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line"></span><br><span class="line">if_icmpgt exchange</span><br><span class="line">goto else_2</span><br><span class="line">exchange:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">8</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">9</span></span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">6</span></span><br><span class="line">iload <span class="number">9</span></span><br><span class="line">iastore</span><br><span class="line"></span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">7</span></span><br><span class="line">iload <span class="number">8</span></span><br><span class="line">iastore</span><br><span class="line">goto else_2</span><br><span class="line"></span><br><span class="line">else_1:</span><br><span class="line">iinc <span class="number">5</span> <span class="number">1</span></span><br><span class="line">goto Loop_1</span><br><span class="line"></span><br><span class="line">else_2:</span><br><span class="line">iinc <span class="number">6</span> <span class="number">1</span></span><br><span class="line">goto Loop_2</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">ldc <span class="string">&quot;order:&quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iconst_0</span><br><span class="line">istore <span class="number">12</span></span><br><span class="line">Loop_3:</span><br><span class="line">aload_1</span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">iaload</span><br><span class="line">istore <span class="number">13</span></span><br><span class="line">getstatic java/lang/System.out Ljava/io/PrintStream;</span><br><span class="line">iload <span class="number">13</span></span><br><span class="line">invokevirtual java/io/PrintStream/print(I)V</span><br><span class="line">ldc <span class="string">&quot; &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">iinc <span class="number">12</span> <span class="number">1</span></span><br><span class="line">iload <span class="number">12</span></span><br><span class="line">bipush <span class="number">10</span></span><br><span class="line">if_icmplt Loop_3</span><br><span class="line"></span><br><span class="line">ldc <span class="string">&quot; whlll  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line">ldc <span class="string">&quot; 19041420  &quot;</span></span><br><span class="line">jsr Print</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">Print:</span><br><span class="line">astore <span class="number">2</span></span><br><span class="line">getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">swap</span><br><span class="line">invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">ret <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<p><em>请忽视博主的学号姓名0.0</em></p>
<ul>
<li>4.运行结果:<img src="https://img-blog.csdnimg.cn/20210605001002661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkzNTE2,size_16,color_FFFFFF,t_70#pic_center" alt="运行结果"><br> So easy!</li>
</ul>
<h2 id="当你会java后-情况就变得不一样了"><a href="#当你会java后-情况就变得不一样了" class="headerlink" title="当你会java后,情况就变得不一样了:"></a><strong>当你会java后,情况就变得不一样了:</strong></h2><p>当你有一个约瑟夫环的java代码+javap<br><em>约瑟夫环 java:</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> YSF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 500个小孩围一圈，数到3的退出，问剩下最后的小孩原来是多少号？</span></span><br><span class="line"><span class="comment"> * author@</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YueSeFuHuan</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Scanner sca = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入该游戏的参与人数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = sca.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;输入数到退出的数字：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> m = sca.nextInt();</span><br><span class="line">		sca.close();</span><br><span class="line">		<span class="keyword">int</span> len = n;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (len &gt;= m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i % n] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123; <span class="comment">// 这里判断是否被圈出去</span></span><br><span class="line">				<span class="keyword">if</span> (j % m == <span class="number">0</span>)</span><br><span class="line">				&#123; <span class="comment">// 这里判断是否报的数相同，是则退出该位置，且下一位重新报数</span></span><br><span class="line">				<span class="comment">// System.out.print(a[i%n]+&quot;,&quot;);</span></span><br><span class="line">					a[i % n] = -<span class="number">1</span>;</span><br><span class="line">					i++;</span><br><span class="line">					j = <span class="number">1</span>;</span><br><span class="line">					len--;</span><br><span class="line">				&#125; <span class="keyword">else</span></span><br><span class="line">				&#123; <span class="comment">// 不相同则继续</span></span><br><span class="line">					i++;</span><br><span class="line">					j++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span></span><br><span class="line">			&#123; <span class="comment">// 表示该位置已被圈出，跳向下一位</span></span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[k] &gt; <span class="number">0</span>)</span><br><span class="line">				System.out.print(a[k] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;     whllll 19041420&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>eclipse配置好javap插件(java提供的一个用来查看java字节码的工具),那么你将得到:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;YueSeFuHuan.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YSF</span>.<span class="title">YueSeFuHuan</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> YSF.YueSeFuHuan();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">16</span>                 <span class="comment">// class java/util/Scanner</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: getstatic     #<span class="number">18</span>                 <span class="comment">// Field java/lang/System.in:Ljava/io/InputStream;</span></span><br><span class="line">       <span class="number">7</span>: invokespecial #<span class="number">24</span>                 <span class="comment">// Method java/util/Scanner.&quot;&lt;init&gt;&quot;:(Ljava/io/InputStream;)V</span></span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">14</span>: ldc           #<span class="number">31</span>                 <span class="comment">// String 输入该游戏的参与人数：</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">27</span>: ldc           #<span class="number">43</span>                 <span class="comment">// String 输入数到退出的数字：</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual #<span class="number">39</span>                 <span class="comment">// Method java/util/Scanner.nextInt:()I</span></span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual #<span class="number">45</span>                 <span class="comment">// Method java/util/Scanner.close:()V</span></span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span>, -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span>           #<span class="number">48</span>                 <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic  #<span class="number">50</span>                 <span class="comment">// Method java/lang/String.valueOf:(I)Ljava/lang/String;</span></span><br><span class="line">     <span class="number">166</span>: invokespecial #<span class="number">56</span>                 <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">169</span>: ldc           #<span class="number">58</span>                 <span class="comment">// String ,</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual #<span class="number">60</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">     <span class="number">174</span>: invokevirtual #<span class="number">64</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">     <span class="number">177</span>: invokevirtual #<span class="number">68</span>                 <span class="comment">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span>, <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic     #<span class="number">27</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">     <span class="number">192</span>: ldc           #<span class="number">71</span>                 <span class="comment">// String      whllll 19041420</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual #<span class="number">33</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**下一步:**修改为jasmin的标准代码以及结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class <span class="keyword">public</span> YSF</span><br><span class="line">.<span class="keyword">super</span> java/lang/Object</span><br><span class="line"></span><br><span class="line">.method <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">   aload_0</span><br><span class="line">   invokenonvirtual java/lang/Object/&lt;init&gt;()V</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">.limit locals 10</span></span><br><span class="line"><span class="function">.limit stack 10</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">       0: new java/util/Scanner</span></span><br><span class="line"><span class="function">       3: dup</span></span><br><span class="line"><span class="function">       4: getstatic java/lang/System.in Ljava/io/InputStream</span>;</span><br><span class="line">       <span class="number">7</span>: invokespecial java/util/Scanner/&lt;init&gt;(Ljava/io/InputStream;)V</span><br><span class="line">      <span class="number">10</span>: astore_1</span><br><span class="line">      <span class="number">11</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">14</span>: ldc <span class="string">&quot;Enter the number of players in the game: &quot;</span></span><br><span class="line">      <span class="number">16</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">23</span>: istore_2</span><br><span class="line">      <span class="number">24</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">27</span>: ldc <span class="string">&quot;Enter the number to the exit number:&quot;</span></span><br><span class="line">      <span class="number">29</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      <span class="number">33</span>: invokevirtual java/util/Scanner/nextInt()I</span><br><span class="line">      <span class="number">36</span>: istore_3</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      <span class="number">38</span>: invokevirtual java/util/Scanner/close()V</span><br><span class="line">      <span class="number">41</span>: iload_2</span><br><span class="line">      <span class="number">42</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">44</span>: iload_2</span><br><span class="line">      <span class="number">45</span>: newarray       <span class="keyword">int</span></span><br><span class="line">      <span class="number">47</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">49</span>: iconst_0</span><br><span class="line">      <span class="number">50</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">52</span>: goto          <span class="number">67</span></span><br><span class="line">      <span class="number">55</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">57</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">59</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">61</span>: iconst_1</span><br><span class="line">      <span class="number">62</span>: iadd</span><br><span class="line">      <span class="number">63</span>: iastore</span><br><span class="line">      <span class="number">64</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">      <span class="number">67</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">69</span>: iload_2</span><br><span class="line">      <span class="number">70</span>: if_icmplt     <span class="number">55</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      <span class="number">74</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">76</span>: iconst_1</span><br><span class="line">      <span class="number">77</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">79</span>: goto          <span class="number">131</span></span><br><span class="line">      <span class="number">82</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">84</span>: iload         <span class="number">6</span></span><br><span class="line">      <span class="number">86</span>: iload_2</span><br><span class="line">      <span class="number">87</span>: irem</span><br><span class="line">      <span class="number">88</span>: iaload</span><br><span class="line">      <span class="number">89</span>: ifle          <span class="number">128</span></span><br><span class="line">      <span class="number">92</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">94</span>: iload_3</span><br><span class="line">      <span class="number">95</span>: irem</span><br><span class="line">      <span class="number">96</span>: ifne          <span class="number">119</span></span><br><span class="line">      <span class="number">99</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">101</span>: iload         <span class="number">6</span></span><br><span class="line">     <span class="number">103</span>: iload_2</span><br><span class="line">     <span class="number">104</span>: irem</span><br><span class="line">     <span class="number">105</span>: iconst_m1</span><br><span class="line">     <span class="number">106</span>: iastore</span><br><span class="line">     <span class="number">107</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">110</span>: iconst_1</span><br><span class="line">     <span class="number">111</span>: istore        <span class="number">7</span></span><br><span class="line">     <span class="number">113</span>: iinc          <span class="number">4</span> -<span class="number">1</span></span><br><span class="line">     <span class="number">116</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">119</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">122</span>: iinc          <span class="number">7</span> <span class="number">1</span></span><br><span class="line">     <span class="number">125</span>: goto          <span class="number">131</span></span><br><span class="line">     <span class="number">128</span>: iinc          <span class="number">6</span> <span class="number">1</span></span><br><span class="line">     <span class="number">131</span>: iload         <span class="number">4</span></span><br><span class="line">     <span class="number">133</span>: iload_3</span><br><span class="line">     <span class="number">134</span>: if_icmpge     <span class="number">82</span></span><br><span class="line">     <span class="number">137</span>: iconst_0</span><br><span class="line">     <span class="number">138</span>: istore        <span class="number">8</span></span><br><span class="line">     <span class="number">140</span>: goto          <span class="number">183</span></span><br><span class="line">     <span class="number">143</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">145</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">147</span>: iaload</span><br><span class="line">     <span class="number">148</span>: ifle          <span class="number">180</span></span><br><span class="line">     <span class="number">151</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">154</span>: <span class="keyword">new</span> java/lang/StringBuilder</span><br><span class="line">     <span class="number">157</span>: dup</span><br><span class="line">     <span class="number">158</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">160</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">162</span>: iaload</span><br><span class="line">     <span class="number">163</span>: invokestatic java/lang/String/valueOf(I)Ljava/lang/String;</span><br><span class="line">     <span class="number">166</span>: invokespecial java/lang/StringBuilder/&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">169</span>: ldc <span class="string">&quot;,&quot;</span></span><br><span class="line">     <span class="number">171</span>: invokevirtual java/lang/StringBuilder/append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">     <span class="number">174</span>: invokevirtual java/lang/StringBuilder/toString()Ljava/lang/String;</span><br><span class="line">     <span class="number">177</span>: invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">180</span>: iinc          <span class="number">8</span> <span class="number">1</span></span><br><span class="line">     <span class="number">183</span>: iload         <span class="number">8</span></span><br><span class="line">     <span class="number">185</span>: iload_2</span><br><span class="line">     <span class="number">186</span>: if_icmplt     <span class="number">143</span></span><br><span class="line">     <span class="number">189</span>: getstatic java/lang/System/out Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">192</span>: ldc <span class="string">&quot;     whllll 19041420&quot;</span></span><br><span class="line">     <span class="number">194</span>: invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V</span><br><span class="line">     <span class="number">197</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<h2 id="部分规则"><a href="#部分规则" class="headerlink" title="部分规则:"></a>部分规则:</h2><ol>
<li>‘#+数字’ 替换为 ‘javap给的注释内容’(#16                 // class java/util/Scanner)</li>
<li>将 . 替换为 /</li>
<li>去掉 “ “(双引号)</li>
</ol>
<p><em>具体参考约瑟夫环案例</em></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后:"></a><strong>最后:</strong></h2><p>一段jasmin代码就搞定了,快速完成了您的课程任务0.0<br>只要把它放在examples文件夹目录下,后缀名改为.j,按上述操作即可编译运行啦~</p>
<h2 id="笔者寄语"><a href="#笔者寄语" class="headerlink" title="笔者寄语:"></a><strong>笔者寄语:</strong></h2><p>jasmin作为java的独立的汇编语言,不同于java的字节码依附于java本身代码而存在,从开发上必然没有高级语言的复用性而带来的简洁优美,但其更有助于初学者学习,了解高级语言的更下层的解释,如何实现上层的功能.jasmin的语法更接近于个人计算机RISIC的体系架构,例如先装载再使用的高并发性…虽然网上都说学这玩意儿没啥意思 笔者也是因为课程要求才涉及它,这点心得希望成为那些觉得它还有点意思的人的一点动力吧0.0</p>
<p>whlll的jasmin软件+样例程序链接:<br><a href="https://download.csdn.net/download/qq_45893516/19393587">jasmin+本人写的一些样例程序仅供学习参考</a></p>
<p>参考书籍:计算机组成及汇编语言原理(第十章) 机械工业出版社 (美)Patrick Juola 著</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
        <tag>Jasmin</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql笔记</title>
    <url>/2021/10/02/MySql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><p><strong>MySQL是一个关系型数据库管理系统</strong></p>
<p>5.7 -&gt; 稳定   </p>
<p><strong>8.0</strong></p>
<span id="more"></span>
<h2 id="1、my-ini"><a href="#1、my-ini" class="headerlink" title="1、my.ini"></a>1、my.ini</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">basedir=D:\Program Files\mysql</span><br><span class="line"></span><br><span class="line">datadir=D:\Program Files\mysql\data</span><br><span class="line"></span><br><span class="line">max_connections=200</span><br><span class="line"></span><br><span class="line">max_connect_errors=10</span><br><span class="line"></span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<h2 id="2、创建数据库"><a href="#2、创建数据库" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h2><p>基字符集：<em>utf-8</em><br>数据库排序规则：<em>utf8—general-ci</em>   </p>
<h3 id="2-0连接数据库"><a href="#2-0连接数据库" class="headerlink" title="2.0连接数据库"></a>2.0连接数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 -- 连接数据库</span><br><span class="line"></span><br><span class="line">update mysql.user</span><br><span class="line">set authentication_string=password(&#x27;123456&#x27;)</span><br><span class="line">where user = &#x27;root&#x27;</span><br><span class="line">  and Host = &#x27;localhost&#x27;;  -- 修改用户密码</span><br><span class="line"></span><br><span class="line">flush privileges ;  -- 刷新权限</span><br><span class="line">-- -----------------------------------------</span><br><span class="line">-- 所有的语句都用;结尾</span><br><span class="line">show databases ; -- 查看所有数据库</span><br><span class="line"></span><br><span class="line">mysql&gt;use school -- 切换数据库 use</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">show tables ; -- 查看数据库中所有的表</span><br><span class="line">describe student; -- 显示数据库中所有表的信息</span><br><span class="line"></span><br><span class="line">create database whlll; -- 创建一个数据库</span><br><span class="line"></span><br><span class="line">exit;</span><br><span class="line">-- 单行注释</span><br><span class="line">/*(多行注释)</span><br><span class="line">你好</span><br><span class="line">whlll</span><br><span class="line">Bye!</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>数据库xxx语言(CRUD 增删改查!)<br>DDL 定义<br>DML 操作<br>DQL 查询<br>DCL 控制<br>###2.操作数据库</p>
<hr>
<p>操作数据库 -&gt; 操作数据库中的表 -&gt; 操作数据库表中的数据</p>
<h3 id="2-1操作数据库-了解"><a href="#2-1操作数据库-了解" class="headerlink" title="2.1操作数据库(了解)"></a>2.1操作数据库(了解)</h3><ol>
<li>创建数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [if not exists] whlll </span><br></pre></td></tr></table></figure></li>
<li>删除数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [if exists] whlll </span><br></pre></td></tr></table></figure></li>
<li>使用数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 如果你的表名或字段名是一个特殊字符 需要带 ``</span><br><span class="line">use `school`;</span><br><span class="line">select `user` from student;</span><br></pre></td></tr></table></figure></li>
<li>查看数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases -- 查看所有的数据库</span><br></pre></td></tr></table></figure>
学习思路：</li>
</ol>
<ul>
<li>对照sqlyog可视化历史记录查看sql</li>
<li>固定的语法或关键字帮助记忆</li>
</ul>
<h3 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2 数据库的列类型"></a>2.2 数据库的列类型</h3><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint 十分小的数据 1字节</li>
<li>smallint 较小的数据  2字节</li>
<li>mediumint 中等大小的数据 3字节</li>
<li>int  <strong>标准的整数</strong>   <strong>4字节</strong></li>
<li>bigint 较大的数据 8字节</li>
<li>float 浮点数 4字节</li>
<li>double 浮点数 8字节 (精度问题！)</li>
<li>decimal 字符串形式的浮点数 金融计算时候，一般使用decimal</li>
</ul>
<hr>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li>char 字符串固定大小 0-255</li>
<li>varchar 可变字符串 0-65535 <strong>常用的</strong></li>
<li>tinytext 微型文本 2^8-1</li>
<li>text 文本串 2^16-1 <strong>保存大文本</strong></li>
</ul>
<hr>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date YYYY-MM-DD,日期</li>
<li>time HH:mm:ss 时间格式</li>
<li><strong>datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li>
<li>timestamp 时间戳， 1970.1.1到现在的毫秒数！ 较为常用</li>
<li>year 年份表示</li>
</ul>
<hr>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li><em>不要使用null值进行计算</em></li>
</ul>
<h3 id="2-3-数据库的字段属性-重点"><a href="#2-3-数据库的字段属性-重点" class="headerlink" title="2.3 数据库的字段属性(重点)"></a>2.3 数据库的字段属性(重点)</h3><blockquote>
<p>Unsigned:</p>
</blockquote>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<hr>
<blockquote>
<p>zerofill：</p>
</blockquote>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充 int(3) -&gt; 5 —&gt; 005</li>
</ul>
<hr>
<blockquote>
<p>自增</p>
</blockquote>
<ul>
<li>通常理解为自增，在上一条的记录基础上+1(默认)</li>
<li>通常用来设计唯一的主键，必须为整数类型</li>
<li>可以自定义主键自增的起始值和增量</li>
</ul>
<hr>
<blockquote>
<p>非空 NULL not null</p>
</blockquote>
<ul>
<li>假设设置为not null ，如果不赋值，则会报错！</li>
<li>NULL，如果不填值，默认为null</li>
</ul>
<hr>
<blockquote>
<p>默认：</p>
</blockquote>
<ul>
<li>设置默认值</li>
<li>eg：sex 默认值为男</li>
</ul>
<hr>
<pre><code>每一个表，都必须存在以下五个字段 -&gt; 项目
id 主键
version 乐观锁
is_delete 伪删除
gmt_create 创建时间
gmt_update 修改时间
</code></pre>
<hr>
<h3 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4 创建数据库表"></a>2.4 创建数据库表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 目标：创建一个school数据库</span><br><span class="line">-- 创建学生表(列，字段) 使用SQL创建</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2)，生日日期(datetime)，家庭住址，email</span><br><span class="line"></span><br><span class="line">-- 注意点，使用英文() ， 表的名称 和 字段 尽量使用 `` 括起来</span><br><span class="line">-- AUTO INCREMENT 自增</span><br><span class="line">-- 字符串使用 单引号括起来！</span><br><span class="line">-- 所有语句后面加,(英文) ,最后一个不用加</span><br><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<p>格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] `表名`(</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释]</span><br><span class="line">) [表类型][字符集设置][注释]</span><br><span class="line"></span><br><span class="line">SHOW CREATE DATABASE school -- 查看创建数据库的语句</span><br><span class="line">SHOW CREATE TABLE student -- 查看student数据表的定义语句</span><br><span class="line">DESC student -- 显示表的结构</span><br></pre></td></tr></table></figure>
<h3 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 关于数据库引擎</span><br><span class="line">/*</span><br><span class="line"> INNODB 默认使用</span><br><span class="line"> MYISAM 早些年使用</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
<tr>
<td>常规使用操作：</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>MYISAM 节约空间，速度快</li>
<li>INNODB 安全性高，事务的处理，多表多用户操作</li>
</ul>
<p><strong>物理空间的存在位置</strong><br>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库<br>本质还是文件的储存   </p>
<p>MySQL引擎在物理文件上的区别    </p>
<ul>
<li>INNODB 在数据库表中只有一个 *.frm 文件，以及上级目录下的 ibdata1 文件</li>
<li>MYISAM 对应文件<ul>
<li>*.frm - 表结构的定义文件</li>
<li>*.MYD 数据文件(data)</li>
<li>*.MYI 索引文件(index)</li>
</ul>
</li>
</ul>
<p><strong>设置数据库表的字符集编码</strong></p>
<pre><code>CHARSET=utf8
</code></pre>
<p>不设置 -&gt; 默认 -&gt; 不支持中文<br>在my.ini中设置默认的编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">character_set_server<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<h3 id="2-6-修改删除表"><a href="#2-6-修改删除表" class="headerlink" title="2.6 修改删除表"></a>2.6 修改删除表</h3><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改表 ALTER TABLE 旧表名 RENAME AS 新表名</span><br><span class="line">ALTER TABLE teacher RENAME AS teacher1;</span><br><span class="line">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span><br><span class="line">ALTER TABLE teacher1 ADD age INT(11);</span><br><span class="line">-- 修改表的字段(重命名，修改约束！)</span><br><span class="line">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span><br><span class="line">ALTER TABLE teacher1 MODIFY age VARCHAR(11); -- 修改约束</span><br><span class="line">-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性[]</span><br><span class="line">ALTER TABLE teacher1 CHANGE age age1 INT(1); -- 字段重命名</span><br><span class="line">    </span><br><span class="line">-- 删除表的字段</span><br><span class="line">ALTER TABLE teacher1 DROP age1;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">DROP TABLE IF EXISTS teacher1</span><br></pre></td></tr></table></figure>
<p><strong>所有的创建和删除尽量加上判断，以免报错~</strong><br>注意点：</p>
<ul>
<li>``字段名,使用这个包裹！</li>
<li>注释 – /**/</li>
<li>sql 关键字大小写不敏感 -&gt; 建议写小写</li>
<li>所有的符号用英文</li>
</ul>
<h2 id="3、MySQL数据管理"><a href="#3、MySQL数据管理" class="headerlink" title="3、MySQL数据管理"></a>3、MySQL数据管理</h2><h3 id="3-1-外键-了解"><a href="#3-1-外键-了解" class="headerlink" title="3.1 外键(了解)"></a>3.1 外键(了解)</h3><blockquote>
<p>方式一、在创建表的时候，增加约束(麻烦，比较复杂)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line">    </span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span><br><span class="line">-- 定义外键key</span><br><span class="line">-- 给这个外键添加约束(执行引用) references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `gradeid` INT(10) NOT NULL COMMENT &#x27;学生的年级&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`),</span><br><span class="line">    KEY `FK_gradeid` (`gradeid`),</span><br><span class="line">    CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade`(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<p>删除有外键关系的表的时候，必须删除引用别人的表(从表),再删除被引用的表(主表)    </p>
<blockquote>
<p>方式二、创建表成功后，添加外键约束</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `grade`(</span><br><span class="line">    `gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年纪id&#x27;,</span><br><span class="line">    `gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年纪名称&#x27;,</span><br><span class="line">    PRIMARY KEY(`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line">    </span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的 gradeid</span><br><span class="line">-- 定义外键key</span><br><span class="line">-- 给这个外键添加约束(执行引用) references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`</span><br><span class="line">(</span><br><span class="line">    `id`   INT(4)      NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">    `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    `pwd`  VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">    `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">    `gradeid` INT(10) NOT NULL COMMENT &#x27;学生的年级&#x27;,</span><br><span class="line">    `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">    `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">    `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 创建表的时候没有外键关系</span><br><span class="line">ALTER TABLE `student`</span><br><span class="line">    ADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);</span><br><span class="line"></span><br><span class="line">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表(哪个字段);</span><br></pre></td></tr></table></figure>
<p>以上操作都是物理外键，数据库级别的外键，我们不建议使用！(避免数据库过多造成困扰)   </p>
<p><strong>最佳实践</strong></p>
<ul>
<li><p>数据库就是单纯的表，只用来存数据，只有行(数据)和列(字段)</p>
</li>
<li><p>我们想使用多张表的数据，想使用外键(程序去实现)<br>###3.2 DML语言(全部记住)<br>数据库意义：数据存储，数据管理<br>DML语言：数据操作语言</p>
</li>
<li><p>insert</p>
</li>
<li><p>update</p>
</li>
<li><p>delete</p>
<h3 id="3-3、添加"><a href="#3-3、添加" class="headerlink" title="3.3、添加"></a>3.3、添加</h3><blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入语句(添加)</span><br><span class="line">-- insert into 表名([字段名1，字段2，字段3])values(&#x27;值1&#x27;),(&#x27;值2&#x27;),(&#x27;值3&#x27;),...</span><br><span class="line">INSERT INTO `grade`(`gradename`) VALUES(&#x27;大四&#x27;)</span><br><span class="line"></span><br><span class="line">-- 由于主键自增我们可以省略(如果不写表的字段，他就会一一匹配)</span><br><span class="line">INSERT INTO `grade` VALUES(&#x27;大三&#x27;)</span><br><span class="line"></span><br><span class="line">-- 一般写插入语句，我们一定要数据和字段一一对应！</span><br><span class="line"></span><br><span class="line">-- 插入多个字段</span><br><span class="line">INSERT INTO `g`student`rade`(`gradename`) VALUES(&#x27;大二&#x27;),(&#x27;大一&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`) VALUES (&#x27;张三&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) VALUES (&#x27;张三&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) </span><br><span class="line">VALUES (&#x27;李四&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;),(&#x27;王五&#x27;,&#x27;aaaaaa&#x27;,&#x27;男&#x27;)</span><br></pre></td></tr></table></figure>
<p>语法：<code>insert into 表名([字段名1，字段2，字段3])values(&#39;值1&#39;),(&#39;值2&#39;),(&#39;值3&#39;),...</code></p>
</li>
</ul>
<p>注意事项：   </p>
<ol>
<li>字段和字段之间使用 英文逗号 隔开</li>
<li>字段可以省略，但是后面的值必须一一对应</li>
<li>可以同时插入多条数据，VALUES后面的值，需要使用 , 隔开即可 <code>VALUES(),()</code></li>
</ol>
<h3 id="3-4、修改"><a href="#3-4、修改" class="headerlink" title="3.4、修改"></a>3.4、修改</h3><blockquote>
<p>update 修改谁 (条件) set原来的值=新值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改学员名字,带了条件</span><br><span class="line">UPDATE `student` SET `name`=&#x27;whlll&#x27; WHERE id=1;</span><br><span class="line"></span><br><span class="line">-- 不指定条件的情况下,会改动所有表！</span><br><span class="line">UPDATE `student` SET `name`=&#x27;长江七号&#x27;</span><br><span class="line"></span><br><span class="line">-- 修改多个属性</span><br><span class="line">UPDATE `student` SET `name`=&#x27;whlll&#x27;,`email`=&#x27;whlll0305lhl@gmail.com&#x27; WHERE id=1;</span><br><span class="line"></span><br><span class="line">-- 语法：</span><br><span class="line">-- UPDATE 表名 set column_name = value[column_name=value,...] where [条件]</span><br></pre></td></tr></table></figure>
<p>条件：where子句 运算符 id等于某个值，大于某个值，在某个区间内修改…</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>意义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt; 或 !=</td>
<td>不等于</td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr>
<td>BETWEEN…and…</td>
<td>[…]闭合区间</td>
<td>[2,5]</td>
<td></td>
</tr>
<tr>
<td>AND</td>
<td>与</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr>
<td>OR</td>
<td>或</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 通过多个条件定位数据</span><br><span class="line">UPDATE `student` SET `name`=&#x27;银河舰队&#x27; WHERE `name`=&#x27;whlll&#x27; AND sex=&#x27;女&#x27;</span><br></pre></td></tr></table></figure>

<p>语法：UPDATE 表名 set column_name = value[column_name=value,…] where [条件]<br>注意：</p>
<ul>
<li>column_name 是数据库的列，尽量带上```</li>
<li>条件，筛选条件，如果没有给定，则会修改所有的列</li>
<li>value，是一个具体的值，也可以是一个变量</li>
<li>多个设置的属性之间，使用英文逗号隔开<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE `student` SET `birthday`=CURRENT_TIME WHERE `name`=&#x27;银河舰队&#x27; AND sex=&#x27;女&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5、删除"><a href="#3-5、删除" class="headerlink" title="3.5、删除"></a>3.5、删除</h3><blockquote>
<p>delete 命令</p>
</blockquote>
<p>语法：delete from 表名 [where 条件]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除数据(避免这样写) 会全部删除</span><br><span class="line">DELETE FROM `student`;</span><br><span class="line">-- 删除指定数据</span><br><span class="line">DELETE FROM `student` WHERE id=1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>TRUNCATE 命令<br>作用：完全清空一个数据库表，表的结构和索引约束不会变！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 清空 student 表</span><br><span class="line">TRUNCATE `student`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete 和 TRUNCATE 区别</p>
</blockquote>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同：<ul>
<li>TRUNCATE 重新设置 自增列 计数器会归零</li>
<li>TRUNCATE 不会影响事务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 测试delete 和 TRUNCATE 区别</span><br><span class="line">CREATE TABLE `test`(</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`coll` VARCHAR(20) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `test`(`coll`) VALUES(&#x27;1&#x27;),(&#x27;2&#x27;),(&#x27;3&#x27;);</span><br><span class="line"></span><br><span class="line">DELETE FROM `test`; -- 不会影响自增</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE `test` -- 自增会归零</span><br></pre></td></tr></table></figure>
了解即可：DELETE删除的问题，重启数据库，现象</li>
</ul>
</li>
<li>INNODB 自增列会从1开始(存在内存中的，断电即失)</li>
<li>MyISAM 继续从上一个自增量开始(存在文件中的，断电不会丢失)</li>
</ul>
<h2 id="4、DQL查询数据-最重点"><a href="#4、DQL查询数据-最重点" class="headerlink" title="4、DQL查询数据(最重点)"></a>4、DQL查询数据(最重点)</h2><h3 id="4-1、DQL"><a href="#4-1、DQL" class="headerlink" title="4.1、DQL"></a>4.1、DQL</h3><p>(Data Query LANGUAGE:数据查询语言)</p>
<ul>
<li>所有的查询操作都用它 Slect</li>
<li>简单的查询，复杂的查询它都做~</li>
<li>__数据库中最核心的语言，最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询全部的学生 SELECT 字段 FROM 表</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">  </span><br><span class="line">-- 查询指定字段</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM student; </span><br><span class="line">  </span><br><span class="line">-- 别名 给结果起一个名字 AS 可以给字段起别名 也可以给表起别名</span><br><span class="line">SELECT `StudentNo` AS 学号,`StudentName` AS 学生姓名 FROM student AS s</span><br><span class="line"></span><br><span class="line">-- 函数 Concat(a,b)</span><br><span class="line">SELECT CONCAT(&#x27;姓名&#x27;,StudentName) AS 新名字 FROM student</span><br></pre></td></tr></table></figure>
<p>语法：SELECT 字段… FROM 表</p>
<blockquote>
<p>有的时候，列名字不是那么的好理解，起别名 AS (字段名 AS 别名) </p>
</blockquote>
<blockquote>
<p>去重 distinct<br>作用：去除SELECT查询出来的结果中的重复数据，重复的数据只显示一条</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT `StudnetNo` FROM result; -- 发现重复数据 去重</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库的列(表达式)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT VERSION() -- 查询系统版本(函数)</span><br><span class="line"></span><br><span class="line">SELECT 100*3-1 AS 计算结果 -- 用来计算(计算表达式)</span><br><span class="line"></span><br><span class="line">SELECT @@auto_increment_increment -- 查询自增的步长(变量)</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩 +1分 查看</span><br><span class="line">SELECT `StudentNo`,`StudentResult`+1 AS &#x27;提分后&#x27; FROM result</span><br></pre></td></tr></table></figure>

<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量… </p>
<p>select 表达式 from 表 </p>
<h3 id="4-3、where-条件子句"><a href="#4-3、where-条件子句" class="headerlink" title="4.3、where 条件子句"></a>4.3、where 条件子句</h3><p>作用：检索数据中 符合条件 的值  </p>
<p>搜索的条件由一个或多个表达式组成！ 结果 布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and &amp;&amp;</td>
<td>a and b</td>
<td>逻辑与</td>
</tr>
<tr>
<td>or</td>
<td>a or b</td>
<td>逻辑或</td>
</tr>
<tr>
<td>Not !</td>
<td>not a</td>
<td>逻辑非</td>
</tr>
<tr>
<td><strong>尽量使用英文字母</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- =====================where===========================</span><br><span class="line"></span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line"></span><br><span class="line">-- 查询考试成绩在 95-100 分之间的</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult&gt;95 AND StudentResult&lt;=100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- and &amp;&amp;</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult&gt;95 &amp;&amp; StudentResult&lt;=100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 模糊查询 (区间)</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100</span><br><span class="line"></span><br><span class="line">-- 除了1000号同学之外同学的成绩</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE studentNo!=1000;</span><br><span class="line"></span><br><span class="line">-- != not</span><br><span class="line">SELECT studentNo,`StudentResult` FROM result</span><br><span class="line">WHERE NOT studentNo = 1000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq笔记</title>
    <url>/2021/10/07/RabbitMq%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>原始操作系统的TCP/IP协议满足不了项目需求</p>
<p>添加中间件 添加头 -&gt; 满足要求</p>
<span id="more"></span>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul>
<li><p>特点：</p>
<ul>
<li>高可用</li>
<li>可靠性</li>
</ul>
</li>
<li><p>分布式消息中间件：</p>
<ul>
<li>ActiveMQ：老派</li>
<li>RabbitMQ：spring同源 支持度高</li>
<li>Kafka：开源 性能最高 最接近底层</li>
<li>RocketMQ：慎选</li>
<li>场景：<ul>
<li>消息中间件监控数据</li>
<li>异步数据传输场景</li>
<li>削峰填谷场景</li>
<li>任务调度场景</li>
<li>海量数据同步场景</li>
<li>分布式事务场景</li>
<li>日记管理场景</li>
<li>大数据分析场景</li>
</ul>
</li>
<li>考量：<ul>
<li>AMQP</li>
<li>MQTT</li>
<li>持久化设计</li>
<li>Kafka协议</li>
<li>消息分发设计</li>
<li>高可用</li>
<li>可靠性</li>
<li>容错</li>
</ul>
</li>
</ul>
</li>
<li><p>负载均衡中间件：</p>
<ul>
<li>Nginx</li>
<li>LVS负载均衡软件</li>
<li>KeepAlive -&gt; 高可用</li>
<li>CDN -&gt; 加速</li>
</ul>
</li>
<li><p>缓存中间件：</p>
<ul>
<li>MemCache</li>
<li>Redis</li>
</ul>
</li>
<li><p>数据库中间件：</p>
<ul>
<li>Mycat</li>
<li>Shardingjdbc</li>
</ul>
</li>
<li><p>案例分析：</p>
<ul>
<li>异步数据保存</li>
<li>订单数据的消息分发</li>
<li>分布式事务</li>
<li>消息的容错</li>
<li>分布式锁</li>
<li>分布式会话</li>
<li>分库分表</li>
</ul>
</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li>单体架构：<ul>
<li>耦合度太高</li>
<li>运维成本过高</li>
<li>不易维护</li>
<li>服务器的成本太高</li>
<li>升级架构的复杂度变高</li>
</ul>
</li>
<li>分布式架构：一个请求由多个系统来处理<ul>
<li>学习成本高 技术栈过多</li>
<li>运维成本 服务器成本高</li>
<li>人员成本</li>
<li>项目的复杂度上升</li>
<li>错误和容错率</li>
<li>占用的端口和通讯的选择成本</li>
<li>安全性的考虑被迫得选择RMI/MQ服务端通讯</li>
</ul>
</li>
</ul>
<blockquote>
<p>MQ消息队列：负责消息的接受、存储和传递，它的性能要高于普通的服务和技术</p>
</blockquote>
<h2 id="消息队列协议"><a href="#消息队列协议" class="headerlink" title="消息队列协议"></a>消息队列协议</h2><ul>
<li><p>AMQP：Erlang(底层C) 开发</p>
<ul>
<li>1.分布式事务支持</li>
<li>2.消息的持久化支持</li>
<li>高性能和高可靠性的消息处理优势</li>
</ul>
</li>
<li><p>MQTT:</p>
<ul>
<li>特点：<ul>
<li>轻量</li>
<li>结构简单</li>
<li>传输块、不支持事务</li>
<li>没有持久化设计</li>
</ul>
</li>
<li>应用场景：适用于计算能力有限、低带宽、网络不稳定的场景</li>
</ul>
</li>
<li><p>OpenMessage:</p>
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>支持事务和持久化设计</li>
</ul>
</li>
<li><p>KafKa：</p>
<ul>
<li>结构简单</li>
<li>解析速度快</li>
<li>无事务支持</li>
<li>有持久化设计</li>
</ul>
</li>
</ul>
<h2 id="消息队列的持久化"><a href="#消息队列的持久化" class="headerlink" title="消息队列的持久化"></a>消息队列的持久化</h2><p>数据不存在内存中 -&gt; 写入磁盘中 持久化保存</p>
<h2 id="消息的分发策略"><a href="#消息的分发策略" class="headerlink" title="消息的分发策略"></a>消息的分发策略</h2><p>角色：</p>
<ul>
<li>1.生产者</li>
<li>2.存储消息</li>
<li>3.消费者</li>
</ul>
<h2 id="RabbitMQ的角色分类"><a href="#RabbitMQ的角色分类" class="headerlink" title="RabbitMQ的角色分类"></a>RabbitMQ的角色分类</h2><blockquote>
<p>1:none</p>
</blockquote>
<ul>
<li>不能访问management plugin</li>
</ul>
<blockquote>
<p>2:management:查看自己相关节点信息</p>
</blockquote>
<ul>
<li>列出自己可以通过AMQP登入的虚拟机</li>
<li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li>
<li>查看和关闭自己的channels和connections</li>
<li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts 中的活动信息。</li>
</ul>
<blockquote>
<p>3:Policymaker</p>
</blockquote>
<ul>
<li>包含management所有权限</li>
<li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li>
</ul>
<blockquote>
<p>4:Monitoring</p>
</blockquote>
<ul>
<li>包含所有management所有权限</li>
<li>罗列出所有的virtual hosts 包括不能登录的virtual hosts</li>
<li>查看其他用户的connections和channel信息</li>
<li>查看节点级别的数据如clustering和memory使用情况</li>
<li>查看所有的virtual hosts的全局统计信息</li>
</ul>
<blockquote>
<p>5:Administrator</p>
</blockquote>
<ul>
<li>最高权限</li>
<li>可以创建和删除virtual hosts</li>
<li>可以查看，创建和删除users</li>
<li>查看创建permissions</li>
<li>关闭所有用户的connections</li>
</ul>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul>
<li>Simple:<ul>
<li>1.创建连接工程</li>
<li>2.创建连接Connection</li>
<li>3.通过连接获取通道Channel</li>
<li>4.通过通道创建交换机、声明队列、绑定关系、路由key、发送消息和接受消息</li>
<li>5.准备消息内容</li>
<li>6.发送消息给队列queue</li>
<li>7.关闭连接</li>
<li>8.关闭通道</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）yum 包更新到最新</span><br><span class="line">&gt; yum update</span><br><span class="line">（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">（3）设置yum源为阿里云</span><br><span class="line">&gt; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">（4）安装docker</span><br><span class="line">&gt; yum install docker-ce -y</span><br><span class="line">（5）安装后查看docker版本</span><br><span class="line">&gt; docker -v</span><br><span class="line"> (6) 安装加速镜像</span><br><span class="line"> sudo mkdir -p /etc/docker</span><br><span class="line"> sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"> &#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://0wrdwnn6.mirror.aliyuncs.com&quot;]</span><br><span class="line"> &#125;</span><br><span class="line"> EOF</span><br><span class="line"> sudo systemctl daemon-reload</span><br><span class="line"> sudo systemctl restart docker</span><br><span class="line"> (7) 获取rabbit镜像：</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"> (8)创建并运行容器</span><br><span class="line">&gt; docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e           RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</span><br><span class="line"> (9)查看日志</span><br><span class="line">&gt; docker logs -f myrabbit</span><br><span class="line"> (10)查看服务</span><br><span class="line">&gt; docker ps -a</span><br><span class="line"> (11)关闭容器</span><br><span class="line">&gt; docker 08d03ae27334 stop</span><br></pre></td></tr></table></figure>

<h3 id="为什么RabbitMq是基于通道而不是基于连接？"><a href="#为什么RabbitMq是基于通道而不是基于连接？" class="headerlink" title="为什么RabbitMq是基于通道而不是基于连接？"></a>为什么RabbitMq是基于通道而不是基于连接？</h3><ul>
<li>Connection表示到消息代理的真实TCP连接，而Channel是其中的虚拟连接(AMQP连接)。这样，您可以在应用程序内部使用任意数量的(虚拟)连接，而不会使TCP连接使代理过载</li>
<li>您可以为所有内容使用一个Channel。但是，如果您有多个线程，建议为每个线程使用不同的Channel</li>
</ul>
<h3 id="可以存在没有交换机的队列么？"><a href="#可以存在没有交换机的队列么？" class="headerlink" title="可以存在没有交换机的队列么？"></a>可以存在没有交换机的队列么？</h3><ul>
<li>不可以，没有为队列指定交换机时，同一指向默认交换机</li>
</ul>
<h2 id="RabbitMq核心组件"><a href="#RabbitMq核心组件" class="headerlink" title="RabbitMq核心组件"></a>RabbitMq核心组件</h2><p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-structure.png" alt="avatar"></p>
<ul>
<li>每一个virtual Host里还有routinkey -&gt; 条件 分发给不同的消费者 (对应非广播场景) -&gt; 过滤</li>
<li>RabbitMQ 消息传递模型的核心思想是生产者从不直接向队列发送任何消息 实际上，生产者经常甚至根本不知道消息是否会被传送到任何队列</li>
<li>生产者只能将消息发送到<em>交换</em>。交换是一件非常简单的事情。一方面它接收来自生产者的消息，另一方面将它们推送到队列中。交易所必须确切地知道如何处理它收到的消息。它应该附加到特定队列吗？它应该附加到许多队列中吗？或者它应该被丢弃。其规则由<em>交换类型</em>定义 。</li>
</ul>
<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><ul>
<li>simple<ul>
<li>应用场景：手机短信、邮件单发</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-simple.png" alt="simple"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28 20:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明组件、交换机和队列、简单模板案例、交换机使用默认交换机，队列需要声明</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否持久化</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否专属</span></span><br><span class="line">                <span class="keyword">false</span>,<span class="comment">//队列是否自动删除，从第一个消费端监听队列开始</span></span><br><span class="line">                <span class="comment">//计算，到最后一个消费端断开连接，队列就会自动删除</span></span><br><span class="line">                <span class="keyword">null</span>);<span class="comment">//map类型 key值固定一批属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息到队列 生产端 永远不会把消息直接发给队列，发给交换机</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;whlll你好啊&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//将消息发给(AMQP DEFAULT)交换机 名字&quot;&quot;</span></span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,<span class="comment">//发送给的交换机的名字，默认为空</span></span><br><span class="line">                <span class="string">&quot;simple&quot;</span>,<span class="comment">//设置路由key</span></span><br><span class="line">                <span class="keyword">null</span>,<span class="comment">//发送消息时携带的参数</span></span><br><span class="line">                msgByte<span class="comment">//消息体</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;simple&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 传递回调对象. 消息就在这个对象里</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> s        当前消费端id</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> delivery 封装了消息的对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="comment">//从消息对象中拿到信息</span></span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费玩消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 当连接对象channel 主动关闭消费端连接时 cancel 这个方法才会被调用</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@param</span> s 消费端id</span></span><br><span class="line"><span class="comment">                         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//使用while true 将线程卡死，否则看不到消息消费逻辑</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Work模式"><a href="#Work模式" class="headerlink" title="Work模式"></a>Work模式</h3><ul>
<li>work queues<ul>
<li>工作队列（又名：<em>任务队列</em>）背后的主要思想是避免立即执行资源密集型任务而不得不等待它完成。相反，我们安排任务稍后完成。我们将一个<em>任务</em>封装 成一条消息并发送到队列中。在后台运行的工作进程将弹出任务并最终执行作业。当您运行许多工人时，任务将在他们之间共享</li>
<li>应用场景：抢红包、资源分配</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-work.png" alt="work queues"></p>
<h4 id="轮询分发"><a href="#轮询分发" class="headerlink" title="轮询分发"></a>轮询分发</h4><ul>
<li>轮询分发(均匀分给每一个消费者)：默认为轮询 可以不设置为手动应答</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="公平分发"><a href="#公平分发" class="headerlink" title="公平分发"></a>公平分发</h4><ul>
<li>公平分发(谁新能好优先分给谁处理)：配置Qos并谁设置为手动应答</li>
<li>Qos：每次从队列读取的消息条数(根据具体的设备资源情况而定)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myQueueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列申明成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        String msg = <span class="string">&quot;hahah whlll&quot;</span>+i;</span><br><span class="line">        <span class="keyword">byte</span>[] msgByte = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;work&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                msgByte</span><br><span class="line">        );</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume01</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者01：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//如果autoAck false说明消费完消息，需要手动确认</span></span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);<span class="comment">//每次从队列读取的消息条数</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>, <span class="keyword">false</span>,</span><br><span class="line">                <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] body = delivery.getBody();</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者02：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                        <span class="comment">//公平分发</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        channel.basicAck(</span><br><span class="line">                                delivery.getEnvelope().getDeliveryTag(),</span><br><span class="line">                                <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h3><ul>
<li>publish/sbscribe(Fanout)<ul>
<li>工作队列背后的假设是每个任务都被交付给一个工人。在这一部分，我们将做一些完全不同的事情——我们将向多个消费者传递一条消息。这种模式被称为“发布/订阅”</li>
<li>应用场景：邮件的群发、广告的群发</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/exchange.png" alt="excahnge"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutMode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初试化连接</span></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机，队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字,绑定默认交换机,暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME,TYPE);<span class="comment">//声明了一个名为 fanout_ex 类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系,由于发布订阅,绑定时需要提供自定义的路由key,随意</span></span><br><span class="line">        channel.queueBind(QUEUE01,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02,EX_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,发布订阅模式&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;北京&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><ul>
<li>routing(direct)<ul>
<li>应用场景：处理一些特殊的消息逻辑,可以经过路由的筛选</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050045110.png" alt="routing"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备交换机，队列名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//fanout_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01 = TYPE + <span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02 = TYPE + <span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//只会使用自己的名字，绑定默认交换机，暂时和我们自定义交换机没有关系</span></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);<span class="comment">//声明一个名为fanout_ex类型为fanout的交换机</span></span><br><span class="line">        <span class="comment">//绑定交换机和队列的关系。由于发布订阅，绑定时需要提供自定义的路由key，随意</span></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;你好，路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;上海&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h3><ul>
<li>topics<ul>
<li>虽然使用直接交换改进了我们的系统，但它仍然有局限性——它不能基于多个标准进行路由。</li>
<li>*（星号）可以正好代替一个词。</li>
<li># (hash) 可以代替零个或多个单词。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046915.png" alt="eg_1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050046851.png" alt="eg_2"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.rabbitmq.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChannelInit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.115.207.246&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备交换机,队列的名称属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE=<span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EX_NAME=TYPE+<span class="string">&quot;_ex&quot;</span>;<span class="comment">//topic_ex</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=TYPE+<span class="string">&quot;_Q1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=TYPE+<span class="string">&quot;_Q2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declare</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        channel.queueDeclare(QUEUE01, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE02, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EX_NAME, TYPE);</span><br><span class="line"></span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.北京.#&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE01, EX_NAME, <span class="string">&quot;中国.*.*.*.*&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE02, EX_NAME, <span class="string">&quot;*.上海.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="string">&quot;你好,路由模式交换机&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line">        channel.basicPublish(EX_NAME,<span class="string">&quot;中国.上海.大兴.亦庄.你爹&quot;</span>,<span class="keyword">null</span>,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Header模式"><a href="#Header模式" class="headerlink" title="Header模式"></a>Header模式</h3><ul>
<li>RPC(header)<ul>
<li>如果我们需要在远程计算机上运行一个函数并等待结果呢？嗯，这是一个不同的故事。这种模式通常称为<em>远程过程调用</em>或<em>RPC</em></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110050056988.png" alt="header"></p>
<ul>
<li>第三个参数 -&gt; 附加参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes());</span><br></pre></td></tr></table></figure>

<h2 id="整合SpringBoot-Fanout模式"><a href="#整合SpringBoot-Fanout模式" class="headerlink" title="整合SpringBoot-Fanout模式"></a>整合SpringBoot-Fanout模式</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.115</span><span class="number">.207</span><span class="number">.246</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>

<h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="service-fanout"><a href="#service-fanout" class="headerlink" title="service.fanout"></a>service.fanout</h4><ul>
<li>FanoutDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FanoutEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>FanoutSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Fanout 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="整合SpringBoot-Direct模式"><a href="#整合SpringBoot-Direct模式" class="headerlink" title="整合SpringBoot-Direct模式"></a>整合SpringBoot-Direct模式</h2><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><h4 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="config-1"><a href="#config-1" class="headerlink" title="config"></a>config</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;direct_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(directExchange()).with(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(directExchange()).with(<span class="string">&quot;duanxin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(directExchange()).with(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.whlll.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootOrderRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Fanout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderFanout(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Direct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrderDirect(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><h4 id="service-direct"><a href="#service-direct" class="headerlink" title="service.direct"></a>service.direct</h4><ul>
<li>DirectDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>DirectEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>DirectSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Direct 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>配置类应该先在消费者配置启动，等待消息即可</p>
<h2 id="整合SpringBoot-Topic模式-注解方式"><a href="#整合SpringBoot-Topic模式-注解方式" class="headerlink" title="整合SpringBoot-Topic模式(注解方式)"></a>整合SpringBoot-Topic模式(注解方式)</h2><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><h4 id="service-2"><a href="#service-2" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/5 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderFanout</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderDirect</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderid);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTopic</span><span class="params">(String userid, String productid, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderid = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;订单产生成功：-&gt;&quot;</span>+orderid);</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;topic_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;com.duanxin.&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Test-2"><a href="#Test-2" class="headerlink" title="Test"></a>Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads_Topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    orderService.makeOrderTopic(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><h4 id="service-Topic"><a href="#service-Topic" class="headerlink" title="service.Topic"></a>service.Topic</h4><ul>
<li>TopicDuanxinComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.duanxin.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicDuanxinComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duanxin Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TopicEmailComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.email.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicEmailComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TopicSMSComsumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.whlll.service.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/6 0:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;sms.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.sms.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSMSComsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SMS Topic 接收到的订单信息：-&gt;&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="TTL过期时间"><a href="#TTL过期时间" class="headerlink" title="TTL过期时间"></a>TTL过期时间</h2><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置。</p>
<ul>
<li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li>
<li>第二种方法是对消息进行单独设置，每条消息TTL可以不同。</li>
</ul>
<p>如果上述两种方法同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message被投递到死信队列， 消费者将无法再收到该消息。</p>
<p><strong>实现设置队列过期时间</strong></p>
<ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlRabbitmqConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderTtl</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;user:&quot;</span>+orderNumer);</span><br><span class="line">        String routeKey = <span class="string">&quot;ttl&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ fanout</span></span><br><span class="line">        rabbitTemplate.convertAndSend(ttlExchangeName, routeKey, orderNumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Testvoid</span> contextLoads2Ttl() <span class="keyword">throws</span> InterruptedException &#123;    orderService.makeOrderTtl(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">12</span>);&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者监视类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;ttl.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">ttlRevice</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ttl --&gt;&gt;&gt;&gt;&gt;&gt;&gt;邮件发送消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现设置消息过期机制</strong></p>
<ul>
<li>producer代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">messageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;message.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">messageOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;message_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(messageQueue()).to(messageOrderExchange()).with(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>producer发送消息代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlOrder</span><span class="params">(String userId, String productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">&quot;message_order_exchange&quot;</span>;</span><br><span class="line">        String routeKey = <span class="string">&quot;message&quot;</span>;</span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot;,订单编号是：&quot;</span> + orderNumer);</span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey,userId, messagePostProcessor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>consumer消费者监听方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;message.queue&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">messageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageRevice</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message-&gt;&gt;&gt;&gt;消费消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生产者测试类发送消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.ttlOrder(<span class="string">&quot;1&quot;</span>,<span class="string">&quot; 1&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><ul>
<li><p>概念</p>
</li>
<li><p>当一条消息在队列中出现以下三种情况的时候，该消息就会变成一条死信。</p>
<ul>
<li>消息被拒绝(basic.reject / basic.nack)，并且requeue = false</li>
<li>消息TTL过期</li>
<li>队列达到最大长度</li>
</ul>
</li>
<li><p>当消息在一个队列中变成一个死信之后，如果配置了死信队列，它将被重新publish到死信交换机，死信交换机将死信投递到一个队列上，这个队列就是死信队列</p>
</li>
<li><p>生产者配置类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadRabbitMqConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;dead_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadqueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.direct.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadbinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadqueue()).to(deadExchange()).with(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改原TTL队列属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dead_direct_exchange&quot;</span>);</span><br><span class="line">      args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;dead&quot;</span>);<span class="comment">//fanout不需要配置</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>error：队列已存在 不会覆盖 (线上环境 -&gt; 新建一个属性一样的队列绑定死信队列来替换 危险 -&gt; 直接删除线上队列)</strong></p>
<h2 id="RabbitMq内存磁盘的监控"><a href="#RabbitMq内存磁盘的监控" class="headerlink" title="RabbitMq内存磁盘的监控"></a>RabbitMq内存磁盘的监控</h2><p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/rabbitmq-io.png" alt="rabbitmq-io"></p>
<ul>
<li>内存</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">vm_memory_high_watermark.relative</span> = (<span class="number">0.4</span>~<span class="number">0.7</span>)</span><br><span class="line">&gt;<span class="attr">vm_memory_high_watermark.absolute</span> = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_vm_memory_high_watermark.absolute</span> = <span class="number">50</span>MB</span><br></pre></td></tr></table></figure>

<ul>
<li>磁盘</li>
</ul>
<blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&gt;<span class="attr">disk_free_limit.relative</span> = <span class="number">3.0</span>disk_free_limit.absolute = <span class="number">2</span>GB</span><br></pre></td></tr></table></figure>
</blockquote>
<p>eg.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">rabbitmqctl <span class="attr">set_disk_free_limit.absolute</span> = <span class="number">100</span>GB</span><br></pre></td></tr></table></figure>

<h2 id="Rabbitmq分布式事务"><a href="#Rabbitmq分布式事务" class="headerlink" title="Rabbitmq分布式事务"></a>Rabbitmq分布式事务</h2><p>在不同的系统之间(JVM)如何保持数据的一致性 -&gt; 分布式事务</p>
<ul>
<li>本地消息表(异步确保)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/202110071434955.png"></p>
<p>执行步骤如下:</p>
<ol>
<li>MQ发送方发送远程事务消息到MQ Server;</li>
<li>MQ Server给予响应, 表明事务消息已成功到达MQ Server.</li>
<li>MQ发送方Commit本地事务.</li>
<li>若本地事务Commit成功, 则通知MQ Server允许对应事务消息被消费; 若本地事务失败, 则通知MQ Server对应事务消息应被丢弃.</li>
<li>若MQ发送方超时未对MQ Server作出本地事务执行状态的反馈, 那么需要MQ Servfer向MQ发送方主动回查事务状态, 以决定事务消息是否能被消费.</li>
<li>当得知本地事务执行成功时, MQ Server允许MQ订阅方消费本条事务消息</li>
</ol>
<p>需要额外说明的一点, 就是事务消息投递到MQ订阅方后, 并不一定能够成功执行. 需要MQ订阅方主动给予消费反馈(ack)</p>
<ul>
<li>如果MQ订阅方执行远程事务成功, 则给予消费成功的ack, 那么MQ Server可以安全将事务消息移除;</li>
<li>如果执行失败, MQ Server需要对消息重新投递, 直至消费成功.</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>消息中间件在系统中扮演一个重要的角色, 所有的事务消息都需要通过它来传达, 所以消息中间件也需要支持 HAC 来确保事务消息不丢失.</li>
<li>根据业务逻辑的具体实现不同，还可能需要对消息中间件增加消息不重复, 不乱序等其它要求.</li>
</ul>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>执行周期较长</li>
<li>实时性要求不高</li>
</ul>
<p>例如:</p>
<ul>
<li>跨行转账/汇款业务(两个服务分别在不同的银行中)</li>
<li>退货/退款业务</li>
<li>财务, 账单统计业务(先发送到消息中间件, 然后进行批量记账)</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>RabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>建站指南</title>
    <url>/2021/10/03/%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="whlll-建站指南"><a href="#whlll-建站指南" class="headerlink" title="whlll-建站指南"></a>whlll-建站指南</h1><blockquote>
<p>说是指南也谈不上，因为作为一个菜鸟，也都是在网络上搜罗搜罗，东拼西凑，搭好了这个小破站，看到那些维护了5、6年的个人博客网站，顿时心生敬佩</p>
</blockquote>
<span id="more"></span>
<h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><ul>
<li><p>网站框架：Hexo</p>
<ul>
<li>选择理由：<ul>
<li>机缘巧合，一眼就被它简明大气的风格吸引了(Next)，难怪拥戴的人这么多</li>
<li>对我这种初出茅庐的小菜鸡比较友好</li>
<li>学生党福音，白嫖属性Max</li>
</ul>
</li>
</ul>
</li>
<li><p>部署：GitHub Pages</p>
<ul>
<li>选择理由：<ul>
<li>免费方便，可能之后如果要让更多的人看到，要迁移，好像是跟搜索优先级和服务器访问速度有关(不知道是不是给自己挖了一个坑)</li>
<li>上新一下Github,让自己的仓库充实一下 ，就当成一个开端吧</li>
</ul>
</li>
</ul>
</li>
<li><p>图床：PicGo + gitHub图床</p>
<ul>
<li>选择理由：<ul>
<li>免费！！！操作相对简单，虽然我也没有怎么体验过其他图床</li>
</ul>
</li>
</ul>
</li>
<li><p>环境版本：</p>
<ul>
<li>Node.js:14.18.0 -&gt; npm:6.14.15(他俩现在是一起的绑定在一起的，就是防止出现版本不适配的问题)</li>
<li>git：2.31.1</li>
</ul>
</li>
</ul>
<hr>
<h2 id="当你也想搭建一个小破站玩一玩"><a href="#当你也想搭建一个小破站玩一玩" class="headerlink" title="当你也想搭建一个小破站玩一玩"></a>当你也想搭建一个小破站玩一玩</h2><blockquote>
<p>我推荐你阅读官方的文档和作者的指南 当然 如果你是一个和我一样的freshman 你可以将这篇文章当做一个入门，一个new beginning</p>
</blockquote>
<ul>
<li><p>博主搭建时 参考的文档</p>
<ul>
<li>你把Hexo下下来以后 Hexo init 以后 在博客文件的根目录里的 _config.yml里里面每一个功能模块 上方的注释里都有网址 复制到浏览器查看 然后将网站的语言设置为中文 就可以开启你奇妙的探索之旅了 (反正我是这么做的)</li>
</ul>
</li>
<li><p>跟着我这篇博客 走一遍流程</p>
</li>
</ul>
<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><h3 id="1-1、nodejs下载"><a href="#1-1、nodejs下载" class="headerlink" title="1.1、nodejs下载"></a>1.1、nodejs下载</h3><blockquote>
<p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！(官网cv的，目前不太能理解，感觉有点像jre？)</p>
</blockquote>
<p><font size=6 color=red>坑</font>:如果你之前下载了node.js，是beta版(最、较新的版本) 请务必删了 然后重新下载LTS版本(稳定并且长期维护的版本)，不然你就会像我一样，在npm和node版本适配和vs C++环境的问题上兜兜转转十个小时，一筹莫展。记住一句话，遇到问题超过一小时还没办法解决 就删干净重装稳定版，remake</p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location.png" alt="avatar"></p>
<p>一路next：<strong>最后这里一定要选择 它会检测当前环境是否完整，然后下载确实的环境 (Attention!)</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/nodejs-location-1.png" alt="avatar"></p>
<p>然后在PowerShell(windows)里 node -v 和 npm -v 一下 看看装好了没</p>
<h3 id="1-2、Git下载和使用"><a href="#1-2、Git下载和使用" class="headerlink" title="1.2、Git下载和使用"></a>1.2、Git下载和使用</h3><ul>
<li>这教程就比较多了 百度第一条 附一下</li>
</ul>
<blockquote>
<p><a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html">https://www.cnblogs.com/ximiaomiao/p/7140456.html</a></p>
</blockquote>
<ul>
<li>Git的原理和相关操作的熟练 来这个网站学习一下吧 比较有趣 动手性还强</li>
</ul>
<blockquote>
<p><a href="https://oschina.gitee.io/learn-git-branching/">https://oschina.gitee.io/learn-git-branching/</a></p>
</blockquote>
<h3 id="1-3、Hexo安装"><a href="#1-3、Hexo安装" class="headerlink" title="1.3、Hexo安装"></a>1.3、Hexo安装</h3><p>步骤：</p>
<ul>
<li>就安一个内核，至于其他的第三方插件，需要再装(注意这里推荐使用GIt bash 命令行总会出一下莫名其妙的错误)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>

<ul>
<li>查看一下hexo版本 看看安装是否成功了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>出现如下这种 证明安装好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.19042</span><br><span class="line">node: 14.18.0</span><br><span class="line">v8: 8.4.371.23-node.84</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 83</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1l</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<ul>
<li>自己找一个喜欢的位置，创建一个空的文件夹，右键git bash一下,输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>初始化，其实就是将GitHub上的核心库clone下来，如果没有科学上网，网速较慢的话，多试几次，总有一次会成功，或者按照网上说的，去查ip，设置本地的Host，不过博主自己实践过，效果真心一般，最快的ip 延时都是 100ms+ </p>
<blockquote>
<p>博客文件结构如下</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-structure.png" alt="avatar"></p>
<p><strong>OK! 搞定了 简简单单~~~</strong></p>
<h3 id="1-4、Hexo测试-Hello-World"><a href="#1-4、Hexo测试-Hello-World" class="headerlink" title="1.4、Hexo测试 Hello World"></a>1.4、Hexo测试 Hello World</h3><ul>
<li>同样在博客根目录下 git bash 一下(就是你之前创建的那个文件夹下)，输入</li>
<li>清楚本地缓存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<ul>
<li>编译渲染(general)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<ul>
<li>将博客网站运行在本地(server) 加上–debug本地的改动可以实时的动态在本地的4000端口查看(推荐)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<ul>
<li>在浏览器上输入 localhost:4000查看界面如下</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/hexo-start.png" alt="avatar"></p>
<ul>
<li>Congratulation! Everything well down~~~</li>
</ul>
<h2 id="2-个性化博客和deploy-发布"><a href="#2-个性化博客和deploy-发布" class="headerlink" title="2.个性化博客和deploy(发布)"></a>2.个性化博客和deploy(发布)</h2><blockquote>
<p>在个性化博客之前，首先你需要选一个主题 可以在官网去逛一逛，如果你是被我这篇博客的风格吸引的 又或者 你不知道该怎么选择</p>
<p>那就选nexT 一定没错的 要相信大家的选择</p>
</blockquote>
<ul>
<li>下载主题(theme)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next --save</span><br></pre></td></tr></table></figure>

<ul>
<li>查看博客文件夹下的node_modules里有没有hexo-theme-next 有就下载成功了</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-location.png" alt="avatar"></p>
<ul>
<li>进入这个文件夹 以后我们对next主题的配置都是对这里的_config.yml文件配置了</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/next-config.png" alt="avatar"></p>
<blockquote>
<p>在hexo-theme-next文件夹下 有一个_config.yml 这个主要是个性化主题的</p>
<p>在博客根目录我这里的Blog下，也有一个_config.yml这个主要是配置全局的一些东西</p>
<p>(由于主题配置的_config.yml里的东西太多，这篇博客就引一两个重要的说，然后根目录下的配置文件枚举说明) </p>
</blockquote>
<ul>
<li>Blog/_config.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">whlll-blog</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;whlll的小破站❥&#x27;</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">whlll</span> <span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment"># 网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27; # 设置GitHub pages 这个也可以在博客根目录下的_config.yml下配置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面都是一些规则设置 可以不用管</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format # 时间格式设置</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># 配置主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 配置远程仓库(我这配置的是GitHub的仓库和ali云ESC服务器上的git仓库)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">              <span class="attr">github:</span> <span class="string">https://github.com/whlll-coder/whlll-coder.github.io.git,main</span></span><br><span class="line">              <span class="comment">#hexo: git@47.115.207.246:/home/git/hexo.git,main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span> <span class="comment"># 第三方插件 hexo-word-counter的配置 可以统计每篇博客的阅读时间 字数之类的 感觉很细节很贴心</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span> <span class="comment"># 本地搜索在博客根目录_config.yml下的配置 还需要在主题_config.yml下enable：true一下就可以用了</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>hexo-theme-next/_config.yml(截取博主配置的)</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes # 主题样式 有四个 博主对比了一下 个人比较喜欢Mist</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode # 黑暗模式 网页端看不出来啥 但是移动端会变</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span> <span class="comment"># 网站logo设置(网上有很多免费的在线logo设计软件，虽然质量和可选择性不是那么的尽善尽美 直接改名字替换原来的就ok了 这里不知道能不能使用图床里的url地址 没有以后更新的时候把这个坑填一下)</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span> <span class="comment"># 设置菜单 直接取消注解就可以了 </span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span>	<span class="comment"># 设置社交连接和友情连接 依葫芦画瓢</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/whlll-coder</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:whlll0305lhl@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/u/7193773610</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">谁把钱丢了:</span> <span class="string">https://www.jmyblog.top/</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span> <span class="comment"># 设置是否开启博客的文章目录功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span> <span class="comment"># 开启文章的的打赏功能</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">Buy</span> <span class="string">me</span> <span class="string">a</span> <span class="string">coffee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span> <span class="comment"># 附上付款码</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/wechatpay.jpg</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://cdn.jsdelivr.net/gh/whlll-coder/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span> <span class="comment"># 开启GitHub小标 博客右上角</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/whlll-coder</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span> <span class="comment"># 开启本地搜索功能 </span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Chat Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need to enable and configure the chat service.</span></span><br><span class="line"><span class="attr">chat:</span> <span class="comment"># 设置在线客服功能(客服当然是博主本人~~~)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set false to disable icon.</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">Chat</span> <span class="string">with</span> <span class="string">me</span> <span class="comment"># Button text, change it as you wish.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra Support</span></span><br><span class="line"><span class="comment"># For more information: https://chatra.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line"><span class="attr">chatra:</span> <span class="comment"># 先用的是这个软件 感觉还可以 只需要去下面的网站注册一下 然后把setting里的id复制过来就可以了</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">cHCGeJJx2x2CH2DDt</span></span><br><span class="line">  <span class="comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Canvas ribbon</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="string">彩带动画特效</span> <span class="string">个人觉得一般</span> <span class="string">喜欢可以开启看看</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">100</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>搞了这么多这么久 来发布一篇博客试一试吧</p>
</blockquote>
<h3 id="2-1、创建博文"><a href="#2-1、创建博文" class="headerlink" title="2.1、创建博文"></a>2.1、创建博文</h3><ul>
<li>一样的，到博客的根目录下 git bash 一下 输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;你的博客标题&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>在根目录下的source/_post文件夹下，你就能找到你刚刚生成的博文的md文件了 用Typora打开皆可以开启你的创作之旅了</li>
<li>在md文件里，hexo会自动帮你生成一个前缀</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: MySql笔记</span><br><span class="line">date: 2021-10-02 19:55:12</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 工作学习</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> MySql</span><br><span class="line"><span class="section">- 数据库</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的categories和tags是什么 -&gt; 文章的分类和标签</p>
</blockquote>
<h3 id="2-2、文章分类创建"><a href="#2-2、文章分类创建" class="headerlink" title="2.2、文章分类创建"></a>2.2、文章分类创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建成功后，在Blog\source\categories下生成index.md文件 将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-10-02 19:30:09</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3、文章标签创建"><a href="#2-3、文章标签创建" class="headerlink" title="2.3、文章标签创建"></a>2.3、文章标签创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建成功后，在Blog\source\tags下同样生成index.mdwe文件，将其修改为：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-03 14:50:12</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4、文章发布"><a href="#2-4、文章发布" class="headerlink" title="2.4、文章发布"></a>2.4、文章发布</h3><ul>
<li>写好文章保存之后</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d (发布到远程仓库，通过GitHub page便可以访问)</span><br></pre></td></tr></table></figure>

<h2 id="3-第三方插件"><a href="#3-第三方插件" class="headerlink" title="3.第三方插件"></a>3.第三方插件</h2><ul>
<li>在博客根目录下的 package.json 下 有你的当前使用的第三方插件和相关依赖 如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-next&quot;</span>: <span class="string">&quot;^8.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-word-counter&quot;</span>: <span class="string">&quot;0.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;live2d-widget-model-tororo&quot;</span>: <span class="string">&quot;^1.0.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1、hexo-deployer-git"><a href="#3-1、hexo-deployer-git" class="headerlink" title="3.1、hexo-deployer-git"></a>3.1、hexo-deployer-git</h3><blockquote>
<p>博客发布是与git适配的一个插件 第一次 hexo d 时 需要在 GitHub setting下生成一个 access token 可以参考b站Hexo教程最后一集3-5分钟搞定</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="3-2、hexo-helper-live2d"><a href="#3-2、hexo-helper-live2d" class="headerlink" title="3.2、hexo-helper-live2d"></a>3.2、hexo-helper-live2d</h3><blockquote>
<p>一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>

<ul>
<li>本站的小tororo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-tororo</span><br></pre></td></tr></table></figure>

<p>在博客根目录下的_config.yml下配置一下，配置一下 开猫即用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Live2D小白猫</span></span><br><span class="line"><span class="attr">live2d:</span> <span class="comment"># live2d第三方插件 博客右下方小tororo的配置(live2d-widget-model-tororo)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3、hexo-word-counter"><a href="#3-3、hexo-word-counter" class="headerlink" title="3.3、hexo-word-counter"></a>3.3、hexo-word-counter</h3><blockquote>
<p>字数统计 阅读时长统计</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-word-counter</span><br></pre></td></tr></table></figure>

<h3 id="3-4、hexo-tag-cloud"><a href="#3-4、hexo-tag-cloud" class="headerlink" title="3.4、hexo-tag-cloud"></a>3.4、hexo-tag-cloud</h3><blockquote>
<p>标签云</p>
</blockquote>
<ul>
<li>使用</li>
</ul>
<blockquote>
<p>eg:D:\whlll\Blog\node_modules\hexo-theme-next\layout_macro</p>
</blockquote>
<ul>
<li>修改</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/whlll-coder/images/tags-cloud.png" alt="avatar"></p>
<ul>
<li>自定义：根目录下添加</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">  <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">  <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">  <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">  <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">  <span class="attr">maxSpeed:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">pauseOnSelected:</span> <span class="literal">false</span> <span class="comment"># true 意味着当选中对应 tag 时,停止转动</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小破站</category>
      </categories>
      <tags>
        <tag>建站指南</tag>
      </tags>
  </entry>
</search>
